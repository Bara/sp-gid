¶ifunctionsò0ødnameiLogToGamehdocStartÈfdocEndtddocs¢ebriefx'Logs a generic message to the HL2 logs.dtagsÉ¢ctag`dtextx'Logs a generic message to the HL2 logs.¢ctaglparam:formatdtextx8Logs a generic message to the HL2 logs. 
 String format.¢ctagiparam:...dtextxJLogs a generic message to the HL2 logs. 
 String format. Format arguments.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamemSetRandomSeedhdocStartÆfdocEnd ddocs¢ebriefx=Sets the seed value for the global Half-Life 2 Random Stream.dtagsÇ¢ctag`dtextx=Sets the seed value for the global Half-Life 2 Random Stream.¢ctagjparam:seeddtextxKSets the seed value for the global Half-Life 2 Random Stream. 
 Seed value.dkindfnativejreturnTypedvoidiargumentsÅ£dtypecintdnamedseedddeclhint seedˇødnamenGetRandomFloathdocStartJfdocEndOddocs¢ebriefxJReturns a random floating point number from the Half-Life 2 Random Stream.dtagsÑ¢ctag`dtextxJReturns a random floating point number from the Half-Life 2 Random Stream.¢ctagjparam:fMindtextxbReturns a random floating point number from the Half-Life 2 Random Stream. 
 Minimum random bound.¢ctagjparam:fMaxdtextxxReturns a random floating point number from the Half-Life 2 Random Stream. 
 Minimum random bound. Maximum random bound.¢ctagfreturndtextx´Returns a random floating point number from the Half-Life 2 Random Stream. 
 Minimum random bound. Maximum random bound. A random number between (inclusive) fMin and fMax.dkindfnativejreturnTypeefloatiargumentsÇ£dtypeefloatdnamedfMinddecljfloat fMin£dtypeefloatdnamedfMaxddecljfloat fMaxˇødnamelGetRandomInthdocStartëfdocEndáddocs¢ebriefx;Returns a random number from the Half-Life 2 Random Stream.dtagsÑ¢ctag`dtextx;Returns a random number from the Half-Life 2 Random Stream.¢ctagjparam:nmindtextxSReturns a random number from the Half-Life 2 Random Stream. 
 Minimum random bound.¢ctagjparam:nmaxdtextxiReturns a random number from the Half-Life 2 Random Stream. 
 Minimum random bound. Maximum random bound.¢ctagfreturndtextxúReturns a random number from the Half-Life 2 Random Stream. 
 Minimum random bound. Maximum random bound. A random number between (inclusive) nmin and nmax.dkindfnativejreturnTypecintiargumentsÇ£dtypecintdnamednminddeclhint nmin£dtypecintdnamednmaxddeclhint nmaxˇødnamejIsMapValidhdocStartπfdocEndfddocs¢ebriefx&Returns whether a map is valid or not.dtagsÉ¢ctag`dtextx&Returns whether a map is valid or not.¢ctagiparam:mapdtextxLReturns whether a map is valid or not. 
 Map name, excluding .bsp extension.¢ctagfreturndtextxlReturns whether a map is valid or not. 
 Map name, excluding .bsp extension. True if valid, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnamecmapddeclpconst char[] mapˇødnamegFindMaphdocStartïfdocEndªddocs¢ebriefxFReturns whether a full or partial map name is found or can be resolveddtagsÖ¢ctag`dtextxFReturns whether a full or partial map name is found or can be resolved¢ctagiparam:mapdtextxùReturns whether a full or partial map name is found or can be resolved 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension).¢ctagnparam:foundmapdtextyReturns whether a full or partial map name is found or can be resolved 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Resolved map name. If the return is FindMap_FuzzyMatch or FindMap_NonCanonical the buffer will be the full path.¢ctaglparam:maxlendtexty2Returns whether a full or partial map name is found or can be resolved 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Resolved map name. If the return is FindMap_FuzzyMatch or FindMap_NonCanonical the buffer will be the full path. Maximum length to write to map var.¢ctagfreturndtextyÅReturns whether a full or partial map name is found or can be resolved 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Resolved map name. If the return is FindMap_FuzzyMatch or FindMap_NonCanonical the buffer will be the full path. Maximum length to write to map var. Result of the find operation. Not all result types are supported on all games.dkindfnativejreturnTypemFindMapResultiargumentsÉ£dtypelconst char[]dnamecmapddeclpconst char[] map£dtypefchar[]dnamehfoundmapddeclochar[] foundmap£dtypecintdnamefmaxlenddecljint maxlenˇødnameqGetMapDisplayNamehdocStartfdocEnd"öddocs¢ebriefxÅGet the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally.dtagsÖ¢ctag`dtextxÅGet the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally.¢ctagiparam:mapdtextxÿGet the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally. 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension).¢ctagqparam:displayNamedtexty∂Get the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally. 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Map's display name, i.e. cp_mymapname or de_mymapname. If FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound, the map cannot be resolved and this native will return false, but displayName will be a copy of map.¢ctaglparam:maxlendtexty‚Get the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally. 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Map's display name, i.e. cp_mymapname or de_mymapname. If FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound, the map cannot be resolved and this native will return false, but displayName will be a copy of map. Maximum length to write to displayName var.¢ctagfreturndtexty~Get the display name of a workshop map. 
 Note: You do not need to call FindMap first.  This native will call FindMap internally. 
 Map name (usually same as map path relative to maps/ dir, excluding .bsp extension). Map's display name, i.e. cp_mymapname or de_mymapname. If FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound, the map cannot be resolved and this native will return false, but displayName will be a copy of map. Maximum length to write to displayName var. true if FindMap returns FindMap_Found, FindMap_FuzzyMatch, or FindMap_NonCanonical. false if FindMap returns FindMap_PossiblyAvailable or FindMap_NotFound.dkindfnativejreturnTypedbooliargumentsÉ£dtypelconst char[]dnamecmapddeclpconst char[] map£dtypefchar[]dnamekdisplayNameddeclrchar[] displayName£dtypecintdnamefmaxlenddecljint maxlenˇødnameqIsDedicatedServerhdocStart"fdocEnd#fddocs¢ebriefx(Returns whether the server is dedicated.dtagsÇ¢ctag`dtextx(Returns whether the server is dedicated.¢ctagfreturndtextxNReturns whether the server is dedicated. 
 True if dedicated, false otherwise.dkindfnativejreturnTypedbooliargumentsÄˇødnamemGetEngineTimehdocStart#åfdocEnd$ddocs¢ebriefx=Returns a high-precision time value for profiling the engine.dtagsÇ¢ctag`dtextx=Returns a high-precision time value for profiling the engine.¢ctagfreturndtextx\Returns a high-precision time value for profiling the engine. 
 A floating point time value.dkindfnativejreturnTypeefloatiargumentsÄˇødnamekGetGameTimehdocStart$3fdocEnd$öddocs¢ebriefx-Returns the game time based on the game tick.dtagsÇ¢ctag`dtextx-Returns the game time based on the game tick.¢ctagfreturndtextx?Returns the game time based on the game tick. 
 Game tick time.dkindfnativejreturnTypeefloatiargumentsÄˇødnamepGetGameTickCounthdocStart$ªfdocEnd%ddocs¢ebriefx'Returns the game's internal tick count.dtagsÇ¢ctag`dtextx'Returns the game's internal tick count.¢ctagfreturndtextx:Returns the game's internal tick count. 
 Game tick count.dkindfnativejreturnTypecintiargumentsÄˇødnamepGetGameFrameTimehdocStart%AfdocEnd%µddocs¢ebriefx9Returns the time the Game took processing the last frame.dtagsÇ¢ctag`dtextx9Returns the time the Game took processing the last frame.¢ctagfreturndtextxLReturns the time the Game took processing the last frame. 
 Game frame time.dkindfnativejreturnTypeefloatiargumentsÄˇødnamerGetGameDescriptionhdocStart%€fdocEnd'addocs¢ebriefx*Returns the game description from the mod.dtagsÖ¢ctag`dtextx*Returns the game description from the mod.¢ctaglparam:bufferdtextxMReturns the game description from the mod. 
 Buffer to store the description.¢ctagoparam:maxlengthdtextxiReturns the game description from the mod. 
 Buffer to store the description. Maximum size of the buffer.¢ctagnparam:originaldtextx∆Returns the game description from the mod. 
 Buffer to store the description. Maximum size of the buffer. If true, retrieves the original game description, ignoring any potential hooks from plugins.¢ctagfreturndtextx˙Returns the game description from the mod. 
 Buffer to store the description. Maximum size of the buffer. If true, retrieves the original game description, ignoring any potential hooks from plugins. Number of bytes written to the buffer (UTF-8 safe).dkindfnativejreturnTypecintiargumentsÉ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypedbooldnamehoriginalddeclmbool originalˇødnameqGetGameFolderNamehdocStart'∏fdocEnd(±ddocs¢ebriefx)Returns the name of the game's directory.dtagsÑ¢ctag`dtextx)Returns the name of the game's directory.¢ctaglparam:bufferdtextxOReturns the name of the game's directory. 
 Buffer to store the directory name.¢ctagoparam:maxlengthdtextxkReturns the name of the game's directory. 
 Buffer to store the directory name. Maximum size of the buffer.¢ctagfreturndtextxüReturns the name of the game's directory. 
 Buffer to store the directory name. Maximum size of the buffer. Number of bytes written to the buffer (UTF-8 safe).dkindfnativejreturnTypecintiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamemGetCurrentMaphdocStart(ÚfdocEnd)≈ddocs¢ebriefxReturns the current map name.dtagsÑ¢ctag`dtextxReturns the current map name.¢ctaglparam:bufferdtextx9Returns the current map name. 
 Buffer to store map name.¢ctagoparam:maxlengthdtextxSReturns the current map name. 
 Buffer to store map name. Maximum length of buffer.¢ctagfreturndtextxyReturns the current map name. 
 Buffer to store map name. Maximum length of buffer. Number of bytes written (UTF-8 safe).dkindfnativejreturnTypecintiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamemPrecacheModelhdocStart*fdocEnd*ˇddocs¢ebriefxPrecaches a given model.dtagsÑ¢ctag`dtextxPrecaches a given model.¢ctagkparam:modeldtextx9Precaches a given model. 
 Name of the model to precache.¢ctagmparam:preloaddtextx}Precaches a given model. 
 Name of the model to precache. If preload is true the file will be precached before level startup.¢ctagfreturndtextx£Precaches a given model. 
 Name of the model to precache. If preload is true the file will be precached before level startup. Returns the model index, 0 for error.dkindfnativejreturnTypecintiargumentsÇ£dtypelconst char[]dnameemodelddeclrconst char[] model£dtypedbooldnamegpreloadddecllbool preloadˇødnametPrecacheSentenceFilehdocStart+FfdocEnd,Lddocs¢ebriefx Precaches a given sentence file.dtagsÑ¢ctag`dtextx Precaches a given sentence file.¢ctagjparam:filedtextxIPrecaches a given sentence file. 
 Name of the sentence file to precache.¢ctagmparam:preloaddtextxçPrecaches a given sentence file. 
 Name of the sentence file to precache. If preload is true the file will be precached before level startup.¢ctagfreturndtextx¨Precaches a given sentence file. 
 Name of the sentence file to precache. If preload is true the file will be precached before level startup. Returns a sentence file index.dkindfnativejreturnTypecintiargumentsÇ£dtypelconst char[]dnamedfileddeclqconst char[] file£dtypedbooldnamegpreloadddecllbool preloadˇødnamemPrecacheDecalhdocStart,ôfdocEnd-áddocs¢ebriefxPrecaches a given decal.dtagsÑ¢ctag`dtextxPrecaches a given decal.¢ctagkparam:decaldtextx9Precaches a given decal. 
 Name of the decal to precache.¢ctagmparam:preloaddtextx}Precaches a given decal. 
 Name of the decal to precache. If preload is true the file will be precached before level startup.¢ctagfreturndtextxîPrecaches a given decal. 
 Name of the decal to precache. If preload is true the file will be precached before level startup. Returns a decal index.dkindfnativejreturnTypecintiargumentsÇ£dtypelconst char[]dnameedecalddeclrconst char[] decal£dtypedbooldnamegpreloadddecllbool preloadˇødnameoPrecacheGenerichdocStart-ŒfdocEnd.—ddocs¢ebriefxPrecaches a given generic file.dtagsÑ¢ctag`dtextxPrecaches a given generic file.¢ctagmparam:genericdtextxGPrecaches a given generic file. 
 Name of the generic file to precache.¢ctagmparam:preloaddtextxãPrecaches a given generic file. 
 Name of the generic file to precache. If preload is true the file will be precached before level startup.¢ctagfreturndtextx©Precaches a given generic file. 
 Name of the generic file to precache. If preload is true the file will be precached before level startup. Returns a generic file index.dkindfnativejreturnTypecintiargumentsÇ£dtypelconst char[]dnameggenericddecltconst char[] generic£dtypedbooldnamegpreloadddecllbool preloadˇødnamepIsModelPrecachedhdocStart/fdocEnd/≈ddocs¢ebriefx&Returns if a given model is precached.dtagsÉ¢ctag`dtextx&Returns if a given model is precached.¢ctagkparam:modeldtextxDReturns if a given model is precached. 
 Name of the model to check.¢ctagfreturndtextxhReturns if a given model is precached. 
 Name of the model to check. True if precached, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnameemodelddeclrconst char[] modelˇødnamepIsDecalPrecachedhdocStart/¸fdocEnd0•ddocs¢ebriefx&Returns if a given decal is precached.dtagsÉ¢ctag`dtextx&Returns if a given decal is precached.¢ctagkparam:decaldtextxDReturns if a given decal is precached. 
 Name of the decal to check.¢ctagfreturndtextxhReturns if a given decal is precached. 
 Name of the decal to check. True if precached, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnameedecalddeclrconst char[] decalˇødnamerIsGenericPrecachedhdocStart0‹fdocEnd1ìddocs¢ebriefx-Returns if a given generic file is precached.dtagsÉ¢ctag`dtextx-Returns if a given generic file is precached.¢ctagmparam:genericdtextxRReturns if a given generic file is precached. 
 Name of the generic file to check.¢ctagfreturndtextxvReturns if a given generic file is precached. 
 Name of the generic file to check. True if precached, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnameggenericddecltconst char[] genericˇødnamemPrecacheSoundhdocStart1ŒfdocEnd2÷ddocs¢ebriefxPrecaches a given sound.dtagsÑ¢ctag`dtextxPrecaches a given sound.¢ctagkparam:sounddtextx9Precaches a given sound. 
 Name of the sound to precache.¢ctagmparam:preloaddtextx}Precaches a given sound. 
 Name of the sound to precache. If preload is true the file will be precached before level startup.¢ctagfreturndtextxÆPrecaches a given sound. 
 Name of the sound to precache. If preload is true the file will be precached before level startup. True if successfully precached, false otherwise.dkindfnativejreturnTypedbooliargumentsÇ£dtypelconst char[]dnameesoundddeclrconst char[] sound£dtypedbooldnamegpreloadddecllbool preloadˇødnamepIsSoundPrecachedhdocStart3fdocEnd3«ddocs¢ebriefx&Returns if a given sound is precached.dtagsÉ¢ctag`dtextx&Returns if a given sound is precached.¢ctagkparam:sounddtextxDReturns if a given sound is precached. 
 Name of the sound to check.¢ctagfreturndtextxhReturns if a given sound is precached. 
 Name of the sound to check. True if precached, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnameesoundddeclrconst char[] soundˇødnamelCreateDialoghdocStart3˛fdocEnd5cddocs¢ebriefx+Creates different types of ingame messages.dtagsÖ¢ctag`dtextx+Creates different types of ingame messages.¢ctaglparam:clientdtextxBCreates different types of ingame messages. 
 Index of the client.¢ctaghparam:kvdtextx£Creates different types of ingame messages. 
 Index of the client. KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information).¢ctagjparam:typedtextx√Creates different types of ingame messages. 
 Index of the client. KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information). Message type to display ingame.¢ctageerrordtextxÚCreates different types of ingame messages. 
 Index of the client. KeyValues handle to set the menu keys and options. (Check iserverplugin.h for more information). Message type to display ingame. Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypefHandlednamebkvddecliHandle kv£dtypejDialogTypednamedtypeddecloDialogType typeˇødnameoGuessSDKVersionhdocStart fdocEnd ddocsˆdkindfnativejreturnTypecintiargumentsÄˇødnamepGetEngineVersionhdocStart7rfdocEnd8àddocs¢ebriefx Gets the engine version that the currently-loaded SM core was compiled against. 
 The engine version values are not guaranteed to be in any particular order, and should only be compared by (in)equality.dtagsÇ¢ctag`dtextx Gets the engine version that the currently-loaded SM core was compiled against. 
 The engine version values are not guaranteed to be in any particular order, and should only be compared by (in)equality.¢ctagfreturndtextx‰Gets the engine version that the currently-loaded SM core was compiled against. 
 The engine version values are not guaranteed to be in any particular order, and should only be compared by (in)equality. 
 An EngineVersion value.dkindfnativejreturnTypemEngineVersioniargumentsÄˇødnamekPrintToChathdocStart8∂fdocEnd9‡ddocs¢ebriefx7Prints a message to a specific client in the chat area.dtagsÖ¢ctag`dtextx7Prints a message to a specific client in the chat area.¢ctaglparam:clientdtextxGPrints a message to a specific client in the chat area. 
 Client index.¢ctaglparam:formatdtextxYPrints a message to a specific client in the chat area. 
 Client index. Formatting rules.¢ctagiparam:...dtextxPrints a message to a specific client in the chat area. 
 Client index. Formatting rules. Variable number of format parameters.¢ctageerrordtextx∑Prints a message to a specific client in the chat area. 
 Client index. Formatting rules. Variable number of format parameters. If the client is not connected an error will be thrown.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamenPrintToChatAllhdocStart:(fdocEnd:‘ddocs¢ebriefx1Prints a message to all clients in the chat area.dtagsÉ¢ctag`dtextx1Prints a message to all clients in the chat area.¢ctaglparam:formatdtextxEPrints a message to all clients in the chat area. 
 Formatting rules.¢ctagiparam:...dtextxkPrints a message to all clients in the chat area. 
 Formatting rules. Variable number of format parameters.dkindestockjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameoPrintCenterTexthdocStart;fdocEnd=%ddocs¢ebriefxBPrints a message to a specific client in the center of the screen.dtagsÖ¢ctag`dtextxBPrints a message to a specific client in the center of the screen.¢ctaglparam:clientdtextxRPrints a message to a specific client in the center of the screen. 
 Client index.¢ctaglparam:formatdtextxdPrints a message to a specific client in the center of the screen. 
 Client index. Formatting rules.¢ctagiparam:...dtextxäPrints a message to a specific client in the center of the screen. 
 Client index. Formatting rules. Variable number of format parameters.¢ctageerrordtextx¬Prints a message to a specific client in the center of the screen. 
 Client index. Formatting rules. Variable number of format parameters. If the client is not connected an error will be thrown.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamerPrintCenterTextAllhdocStart=qfdocEnd>(ddocs¢ebriefx<Prints a message to all clients in the center of the screen.dtagsÉ¢ctag`dtextx<Prints a message to all clients in the center of the screen.¢ctaglparam:formatdtextxPPrints a message to all clients in the center of the screen. 
 Formatting rules.¢ctagiparam:...dtextxvPrints a message to all clients in the center of the screen. 
 Formatting rules. Variable number of format parameters.dkindestockjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamemPrintHintTexthdocStart?LfdocEnd@uddocs¢ebriefx6Prints a message to a specific client with a hint box.dtagsÖ¢ctag`dtextx6Prints a message to a specific client with a hint box.¢ctaglparam:clientdtextxFPrints a message to a specific client with a hint box. 
 Client index.¢ctaglparam:formatdtextxXPrints a message to a specific client with a hint box. 
 Client index. Formatting rules.¢ctagiparam:...dtextx~Prints a message to a specific client with a hint box. 
 Client index. Formatting rules. Variable number of format parameters.¢ctageerrordtextx∂Prints a message to a specific client with a hint box. 
 Client index. Formatting rules. Variable number of format parameters. If the client is not connected an error will be thrown.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamerPrintHintTextToAllhdocStart@øfdocEndAjddocs¢ebriefx0Prints a message to all clients with a hint box.dtagsÉ¢ctag`dtextx0Prints a message to all clients with a hint box.¢ctaglparam:formatdtextxDPrints a message to all clients with a hint box. 
 Formatting rules.¢ctagiparam:...dtextxjPrints a message to all clients with a hint box. 
 Formatting rules. Variable number of format parameters.dkindestockjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamemShowVGUIPanelhdocStartBåfdocEndD∏ddocs¢ebriefx(Shows a VGUI panel to a specific client.dtagsÜ¢ctag`dtextx(Shows a VGUI panel to a specific client.¢ctaglparam:clientdtextx8Shows a VGUI panel to a specific client. 
 Client index.¢ctagjparam:namedtextxäShows a VGUI panel to a specific client. 
 Client index. Panel type name (Check viewport_panel_names.h to see a list of some panel names).¢ctaghparam:KvdtextxShows a VGUI panel to a specific client. 
 Client index. Panel type name (Check viewport_panel_names.h to see a list of some panel names). KeyValues handle with all the data for the panel setup (Depends on the panel type and may be unused).¢ctagjparam:showdtexty6Shows a VGUI panel to a specific client. 
 Client index. Panel type name (Check viewport_panel_names.h to see a list of some panel names). KeyValues handle with all the data for the panel setup (Depends on the panel type and may be unused). True to show the panel, or false to remove it from the client screen.¢ctageerrordtextynShows a VGUI panel to a specific client. 
 Client index. Panel type name (Check viewport_panel_names.h to see a list of some panel names). KeyValues handle with all the data for the panel setup (Depends on the panel type and may be unused). True to show the panel, or false to remove it from the client screen. If the client is not connected an error will be thrown.dkindfnativejreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamednameddeclqconst char[] name£dtypefHandlednamebKvddecliHandle Kv£dtypedbooldnamedshowddeclibool showˇødnameuCreateHudSynchronizerhdocStartE!fdocEndK÷ddocs¢ebriefyICreates a HUD synchronization object.  This object is used to automatically assign and re-use channels for a set of messages. 
 The HUD has a hardcoded number of channels (usually 6) for displaying text.  You can use any channel for any area of the screen.  Text on different channels can overlap, but text on the same channel will erase the old text first.  This overlapping and overwriting gets problematic. 
 A HUD synchronization object automatically selects channels for you based on the following heuristics: - If channel X was last used by the object, and hasn't been modified again, channel X gets re-used. - Otherwise, a new channel is chosen based on the least-recently-used channel. 
 This ensures that if you display text on a sync object, that the previous text displayed on it will always be cleared first.  This is because your new text will either overwrite the old text on the same channel, or because another channel has already erased your text. 
 Note that messages can still overlap if they are on different synchronization objects, or they are displayed to manual channels. 
 These are particularly useful for displaying repeating or refreshing HUD text, in addition to displaying multiple message sets in one area of the screen (for example, center-say messages that may pop up randomly that you don't want to overlap each other).dtagsÇ¢ctag`dtextyICreates a HUD synchronization object.  This object is used to automatically assign and re-use channels for a set of messages. 
 The HUD has a hardcoded number of channels (usually 6) for displaying text.  You can use any channel for any area of the screen.  Text on different channels can overlap, but text on the same channel will erase the old text first.  This overlapping and overwriting gets problematic. 
 A HUD synchronization object automatically selects channels for you based on the following heuristics: - If channel X was last used by the object, and hasn't been modified again, channel X gets re-used. - Otherwise, a new channel is chosen based on the least-recently-used channel. 
 This ensures that if you display text on a sync object, that the previous text displayed on it will always be cleared first.  This is because your new text will either overwrite the old text on the same channel, or because another channel has already erased your text. 
 Note that messages can still overlap if they are on different synchronization objects, or they are displayed to manual channels. 
 These are particularly useful for displaying repeating or refreshing HUD text, in addition to displaying multiple message sets in one area of the screen (for example, center-say messages that may pop up randomly that you don't want to overlap each other).¢ctagfreturndtexty„Creates a HUD synchronization object.  This object is used to automatically assign and re-use channels for a set of messages. 
 The HUD has a hardcoded number of channels (usually 6) for displaying text.  You can use any channel for any area of the screen.  Text on different channels can overlap, but text on the same channel will erase the old text first.  This overlapping and overwriting gets problematic. 
 A HUD synchronization object automatically selects channels for you based on the following heuristics: - If channel X was last used by the object, and hasn't been modified again, channel X gets re-used. - Otherwise, a new channel is chosen based on the least-recently-used channel. 
 This ensures that if you display text on a sync object, that the previous text displayed on it will always be cleared first.  This is because your new text will either overwrite the old text on the same channel, or because another channel has already erased your text. 
 Note that messages can still overlap if they are on different synchronization objects, or they are displayed to manual channels. 
 These are particularly useful for displaying repeating or refreshing HUD text, in addition to displaying multiple message sets in one area of the screen (for example, center-say messages that may pop up randomly that you don't want to overlap each other). 
 New HUD synchronization object. The Handle can be closed with CloseHandle(). If HUD text is not supported on this mod, then INVALID_HANDLE is returned.dkindfnativejreturnTypefHandleiargumentsÄˇødnamepSetHudTextParamshdocStartLfdocEndP≠ddocs¢ebriefy≠Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw.dtagså¢ctag`dtexty≠Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw.¢ctaggparam:xdtextyﬂSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center.¢ctaggparam:ydtextySets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center.¢ctagnparam:holdTimedtexty3Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text.¢ctaggparam:rdtextyDSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value.¢ctaggparam:gdtextyWSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value.¢ctaggparam:bdtextyiSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value.¢ctaggparam:adtextyÉSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value. Alpha transparency value.¢ctaglparam:effectdtextyœSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value. Alpha transparency value. 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?].¢ctaglparam:fxTimedtexty	Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value. Alpha transparency value. 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects).¢ctaglparam:fadeIndtexty/Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value. Alpha transparency value. 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects). Number of seconds to spend fading in.¢ctagmparam:fadeOutdtextyVSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParamsEx modify them. 
 You must call this function before drawing text.  If you are drawing text to multiple clients, you can set the parameters once, since they won't be modified.  However, as soon as you pass control back to other plugins, you must reset the parameters next time you draw. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. Red color value. Green color value. Blue color value. Alpha transparency value. 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects). Number of seconds to spend fading in. Number of seconds to spend fading out.dkindfnativejreturnTypedvoidiargumentsã£dtypeefloatdnameaxddeclgfloat x£dtypeefloatdnameayddeclgfloat y£dtypeefloatdnamehholdTimeddeclnfloat holdTime£dtypecintdnamearddecleint r£dtypecintdnameagddecleint g£dtypecintdnameabddecleint b£dtypecintdnameaaddecleint a£dtypecintdnamefeffectddecljint effect£dtypeefloatdnameffxTimeddecllfloat fxTime£dtypeefloatdnameffadeInddecllfloat fadeIn£dtypeefloatdnamegfadeOutddeclmfloat fadeOutˇødnamerSetHudTextParamsExhdocStartQ\fdocEndU[ddocs¢ebriefySets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it.dtagsä¢ctag`dtextySets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it.¢ctaggparam:xdtexty@Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center.¢ctaggparam:ydtextypSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center.¢ctagnparam:holdTimedtextyîSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text.¢ctaglparam:color1dtexty“Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha]¢ctaglparam:color2dtextySets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha] Second color set, array values being [red, green, blue, alpha]¢ctaglparam:effectdtexty]Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha] Second color set, array values being [red, green, blue, alpha] 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?].¢ctaglparam:fxTimedtextyóSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha] Second color set, array values being [red, green, blue, alpha] 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects).¢ctaglparam:fadeIndtextyΩSets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha] Second color set, array values being [red, green, blue, alpha] 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects). Number of seconds to spend fading in.¢ctagmparam:fadeOutdtexty‰Sets the HUD parameters for drawing text.  These parameters are stored globally, although nothing other than this function and SetHudTextParams modify them. 
 This is the same as SetHudTextParams(), except it lets you set the alternate color for when effects require it. 
 x coordinate, from 0 to 1.  -1.0 is the center. y coordinate, from 0 to 1.  -1.0 is the center. Number of seconds to hold the text. First color set, array values being [red, green, blue, alpha] Second color set, array values being [red, green, blue, alpha] 0/1 causes the text to fade in and fade out. 2 causes the text to flash[?]. Duration of chosen effect (may not apply to all effects). Number of seconds to spend fading in. Number of seconds to spend fading out.dkindfnativejreturnTypedvoidiargumentsâ£dtypeefloatdnameaxddeclgfloat x£dtypeefloatdnameayddeclgfloat y£dtypeefloatdnamehholdTimeddeclnfloat holdTime£dtypefint[4]dnamefcolor1ddeclmint color1[4]£dtypefint[4]dnamefcolor2ddeclmint color2[4]£dtypecintdnamefeffectddecljint effect£dtypeefloatdnameffxTimeddecllfloat fxTime£dtypeefloatdnameffadeInddecllfloat fadeIn£dtypeefloatdnamegfadeOutddeclmfloat fadeOutˇødnameoShowSyncHudTexthdocStartV)fdocEndXmddocs¢ebriefxuShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text.dtagsá¢ctag`dtextxuShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text.¢ctaglparam:clientdtextxúShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to.¢ctagjparam:syncdtextx¥Shows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. Synchronization object.¢ctagmparam:messagedtextx÷Shows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. Synchronization object. Message text or formatting rules.¢ctagiparam:...dtextxıShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. Synchronization object. Message text or formatting rules. Message formatting parameters.¢ctagfreturndtextyRShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. Synchronization object. Message text or formatting rules. Message formatting parameters. -1 on failure, anything else on success. This function fails if the mod does not support it.¢ctageerrordtextyÄShows a synchronized HUD message to a client. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. Synchronization object. Message text or formatting rules. Message formatting parameters. -1 on failure, anything else on success. This function fails if the mod does not support it. Client not in-game, or sync object not valid.dkindfnativejreturnTypecintiargumentsÑ£dtypecintdnamefclientddecljint client£dtypefHandlednamedsyncddeclkHandle sync£dtypelconst char[]dnamegmessageddecltconst char[] message£dtypefany...dnamec...ddecljany... ...ˇødnamelClearSyncHudhdocStartX∆fdocEnd[Gddocs¢ebriefyúClears the text on a synchronized HUD channel. 
 This is not the same as sending "" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario: 
 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3. 
 If you were to simply send "" on your synchronized message, then someone else's text could be overwritten.dtagsÑ¢ctag`dtextyúClears the text on a synchronized HUD channel. 
 This is not the same as sending "" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario: 
 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3. 
 If you were to simply send "" on your synchronized message, then someone else's text could be overwritten.¢ctaglparam:clientdtexty√Clears the text on a synchronized HUD channel. 
 This is not the same as sending "" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario: 
 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3. 
 If you were to simply send "" on your synchronized message, then someone else's text could be overwritten. 
 Client index to send the message to.¢ctagjparam:syncdtexty€Clears the text on a synchronized HUD channel. 
 This is not the same as sending "" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario: 
 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3. 
 If you were to simply send "" on your synchronized message, then someone else's text could be overwritten. 
 Client index to send the message to. Synchronization object.¢ctageerrordtexty	Clears the text on a synchronized HUD channel. 
 This is not the same as sending "" because it guarantees that it won't overwrite text on another channel.  For example, consider the scenario: 
 1. Your synchronized message goes to channel 3. 2. Someone else's non-synchronized message goes to channel 3. 
 If you were to simply send "" on your synchronized message, then someone else's text could be overwritten. 
 Client index to send the message to. Synchronization object. Client not in-game, or sync object not valid.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypefHandlednamedsyncddeclkHandle syncˇødnamekShowHudTexthdocStart[fdocEnd^‡ddocs¢ebriefx}Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text.dtagsÜ¢ctag`dtextx}Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text.¢ctaglparam:clientdtextx§Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to.¢ctagmparam:channeldtextyÑShows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. A channel number. If -1, then a channel will automatically be selected based on the least-recently-used channel.  If the channel is any other number, it will be modulo'd with the channel count to get a final channel number.¢ctagmparam:messagedtexty¶Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. A channel number. If -1, then a channel will automatically be selected based on the least-recently-used channel.  If the channel is any other number, it will be modulo'd with the channel count to get a final channel number. Message text or formatting rules.¢ctagiparam:...dtexty≈Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. A channel number. If -1, then a channel will automatically be selected based on the least-recently-used channel.  If the channel is any other number, it will be modulo'd with the channel count to get a final channel number. Message text or formatting rules. Message formatting parameters.¢ctagfreturndtexty9Shows a HUD message to a client on the given channel. 
 As of this writing, only TF, HL2MP, and SourceForts support HUD Text. 
 Client index to send the message to. A channel number. If -1, then a channel will automatically be selected based on the least-recently-used channel.  If the channel is any other number, it will be modulo'd with the channel count to get a final channel number. Message text or formatting rules. Message formatting parameters. -1 on failure (lack of mod support). Any other return value is the channel number that was used to render the text.dkindfnativejreturnTypecintiargumentsÑ£dtypecintdnamefclientddecljint client£dtypecintdnamegchannelddeclkint channel£dtypelconst char[]dnamegmessageddecltconst char[] message£dtypefany...dnamec...ddecljany... ...ˇødnamemShowMOTDPanelhdocStart_5fdocEndaZddocs¢ebriefx(Shows a MOTD panel to a specific client.dtagsÜ¢ctag`dtextx(Shows a MOTD panel to a specific client.¢ctaglparam:clientdtextx8Shows a MOTD panel to a specific client. 
 Client index.¢ctagkparam:titledtextxvShows a MOTD panel to a specific client. 
 Client index. Title of the panel (printed on the top border of the window).¢ctagiparam:msgdtextyShows a MOTD panel to a specific client. 
 Client index. Title of the panel (printed on the top border of the window). Contents of the panel, it can be treated as an url, filename or plain text depending on the type parameter (WARNING: msg has to be 192 bytes maximum!)¢ctagjparam:typedtextyHShows a MOTD panel to a specific client. 
 Client index. Title of the panel (printed on the top border of the window). Contents of the panel, it can be treated as an url, filename or plain text depending on the type parameter (WARNING: msg has to be 192 bytes maximum!) Determines the way to treat the message body of the panel.¢ctageerrordtextyÄShows a MOTD panel to a specific client. 
 Client index. Title of the panel (printed on the top border of the window). Contents of the panel, it can be treated as an url, filename or plain text depending on the type parameter (WARNING: msg has to be 192 bytes maximum!) Determines the way to treat the message body of the panel. If the client is not connected an error will be thrown.dkindestockjreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnameetitleddeclrconst char[] title£dtypelconst char[]dnamecmsgddeclpconst char[] msg£dtypecintdnamedtypeddeclhint typeˇødnametDisplayAskConnectBoxhdocStartb∫fdocEnddddocs¢ebriefx@Displays a panel asking the client to connect to a specified IP.dtagsÖ¢ctag`dtextx@Displays a panel asking the client to connect to a specified IP.¢ctaglparam:clientdtextxPDisplays a panel asking the client to connect to a specified IP. 
 Client index.¢ctagjparam:timedtextxÉDisplays a panel asking the client to connect to a specified IP. 
 Client index. Duration to hold the panel on the client's screen.¢ctaghparam:ipdtextxìDisplays a panel asking the client to connect to a specified IP. 
 Client index. Duration to hold the panel on the client's screen. Destination IP.¢ctagnparam:passworddtextx„Displays a panel asking the client to connect to a specified IP. 
 Client index. Duration to hold the panel on the client's screen. Destination IP. Password to connect to the destination IP. The client will be able to see this.dkindestockjreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypeefloatdnamedtimeddecljfloat time£dtypelconst char[]dnamebipddecloconst char[] ip£dtypelconst char[]dnamehpasswordddecluconst char[] passwordˇødnamepEntIndexToEntRefhdocStarteãfdocEndf.ddocs¢ebriefx@Converts an entity index into a serial encoded entity reference.dtagsÉ¢ctag`dtextx@Converts an entity index into a serial encoded entity reference.¢ctaglparam:entitydtextxPConverts an entity index into a serial encoded entity reference. 
 Entity index.¢ctagfreturndtextxbConverts an entity index into a serial encoded entity reference. 
 Entity index. Entity reference.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefentityddecljint entityˇødnamepEntRefToEntIndexhdocStartf\fdocEndfÎddocs¢ebriefx,Retrieves the entity index from a reference.dtagsÉ¢ctag`dtextx,Retrieves the entity index from a reference.¢ctagiparam:refdtextx@Retrieves the entity index from a reference. 
 Entity reference.¢ctagfreturndtextxNRetrieves the entity index from a reference. 
 Entity reference. Entity index.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamecrefddeclgint refˇødnamepMakeCompatEntRefhdocStartgfdocEndg∑ddocs¢ebriefx9Converts a reference into a backwards compatible version.dtagsÉ¢ctag`dtextx9Converts a reference into a backwards compatible version.¢ctagiparam:refdtextxMConverts a reference into a backwards compatible version. 
 Entity reference.¢ctagfreturndtextx`Converts a reference into a backwards compatible version. 
 Entity reference. Bcompat reference.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamecrefddeclgint refˇødnameqGetClientsInRangehdocStarth3fdocEndi–ddocs¢ebriefx9Find clients that are potentially in range of a position.dtagsÜ¢ctag`dtextx9Find clients that are potentially in range of a position.¢ctaglparam:origindtextxaFind clients that are potentially in range of a position. 
 Coordinates from which to test range.¢ctagoparam:rangeTypedtextxäFind clients that are potentially in range of a position. 
 Coordinates from which to test range. Range type to use for filtering clients.¢ctagmparam:clientsdtextxøFind clients that are potentially in range of a position. 
 Coordinates from which to test range. Range type to use for filtering clients. Array to which found client indexes will be written.¢ctagjparam:sizedtextxﬁFind clients that are potentially in range of a position. 
 Coordinates from which to test range. Range type to use for filtering clients. Array to which found client indexes will be written. Maximum size of clients array.¢ctagfreturndtextyFind clients that are potentially in range of a position. 
 Coordinates from which to test range. Range type to use for filtering clients. Array to which found client indexes will be written. Maximum size of clients array. Number of client indexes written to clients array.dkindfnativejreturnTypecintiargumentsÑ£dtypenconst float[3]dnameforiginddecluconst float origin[3]£dtypeoClientRangeTypednameirangeTypeddeclxClientRangeType rangeType£dtypeeint[]dnamegclientsddeclmint[] clients£dtypecintdnamedsizeddeclhint sizeˇødnameoGetServerAuthIdhdocStartj>fdocEndlCddocs¢ebriefxôRetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.)dtagsÖ¢ctag`dtextxôRetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.)¢ctagnparam:authTypedtextxÛRetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.) 
 Auth id type and format to use. (Only AuthId_Steam3 and AuthId_SteamID64 are supported)¢ctagjparam:authdtextyRetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.) 
 Auth id type and format to use. (Only AuthId_Steam3 and AuthId_SteamID64 are supported) Buffer to store the server's auth id.¢ctaglparam:maxlendtextyURetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.) 
 Auth id type and format to use. (Only AuthId_Steam3 and AuthId_SteamID64 are supported) Buffer to store the server's auth id. Maximum length of string buffer (includes NULL terminator).¢ctageerrordtextyoRetrieves the server's authentication string (SteamID). 
 Note: If called before server is connected to Steam, auth id will be invalid ([I:0:1], 1, etc.) 
 Auth id type and format to use. (Only AuthId_Steam3 and AuthId_SteamID64 are supported) Buffer to store the server's auth id. Maximum length of string buffer (includes NULL terminator). Invalid AuthIdType given.dkindfnativejreturnTypedvoidiargumentsÉ£dtypejAuthIdTypednamehauthTypeddeclsAuthIdType authType£dtypefchar[]dnamedauthddeclkchar[] auth£dtypecintdnamefmaxlenddecljint maxlenˇødnamewGetServerSteamAccountIdhdocStartlìfdocEndmddocs¢ebriefx&Returns the server's Steam account ID.dtagsÇ¢ctag`dtextx&Returns the server's Steam account ID.¢ctagfreturndtextxPReturns the server's Steam account ID. 
 Steam account ID or 0 if not available.dkindfnativejreturnTypecintiargumentsÄˇjmethodmapsÄiconstantsÄeenumsÑødnamejDialogTypehdocStart fdocEnd ddocsˆgentriesÖødnamenDialogType_MsghdocStart∫fdocEnd€ddocsˆˇødnameoDialogType_MenuhdocStartˆfdocEndddocsˆˇødnameoDialogType_TexthdocStart(fdocEndAddocsˆˇødnamepDialogType_EntryhdocStart\fdocEndpddocsˆˇødnameuDialogType_AskConnecthdocStartãfdocEndæddocsˆˇˇødnamemEngineVersionhdocStart fdocEnd ddocsˆgentriesòødnamenEngine_UnknownhdocStart˙fdocEnd(ddocsˆˇødnameoEngine_OriginalhdocStartGfdocEndxddocsˆˇødnametEngine_SourceSDK2006hdocStartófdocEnd…ddocsˆˇødnametEngine_SourceSDK2007hdocStartËfdocEndddocsˆˇødnamepEngine_Left4DeadhdocStart9fdocEndLddocsˆˇødnamerEngine_DarkMessiahhdocStartkfdocEnd¶ddocsˆˇødnameqEngine_Left4Dead2hdocStart≈fdocEnd⁄ddocsˆˇødnameqEngine_AlienSwarmhdocStart˘fdocEnd"ddocsˆˇødnameuEngine_BloodyGoodTimehdocStartAfdocEndYddocsˆˇødnamejEngine_EYEhdocStartxfdocEndóddocsˆˇødnamenEngine_Portal2hdocStart∂fdocEnd∆ddocsˆˇødnamekEngine_CSGOhdocStartÂfdocEndddocsˆˇødnamejEngine_CSShdocStart,fdocEndJddocsˆˇødnamekEngine_DOTAhdocStartifdocEndwddocsˆˇødnamelEngine_HL2DMhdocStartñfdocEnd¥ddocsˆˇødnamekEngine_DODShdocStart”fdocEndddocsˆˇødnamejEngine_TF2hdocStartfdocEnd&ddocsˆˇødnamerEngine_NuclearDawnhdocStartEfdocEndYddocsˆˇødnamenEngine_SDK2013hdocStartxfdocEndèddocsˆˇødnamelEngine_BladehdocStartÆfdocEndƒddocsˆˇødnameqEngine_InsurgencyhdocStart„fdocEnd
ddocsˆˇødnamepEngine_ContagionhdocStart)fdocEnd:ddocsˆˇødnamepEngine_BlackMesahdocStartYfdocEndwddocsˆˇødnamejEngine_DOIhdocStartñfdocEnd´ddocsˆˇˇødnamemFindMapResulthdocStart fdocEnd ddocsˆgentriesÖødnamemFindMap_FoundhdocStartÀfdocEndÙddocsˆˇødnamepFindMap_NotFoundhdocStartfdocEnd5ddocsˆˇødnamerFindMap_FuzzyMatchhdocStartLfdocEndddocsˆˇødnametFindMap_NonCanonicalhdocStart,fdocEndﬁddocsˆˇødnamexFindMap_PossiblyAvailablehdocStart˘fdocEndôddocsˆˇˇødnameoClientRangeTypehdocStart fdocEnd ddocsˆgentriesÇødnametRangeType_VisibilityhdocStart fdocEnd ddocsˆˇødnametRangeType_AudibilityhdocStart fdocEnd ddocsˆˇˇhtypesetsÄhtypedefsÄ