{"functions":[{"name":"ServerCommand","docStart":6577,"docEnd":6771,"docs":{"brief":"Executes a server command as if it were on the server console (or RCON)","tags":[{"tag":"","text":"Executes a server command as if it were on the server console (or RCON)"},{"tag":"param:format","text":"Executes a server command as if it were on the server console (or RCON) \n Formatting rules."},{"tag":"param:...","text":"Executes a server command as if it were on the server console (or RCON) \n Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ServerCommandEx","docStart":6833,"docEnd":7422,"docs":{"brief":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console.","tags":[{"tag":"","text":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console."},{"tag":"param:buffer","text":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. \n String to store command result into."},{"tag":"param:maxlen","text":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. \n String to store command result into. Length of buffer."},{"tag":"param:format","text":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. \n String to store command result into. Length of buffer. Formatting rules."},{"tag":"param:...","text":"Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. \n Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. \n String to store command result into. Length of buffer. Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"InsertServerCommand","docStart":7513,"docEnd":7707,"docs":{"brief":"Inserts a server command at the beginning of the server command buffer.","tags":[{"tag":"","text":"Inserts a server command at the beginning of the server command buffer."},{"tag":"param:format","text":"Inserts a server command at the beginning of the server command buffer. \n Formatting rules."},{"tag":"param:...","text":"Inserts a server command at the beginning of the server command buffer. \n Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ServerExecute","docStart":7775,"docEnd":7870,"docs":{"brief":"Executes every command in the server's command buffer, rather than once per frame.","tags":[{"tag":"","text":"Executes every command in the server's command buffer, rather than once per frame."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"ClientCommand","docStart":7904,"docEnd":8263,"docs":{"brief":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0.","tags":[{"tag":"","text":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0."},{"tag":"param:client","text":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. \n Index of the client."},{"tag":"param:fmt","text":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. \n Index of the client. Format of the client command."},{"tag":"param:...","text":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. \n Index of the client. Format of the client command. Format parameters"},{"tag":"error","text":"Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. \n Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"fmt","decl":"const char[] fmt"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"FakeClientCommand","docStart":8334,"docEnd":8979,"docs":{"brief":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead.","tags":[{"tag":"","text":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead."},{"tag":"param:client","text":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead. \n Index of the client."},{"tag":"param:fmt","text":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead. \n Index of the client. Format of the client command."},{"tag":"param:...","text":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead. \n Index of the client. Format of the client command. Format parameters"},{"tag":"error","text":"Executes a client command on the server without being networked. \n FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a \"say\" hook), you should use FakeClientCommandEx() instead. \n Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"fmt","decl":"const char[] fmt"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"FakeClientCommandEx","docStart":9054,"docEnd":9501,"docs":{"brief":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand().","tags":[{"tag":"","text":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand()."},{"tag":"param:client","text":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). \n Index of the client."},{"tag":"param:fmt","text":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). \n Index of the client. Format of the client command."},{"tag":"param:...","text":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). \n Index of the client. Format of the client command. Format parameters"},{"tag":"error","text":"Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). \n Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"fmt","decl":"const char[] fmt"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"FakeClientCommandKeyValues","docStart":9578,"docEnd":9893,"docs":{"brief":"Executes a KeyValues client command on the server without being networked.","tags":[{"tag":"","text":"Executes a KeyValues client command on the server without being networked."},{"tag":"param:client","text":"Executes a KeyValues client command on the server without being networked. \n Index of the client."},{"tag":"param:kv","text":"Executes a KeyValues client command on the server without being networked. \n Index of the client. KeyValues data to be sent."},{"tag":"error","text":"Executes a KeyValues client command on the server without being networked. \n Index of the client. KeyValues data to be sent. Invalid client index, client not connected, or unsupported on current game."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"KeyValues","name":"kv","decl":"KeyValues kv"}]},{"name":"PrintToServer","docStart":9964,"docEnd":10125,"docs":{"brief":"Sends a message to the server console.","tags":[{"tag":"","text":"Sends a message to the server console."},{"tag":"param:format","text":"Sends a message to the server console. \n Formatting rules."},{"tag":"param:...","text":"Sends a message to the server console. \n Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"PrintToConsole","docStart":10187,"docEnd":10468,"docs":{"brief":"Sends a message to a client's console.","tags":[{"tag":"","text":"Sends a message to a client's console."},{"tag":"param:client","text":"Sends a message to a client's console. \n Client index."},{"tag":"param:format","text":"Sends a message to a client's console. \n Client index. Formatting rules."},{"tag":"param:...","text":"Sends a message to a client's console. \n Client index. Formatting rules. Variable number of format parameters."},{"tag":"error","text":"Sends a message to a client's console. \n Client index. Formatting rules. Variable number of format parameters. If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"PrintToConsoleAll","docStart":10545,"docEnd":10710,"docs":{"brief":"Sends a message to every client's console.","tags":[{"tag":"","text":"Sends a message to every client's console."},{"tag":"param:format","text":"Sends a message to every client's console. \n Formatting rules."},{"tag":"param:...","text":"Sends a message to every client's console. \n Formatting rules. Variable number of format parameters."}]},"kind":"stock","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ReplyToCommand","docStart":11001,"docEnd":11460,"docs":{"brief":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used.","tags":[{"tag":"","text":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used."},{"tag":"param:client","text":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. \n Client index, or 0 for server."},{"tag":"param:format","text":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. \n Client index, or 0 for server. Formatting rules."},{"tag":"param:...","text":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. \n Client index, or 0 for server. Formatting rules. Variable number of format parameters."},{"tag":"error","text":"Replies to a message in a command. \n A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. \n Client index, or 0 for server. Formatting rules. Variable number of format parameters. If the client is not connected or invalid."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"GetCmdReplySource","docStart":11535,"docEnd":11642,"docs":{"brief":"Returns the current reply source of a command.","tags":[{"tag":"","text":"Returns the current reply source of a command."},{"tag":"return","text":"Returns the current reply source of a command. \n ReplySource value."}]},"kind":"native","returnType":"ReplySource","arguments":[]},{"name":"SetCmdReplySource","docStart":11687,"docEnd":11966,"docs":{"brief":"Sets the current reply source of a command. \n Only use this if you know what you are doing.  You should save the old value and restore it once you are done.","tags":[{"tag":"","text":"Sets the current reply source of a command. \n Only use this if you know what you are doing.  You should save the old value and restore it once you are done."},{"tag":"param:source","text":"Sets the current reply source of a command. \n Only use this if you know what you are doing.  You should save the old value and restore it once you are done. \n New ReplySource value."},{"tag":"return","text":"Sets the current reply source of a command. \n Only use this if you know what you are doing.  You should save the old value and restore it once you are done. \n New ReplySource value. Old ReplySource value."}]},"kind":"native","returnType":"ReplySource","arguments":[{"type":"ReplySource","name":"source","decl":"ReplySource source"}]},{"name":"IsChatTrigger","docStart":12029,"docEnd":12238,"docs":{"brief":"Returns whether the current say hook is a chat trigger. \n This function is only meaningful inside say or say_team hooks.","tags":[{"tag":"","text":"Returns whether the current say hook is a chat trigger. \n This function is only meaningful inside say or say_team hooks."},{"tag":"return","text":"Returns whether the current say hook is a chat trigger. \n This function is only meaningful inside say or say_team hooks. \n True if a chat trigger, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"ShowActivity2","docStart":12272,"docEnd":12791,"docs":{"brief":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource.","tags":[{"tag":"","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource."},{"tag":"param:client","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. \n Client index doing the action, or 0 for server."},{"tag":"param:tag","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. \n Client index doing the action, or 0 for server. Tag to prepend to the message."},{"tag":"param:format","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. \n Client index doing the action, or 0 for server. Tag to prepend to the message. Formatting rules."},{"tag":"param:...","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. \n Client index doing the action, or 0 for server. Tag to prepend to the message. Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"tag","decl":"const char[] tag"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ShowActivity","docStart":12883,"docEnd":13452,"docs":{"brief":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. \n This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful.","tags":[{"tag":"","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. \n This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful."},{"tag":"param:client","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. \n This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. \n Client index doing the action, or 0 for server."},{"tag":"param:format","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. \n This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. \n Client index doing the action, or 0 for server. Formatting rules."},{"tag":"param:...","text":"Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. \n This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. \n Client index doing the action, or 0 for server. Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ShowActivityEx","docStart":13525,"docEnd":13898,"docs":{"brief":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing).","tags":[{"tag":"","text":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing)."},{"tag":"param:client","text":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing). \n Client index doing the action, or 0 for server."},{"tag":"param:tag","text":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing). \n Client index doing the action, or 0 for server. Tag to display with."},{"tag":"param:format","text":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing). \n Client index doing the action, or 0 for server. Tag to display with. Formatting rules."},{"tag":"param:...","text":"Same as ShowActivity(), except the tag parameter is used instead of \"[SM] \" (note that you must supply any spacing). \n Client index doing the action, or 0 for server. Tag to display with. Formatting rules. Variable number of format parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"tag","decl":"const char[] tag"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"FormatActivitySource","docStart":13991,"docEnd":14847,"docs":{"brief":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer.","tags":[{"tag":"","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer."},{"tag":"param:client","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console."},{"tag":"param:target","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console. Targeted client."},{"tag":"param:namebuf","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console. Targeted client. Name buffer."},{"tag":"param:maxlength","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer."},{"tag":"return","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer. True if activity should be shown.  False otherwise.  In either case, the name buffer is filled.  The return value can be used to broadcast a \"safe\" name to all players regardless of the sm_show_activity filters."},{"tag":"error","text":"Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. \n For example, \"ADMIN\", \"PLAYER\", or a player's name could be placed in this buffer. \n Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer. True if activity should be shown.  False otherwise.  In either case, the name buffer is filled.  The return value can be used to broadcast a \"safe\" name to all players regardless of the sm_show_activity filters. Invalid client index or client not connected."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"target","decl":"int target"},{"type":"const char[]","name":"namebuf","decl":"const char[] namebuf"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"RegServerCmd","docStart":15282,"docEnd":15788,"docs":{"brief":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive.","tags":[{"tag":"","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive."},{"tag":"param:cmd","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive. \n Name of the command to hook or create."},{"tag":"param:callback","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked."},{"tag":"param:description","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation."},{"tag":"param:flags","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation."},{"tag":"error","text":"Creates a server-only console command, or hooks an already existing one. \n Server commands are case sensitive. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation. Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"SrvCmd","name":"callback","decl":"SrvCmd callback"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"RegConsoleCmd","docStart":16313,"docEnd":17017,"docs":{"brief":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command.","tags":[{"tag":"","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command."},{"tag":"param:cmd","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command. \n Name of the command to hook or create."},{"tag":"param:callback","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked."},{"tag":"param:description","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation."},{"tag":"param:flags","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation."},{"tag":"error","text":"Creates a console command, or hooks an already existing one. \n Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the \"real\" version of the command. \n Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation. Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"ConCmd","name":"callback","decl":"ConCmd callback"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"RegAdminCmd","docStart":17126,"docEnd":18020,"docs":{"brief":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server.","tags":[{"tag":"","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server."},{"tag":"param:cmd","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register."},{"tag":"param:callback","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked."},{"tag":"param:adminflags","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions."},{"tag":"param:description","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help."},{"tag":"param:group","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead."},{"tag":"param:flags","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead. Optional console flags."},{"tag":"error","text":"Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. \n Admin commands are case sensitive from both the client and server. \n String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead. Optional console flags. Command name is the same as an existing convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"ConCmd","name":"callback","decl":"ConCmd callback"},{"type":"int","name":"adminflags","decl":"int adminflags"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"const char[]","name":"group","decl":"const char[] group"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"GetCmdArgs","docStart":18201,"docEnd":18442,"docs":{"brief":"Returns the number of arguments from the current console or server command.","tags":[{"tag":"","text":"Returns the number of arguments from the current console or server command."},{"tag":"note","text":"Returns the number of arguments from the current console or server command. Unlike the HL2 engine call, this does not include the command itself."},{"tag":"return","text":"Returns the number of arguments from the current console or server command. Unlike the HL2 engine call, this does not include the command itself. \n Number of arguments to the current command."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"GetCmdArg","docStart":18472,"docEnd":18885,"docs":{"brief":"Retrieves a command argument given its index, from the current console or server command.","tags":[{"tag":"","text":"Retrieves a command argument given its index, from the current console or server command."},{"tag":"note","text":"Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name."},{"tag":"param:argnum","text":"Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. \n Argument number to retrieve."},{"tag":"param:buffer","text":"Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. \n Argument number to retrieve. Buffer to use for storing the string."},{"tag":"param:maxlength","text":"Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. \n Argument number to retrieve. Buffer to use for storing the string. Maximum length of the buffer."},{"tag":"return","text":"Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. \n Argument number to retrieve. Buffer to use for storing the string. Maximum length of the buffer. Length of string written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"argnum","decl":"int argnum"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetCmdArgString","docStart":18954,"docEnd":19255,"docs":{"brief":"Retrieves the entire command argument string in one lump from the current console or server command.","tags":[{"tag":"","text":"Retrieves the entire command argument string in one lump from the current console or server command."},{"tag":"param:buffer","text":"Retrieves the entire command argument string in one lump from the current console or server command. \n Buffer to use for storing the string."},{"tag":"param:maxlength","text":"Retrieves the entire command argument string in one lump from the current console or server command. \n Buffer to use for storing the string. Maximum length of the buffer."},{"tag":"return","text":"Retrieves the entire command argument string in one lump from the current console or server command. \n Buffer to use for storing the string. Maximum length of the buffer. Length of string written to buffer."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetCommandIterator","docStart":20751,"docEnd":20876,"docs":{"brief":"Gets a command iterator.  Must be freed with CloseHandle().","tags":[{"tag":"","text":"Gets a command iterator.  Must be freed with CloseHandle()."},{"tag":"return","text":"Gets a command iterator.  Must be freed with CloseHandle(). \n A new command iterator."}]},"kind":"native","returnType":"Handle","arguments":[]},{"name":"ReadCommandIterator","docStart":20917,"docEnd":21436,"docs":{"brief":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned.","tags":[{"tag":"","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned."},{"tag":"param:iter","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle."},{"tag":"param:name","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer."},{"tag":"param:nameLen","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer. Name buffer size."},{"tag":"param:eflags","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command."},{"tag":"param:desc","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer."},{"tag":"param:descLen","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer. Command description buffer size."},{"tag":"return","text":"Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. \n Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer. Command description buffer size. True on success, false if there are no more commands."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"iter","decl":"Handle iter"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"nameLen","decl":"int nameLen"},{"type":"int&","name":"eflags","decl":"int& eflags"},{"type":"char[]","name":"desc","decl":"char[] desc"},{"type":"int","name":"descLen","decl":"int descLen"}]},{"name":"CheckCommandAccess","docStart":21609,"docEnd":22540,"docs":{"brief":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.","tags":[{"tag":"","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system."},{"tag":"param:client","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n Client index."},{"tag":"param:command","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n Client index. Command name.  If the command is not found, the default flags are used."},{"tag":"param:flags","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found."},{"tag":"param:override_only","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command."},{"tag":"return","text":"Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command. True if the client has access, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"int","name":"flags","decl":"int flags"},{"type":"bool","name":"override_only","decl":"bool override_only"}]},{"name":"CheckAccess","docStart":22682,"docEnd":23619,"docs":{"brief":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.","tags":[{"tag":"","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system."},{"tag":"param:id","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n AdminId of the admin."},{"tag":"param:command","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n AdminId of the admin. Command name.  If the command is not found, the default flags are used."},{"tag":"param:flags","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found."},{"tag":"param:override_only","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command."},{"tag":"return","text":"Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. \n AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command. True if the admin has access, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"int","name":"flags","decl":"int flags"},{"type":"bool","name":"override_only","decl":"bool override_only"}]},{"name":"GetCommandFlags","docStart":23754,"docEnd":24015,"docs":{"brief":"Returns the bitstring of flags of a command.","tags":[{"tag":"","text":"Returns the bitstring of flags of a command."},{"tag":"param:name","text":"Returns the bitstring of flags of a command. \n Name of the command."},{"tag":"return","text":"Returns the bitstring of flags of a command. \n Name of the command. A bitstring containing the FCVAR_* flags that are enabled or INVALID_FCVAR_FLAGS if command not found."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"SetCommandFlags","docStart":24067,"docEnd":24307,"docs":{"brief":"Sets the bitstring of flags of a command.","tags":[{"tag":"","text":"Sets the bitstring of flags of a command."},{"tag":"param:name","text":"Sets the bitstring of flags of a command. \n Name of the command."},{"tag":"param:flags","text":"Sets the bitstring of flags of a command. \n Name of the command. A bitstring containing the FCVAR_* flags to enable."},{"tag":"return","text":"Sets the bitstring of flags of a command. \n Name of the command. A bitstring containing the FCVAR_* flags to enable. True on success, otherwise false."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"FindFirstConCommand","docStart":24371,"docEnd":25546,"docs":{"brief":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined.","tags":[{"tag":"","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined."},{"tag":"param:buffer","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name."},{"tag":"param:max_size","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer."},{"tag":"param:isCommand","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar."},{"tag":"param:flags","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags."},{"tag":"param:description","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present."},{"tag":"param:descrmax_size","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer."},{"tag":"return","text":"Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. \n Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer. On success, a ConCmdIter Handle is returned, which can be read via FindNextConCommand(), and must be closed via CloseHandle().  Additionally, the output parameters will be filled with information of the first ConCommandBase entry. On failure, INVALID_HANDLE is returned, and the contents of outputs is undefined."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"max_size","decl":"int max_size"},{"type":"bool&","name":"isCommand","decl":"bool& isCommand"},{"type":"int&","name":"flags","decl":"int& flags"},{"type":"char[]","name":"description","decl":"char[] description"},{"type":"int","name":"descrmax_size","decl":"int descrmax_size"}]},{"name":"FindNextConCommand","docStart":25690,"docEnd":26562,"docs":{"brief":"Reads the next entry in a ConCommandBase iterator.","tags":[{"tag":"","text":"Reads the next entry in a ConCommandBase iterator."},{"tag":"param:search","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search."},{"tag":"param:buffer","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name."},{"tag":"param:max_size","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer."},{"tag":"param:isCommand","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar."},{"tag":"param:flags","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags."},{"tag":"param:description","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present."},{"tag":"param:descrmax_size","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer."},{"tag":"return","text":"Reads the next entry in a ConCommandBase iterator. \n ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer. On success, the outputs are filled, the iterator is advanced to the next entry, and true is returned. If no more entries exist, false is returned, and the contents of outputs is undefined."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"search","decl":"Handle search"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"max_size","decl":"int max_size"},{"type":"bool&","name":"isCommand","decl":"bool& isCommand"},{"type":"int&","name":"flags","decl":"int& flags"},{"type":"char[]","name":"description","decl":"char[] description"},{"type":"int","name":"descrmax_size","decl":"int descrmax_size"}]},{"name":"AddServerTag","docStart":26718,"docEnd":27048,"docs":{"brief":"Adds an informational string to the server's public \"tags\". This string should be a short, unique identifier. \n Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master.","tags":[{"tag":"","text":"Adds an informational string to the server's public \"tags\". This string should be a short, unique identifier. \n Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master."},{"tag":"param:tag","text":"Adds an informational string to the server's public \"tags\". This string should be a short, unique identifier. \n Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master. \n Tag string to append."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"tag","decl":"const char[] tag"}]},{"name":"RemoveServerTag","docStart":27097,"docEnd":27214,"docs":{"brief":"Removes a tag previously added by the calling plugin.","tags":[{"tag":"","text":"Removes a tag previously added by the calling plugin."},{"tag":"param:tag","text":"Removes a tag previously added by the calling plugin. \n Tag string to remove."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"tag","decl":"const char[] tag"}]},{"name":"AddCommandListener","docStart":28551,"docEnd":29329,"docs":{"brief":"Adds a callback that will fire when a command is sent to the server. \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. \n To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER.","tags":[{"tag":"","text":"Adds a callback that will fire when a command is sent to the server. \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. \n To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER."},{"tag":"param:callback","text":"Adds a callback that will fire when a command is sent to the server. \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. \n To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. \n Callback."},{"tag":"param:command","text":"Adds a callback that will fire when a command is sent to the server. \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. \n To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. \n Callback. Command, or if not specified, a global listener. The command is case insensitive."},{"tag":"return","text":"Adds a callback that will fire when a command is sent to the server. \n Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. \n To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. \n Callback. Command, or if not specified, a global listener. The command is case insensitive. True if this feature is available on the current game, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"CommandListener","name":"callback","decl":"CommandListener callback"},{"type":"const char[]","name":"command","decl":"const char[] command"}]},{"name":"RemoveCommandListener","docStart":29417,"docEnd":29737,"docs":{"brief":"Removes a previously added command listener, in reverse order of being added.","tags":[{"tag":"","text":"Removes a previously added command listener, in reverse order of being added."},{"tag":"param:callback","text":"Removes a previously added command listener, in reverse order of being added. \n Callback."},{"tag":"param:command","text":"Removes a previously added command listener, in reverse order of being added. \n Callback. Command, or if not specified, a global listener. The command is case insensitive."},{"tag":"error","text":"Removes a previously added command listener, in reverse order of being added. \n Callback. Command, or if not specified, a global listener. The command is case insensitive. Callback has no active listeners."}]},"kind":"native","returnType":"void","arguments":[{"type":"CommandListener","name":"callback","decl":"CommandListener callback"},{"type":"const char[]","name":"command","decl":"const char[] command"}]},{"name":"CommandExists","docStart":29828,"docEnd":29999,"docs":{"brief":"Returns true if the supplied command exists.","tags":[{"tag":"","text":"Returns true if the supplied command exists."},{"tag":"param:command","text":"Returns true if the supplied command exists. \n Command to find."},{"tag":"return","text":"Returns true if the supplied command exists. \n Command to find. True if command is found, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"command","decl":"const char[] command"}]},{"name":"OnClientSayCommand","docStart":30115,"docEnd":30500,"docs":{"brief":"Global listener for the chat commands.","tags":[{"tag":"","text":"Global listener for the chat commands."},{"tag":"param:client","text":"Global listener for the chat commands. \n Client index."},{"tag":"param:command","text":"Global listener for the chat commands. \n Client index. Command name."},{"tag":"param:sArgs","text":"Global listener for the chat commands. \n Client index. Command name. Chat argument string."},{"tag":"return","text":"Global listener for the chat commands. \n Client index. Command name. Chat argument string. \n An Action value. Returning Plugin_Handled bypasses the game function call. Returning Plugin_Stop bypasses the post hook as well as the game function."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"const char[]","name":"sArgs","decl":"const char[] sArgs"}]},{"name":"OnClientSayCommand_Post","docStart":30594,"docEnd":30779,"docs":{"brief":"Global post listener for the chat commands.","tags":[{"tag":"","text":"Global post listener for the chat commands."},{"tag":"param:client","text":"Global post listener for the chat commands. \n Client index."},{"tag":"param:command","text":"Global post listener for the chat commands. \n Client index. Command name."},{"tag":"param:sArgs","text":"Global post listener for the chat commands. \n Client index. Command name. Chat argument string."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"const char[]","name":"sArgs","decl":"const char[] sArgs"}]}],"methodmaps":[{"name":"CommandIterator","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"CommandIterator","docStart":19357,"docEnd":19665,"docs":{"brief":"Creates a new CommandIterator. Must be freed with delete or CloseHandle(). \n The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command.","tags":[{"tag":"","text":"Creates a new CommandIterator. Must be freed with delete or CloseHandle(). \n The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command."},{"tag":"return","text":"Creates a new CommandIterator. Must be freed with delete or CloseHandle(). \n The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command. \n New CommandIterator Handle"}]},"kind":null,"returnType":"CommandIterator","arguments":[]},{"name":"Next","docStart":19705,"docEnd":19871,"docs":{"brief":"Determines if there is a next command. If one is found, the iterator is advanced to it.","tags":[{"tag":"","text":"Determines if there is a next command. If one is found, the iterator is advanced to it."},{"tag":"return","text":"Determines if there is a next command. If one is found, the iterator is advanced to it. \n true if found and iterator is advanced"}]},"kind":null,"returnType":"bool","arguments":[]},{"name":"GetDescription","docStart":19905,"docEnd":20101,"docs":{"brief":"Retrieves the command's description.","tags":[{"tag":"","text":"Retrieves the command's description."},{"tag":"param:buffer","text":"Retrieves the command's description. \n Buffer to copy to."},{"tag":"param:maxlen","text":"Retrieves the command's description. \n Buffer to copy to. Maximum size of the buffer."},{"tag":"error","text":"Retrieves the command's description. \n Buffer to copy to. Maximum size of the buffer. Invalid iterator position"}]},"kind":null,"returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GetName","docStart":20170,"docEnd":20359,"docs":{"brief":"Retrieves the command's name.","tags":[{"tag":"","text":"Retrieves the command's name."},{"tag":"param:buffer","text":"Retrieves the command's name. \n Buffer to copy to."},{"tag":"param:maxlen","text":"Retrieves the command's name. \n Buffer to copy to. Maximum size of the buffer."},{"tag":"error","text":"Retrieves the command's name. \n Buffer to copy to. Maximum size of the buffer. Invalid iterator position"}]},"kind":null,"returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"}]}],"properties":[{"name":"Plugin","docStart":20421,"docEnd":20534,"docs":{"brief":"Retrieves the plugin handle of the command's creator","tags":[{"tag":"","text":"Retrieves the plugin handle of the command's creator"},{"tag":"error","text":"Retrieves the plugin handle of the command's creator \n Invalid iterator position"}]},"type":"Handle","getter":true,"setter":false},{"name":"Flags","docStart":20594,"docEnd":20693,"docs":{"brief":"Retrieves the command's default flags","tags":[{"tag":"","text":"Retrieves the command's default flags"},{"tag":"error","text":"Retrieves the command's default flags \n Invalid iterator position"}]},"type":"int","getter":true,"setter":false}]}],"constants":[],"enums":[{"name":"QueryCookie","docStart":1676,"docEnd":1726,"docs":{"brief":"Console variable query helper values.","tags":[{"tag":"","text":"Console variable query helper values."}]},"entries":[{"name":"QUERYCOOKIE_FAILED","docStart":0,"docEnd":0,"docs":null}]},{"name":"ReplySource","docStart":1780,"docEnd":1820,"docs":{"brief":"Reply sources for commands.","tags":[{"tag":"","text":"Reply sources for commands."}]},"entries":[{"name":"SM_REPLY_TO_CONSOLE","docStart":0,"docEnd":0,"docs":null},{"name":"SM_REPLY_TO_CHAT","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[],"typedefs":[{"name":"SrvCmd","docStart":14947,"docEnd":15232,"docs":{"brief":"Called when a server-only command is invoked.","tags":[{"tag":"","text":"Called when a server-only command is invoked."},{"tag":"param:args","text":"Called when a server-only command is invoked. \n Number of arguments that were in the argument string."},{"tag":"return","text":"Called when a server-only command is invoked. \n Number of arguments that were in the argument string. An Action value.  Not handling the command means that Source will report it as \"not found.\""}]},"type":"function Action(int args)"},{"name":"ConCmd","docStart":15896,"docEnd":16251,"docs":{"brief":"Called when a generic console command is invoked.","tags":[{"tag":"","text":"Called when a generic console command is invoked."},{"tag":"param:client","text":"Called when a generic console command is invoked. \n Index of the client, or 0 from the server."},{"tag":"param:args","text":"Called when a generic console command is invoked. \n Index of the client, or 0 from the server. Number of arguments that were in the argument string."},{"tag":"return","text":"Called when a generic console command is invoked. \n Index of the client, or 0 from the server. Number of arguments that were in the argument string. An Action value.  Not handling the command means that Source will report it as \"not found.\""}]},"type":"function Action(int client, int args)"},{"name":"CommandListener","docStart":27266,"docEnd":28400,"docs":{"brief":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands.","tags":[{"tag":"","text":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands."},{"tag":"param:client","text":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. \n Client, or 0 for server. Client may not be connected or in game."},{"tag":"param:command","text":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. \n Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0."},{"tag":"param:argc","text":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. \n Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0. Argument count."},{"tag":"return","text":"Callback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. \n Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. \n Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. \n -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. \n Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0. Argument count. Action to take (see extended notes above)."}]},"type":"function Action(int client, const char[] command, int argc)"}]}