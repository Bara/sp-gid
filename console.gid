¶ifunctionsò(ødnamemServerCommandhdocStart±fdocEndsddocs¢ebriefxGExecutes a server command as if it were on the server console (or RCON)dtagsÉ¢ctag`dtextxGExecutes a server command as if it were on the server console (or RCON)¢ctaglparam:formatdtextx[Executes a server command as if it were on the server console (or RCON) 
 Formatting rules.¢ctagiparam:...dtextxÅExecutes a server command as if it were on the server console (or RCON) 
 Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameoServerCommandExhdocStart±fdocEnd˛ddocs¢ebriefyRExecutes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console.dtagsÖ¢ctag`dtextyRExecutes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console.¢ctaglparam:bufferdtextyyExecutes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. 
 String to store command result into.¢ctaglparam:maxlendtextyãExecutes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. 
 String to store command result into. Length of buffer.¢ctaglparam:formatdtextyùExecutes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. 
 String to store command result into. Length of buffer. Formatting rules.¢ctagiparam:...dtexty√Executes a server command as if it were on the server console (or RCON) and stores the printed text into buffer. 
 Warning: This calls ServerExecute internally and may have issues if certain commands are in the buffer, only use when you really need the response. Also, on L4D2 this will not print the command output to the server console. 
 String to store command result into. Length of buffer. Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÑ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamefmaxlenddecljint maxlen£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamesInsertServerCommandhdocStartYfdocEndddocs¢ebriefxGInserts a server command at the beginning of the server command buffer.dtagsÉ¢ctag`dtextxGInserts a server command at the beginning of the server command buffer.¢ctaglparam:formatdtextx[Inserts a server command at the beginning of the server command buffer. 
 Formatting rules.¢ctagiparam:...dtextxÅInserts a server command at the beginning of the server command buffer. 
 Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamemServerExecutehdocStart_fdocEndæddocs¢ebriefxRExecutes every command in the server's command buffer, rather than once per frame.dtagsÅ¢ctag`dtextxRExecutes every command in the server's command buffer, rather than once per frame.dkindfnativejreturnTypedvoidiargumentsÄˇødnamemClientCommandhdocStart‡fdocEnd Gddocs¢ebriefxzExecutes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0.dtagsÖ¢ctag`dtextxzExecutes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0.¢ctaglparam:clientdtextxëExecutes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. 
 Index of the client.¢ctagiparam:fmtdtextxØExecutes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. 
 Index of the client. Format of the client command.¢ctagiparam:...dtextx¡Executes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. 
 Index of the client. Format of the client command. Format parameters¢ctageerrordtextxExecutes a client command.  Note that this will not work on clients unless they have cl_restrict_server_commands set to 0. 
 Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnameqFakeClientCommandhdocStart éfdocEnd#ddocs¢ebriefyÇExecutes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead.dtagsÖ¢ctag`dtextyÇExecutes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead.¢ctaglparam:clientdtextyôExecutes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead. 
 Index of the client.¢ctagiparam:fmtdtexty∑Executes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead. 
 Index of the client. Format of the client command.¢ctagiparam:...dtexty…Executes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead. 
 Index of the client. Format of the client command. Format parameters¢ctageerrordtexty¯Executes a client command on the server without being networked. 
 FakeClientCommand() overwrites the command tokenization buffer.  This can cause undesired effects because future calls to GetCmdArg* will return data from the FakeClientCommand(), not the parent command.  If you are in a hook where this matters (for example, a "say" hook), you should use FakeClientCommandEx() instead. 
 Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnamesFakeClientCommandExhdocStart#^fdocEnd%ddocs¢ebriefxÃExecutes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand().dtagsÖ¢ctag`dtextxÃExecutes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand().¢ctaglparam:clientdtextx„Executes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). 
 Index of the client.¢ctagiparam:fmtdtextyExecutes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). 
 Index of the client. Format of the client command.¢ctagiparam:...dtextyExecutes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). 
 Index of the client. Format of the client command. Format parameters¢ctageerrordtextyBExecutes a client command on the server without being networked.  The execution of the client command is delayed by one frame to prevent any re-entrancy issues that might surface with FakeClientCommand(). 
 Index of the client. Format of the client command. Format parameters Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnamexFakeClientCommandKeyValueshdocStart%jfdocEnd&•ddocs¢ebriefxJExecutes a KeyValues client command on the server without being networked.dtagsÑ¢ctag`dtextxJExecutes a KeyValues client command on the server without being networked.¢ctaglparam:clientdtextxaExecutes a KeyValues client command on the server without being networked. 
 Index of the client.¢ctaghparam:kvdtextx|Executes a KeyValues client command on the server without being networked. 
 Index of the client. KeyValues data to be sent.¢ctageerrordtextx»Executes a KeyValues client command on the server without being networked. 
 Index of the client. KeyValues data to be sent. Invalid client index, client not connected, or unsupported on current game.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypeiKeyValuesdnamebkvddecllKeyValues kvˇødnamemPrintToServerhdocStart&ÏfdocEnd'çddocs¢ebriefx&Sends a message to the server console.dtagsÉ¢ctag`dtextx&Sends a message to the server console.¢ctaglparam:formatdtextx:Sends a message to the server console. 
 Formatting rules.¢ctagiparam:...dtextx`Sends a message to the server console. 
 Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamenPrintToConsolehdocStart'ÀfdocEnd(‰ddocs¢ebriefx&Sends a message to a client's console.dtagsÖ¢ctag`dtextx&Sends a message to a client's console.¢ctaglparam:clientdtextx6Sends a message to a client's console. 
 Client index.¢ctaglparam:formatdtextxHSends a message to a client's console. 
 Client index. Formatting rules.¢ctagiparam:...dtextxnSends a message to a client's console. 
 Client index. Formatting rules. Variable number of format parameters.¢ctageerrordtextx¶Sends a message to a client's console. 
 Client index. Formatting rules. Variable number of format parameters. If the client is not connected an error will be thrown.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameqPrintToConsoleAllhdocStart)1fdocEnd)÷ddocs¢ebriefx*Sends a message to every client's console.dtagsÉ¢ctag`dtextx*Sends a message to every client's console.¢ctaglparam:formatdtextx>Sends a message to every client's console. 
 Formatting rules.¢ctagiparam:...dtextxdSends a message to every client's console. 
 Formatting rules. Variable number of format parameters.dkindestockjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamenReplyToCommandhdocStart*˘fdocEnd,ƒddocs¢ebriefx∆Replies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used.dtagsÖ¢ctag`dtextx∆Replies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used.¢ctaglparam:clientdtextxÁReplies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. 
 Client index, or 0 for server.¢ctaglparam:formatdtextx˘Replies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. 
 Client index, or 0 for server. Formatting rules.¢ctagiparam:...dtextyReplies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. 
 Client index, or 0 for server. Formatting rules. Variable number of format parameters.¢ctageerrordtextyJReplies to a message in a command. 
 A client index of 0 will use PrintToServer(). If the command was from the console, PrintToConsole() is used. If the command was from chat, PrintToChat() is used. 
 Client index, or 0 for server. Formatting rules. Variable number of format parameters. If the client is not connected or invalid.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameqGetCmdReplySourcehdocStart-fdocEnd-zddocs¢ebriefx.Returns the current reply source of a command.dtagsÇ¢ctag`dtextx.Returns the current reply source of a command.¢ctagfreturndtextxCReturns the current reply source of a command. 
 ReplySource value.dkindfnativejreturnTypekReplySourceiargumentsÄˇødnameqSetCmdReplySourcehdocStart-ßfdocEnd.æddocs¢ebriefxúSets the current reply source of a command. 
 Only use this if you know what you are doing.  You should save the old value and restore it once you are done.dtagsÉ¢ctag`dtextxúSets the current reply source of a command. 
 Only use this if you know what you are doing.  You should save the old value and restore it once you are done.¢ctaglparam:sourcedtextxµSets the current reply source of a command. 
 Only use this if you know what you are doing.  You should save the old value and restore it once you are done. 
 New ReplySource value.¢ctagfreturndtextxÃSets the current reply source of a command. 
 Only use this if you know what you are doing.  You should save the old value and restore it once you are done. 
 New ReplySource value. Old ReplySource value.dkindfnativejreturnTypekReplySourceiargumentsÅ£dtypekReplySourcednamefsourceddeclrReplySource sourceˇødnamemIsChatTriggerhdocStart.˝fdocEnd/Œddocs¢ebriefxxReturns whether the current say hook is a chat trigger. 
 This function is only meaningful inside say or say_team hooks.dtagsÇ¢ctag`dtextxxReturns whether the current say hook is a chat trigger. 
 This function is only meaningful inside say or say_team hooks.¢ctagfreturndtextx£Returns whether the current say hook is a chat trigger. 
 This function is only meaningful inside say or say_team hooks. 
 True if a chat trigger, false otherwise.dkindfnativejreturnTypedbooliargumentsÄˇødnamemShowActivity2hdocStart/fdocEnd1˜ddocs¢ebriefxÒDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource.dtagsÖ¢ctag`dtextxÒDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource.¢ctaglparam:clientdtexty#Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. 
 Client index doing the action, or 0 for server.¢ctagiparam:tagdtextyBDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. 
 Client index doing the action, or 0 for server. Tag to prepend to the message.¢ctaglparam:formatdtextyTDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. 
 Client index doing the action, or 0 for server. Tag to prepend to the message. Formatting rules.¢ctagiparam:...dtextyzDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar.  All users receive a message in their chat text, except for the originating client, who receives the message based on the current ReplySource. 
 Client index doing the action, or 0 for server. Tag to prepend to the message. Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamectagddeclpconst char[] tag£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamelShowActivityhdocStart2SfdocEnd4åddocs¢ebriefyNDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar. 
 This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful.dtagsÑ¢ctag`dtextyNDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar. 
 This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful.¢ctaglparam:clientdtextyÄDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar. 
 This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. 
 Client index doing the action, or 0 for server.¢ctaglparam:formatdtextyíDisplays usage of an admin command to users depending on the setting of the sm_show_activity cvar. 
 This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. 
 Client index doing the action, or 0 for server. Formatting rules.¢ctagiparam:...dtexty∏Displays usage of an admin command to users depending on the setting of the sm_show_activity cvar. 
 This version does not display a message to the originating client if used from chat triggers or menus.  If manual replies are used for these cases, then this function will suffice.  Otherwise, ShowActivity2() is slightly more useful. 
 Client index doing the action, or 0 for server. Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamenShowActivityExhdocStart4’fdocEnd6Jddocs¢ebriefxtSame as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing).dtagsÖ¢ctag`dtextxtSame as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing).¢ctaglparam:clientdtextx¶Same as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing). 
 Client index doing the action, or 0 for server.¢ctagiparam:tagdtextxªSame as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing). 
 Client index doing the action, or 0 for server. Tag to display with.¢ctaglparam:formatdtextxÕSame as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing). 
 Client index doing the action, or 0 for server. Tag to display with. Formatting rules.¢ctagiparam:...dtextxÛSame as ShowActivity(), except the tag parameter is used instead of "[SM] " (note that you must supply any spacing). 
 Client index doing the action, or 0 for server. Tag to display with. Formatting rules. Variable number of format parameters.dkindfnativejreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamectagddeclpconst char[] tag£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnametFormatActivitySourcehdocStart6ßfdocEnd9ˇddocs¢ebriefxÊGiven an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer.dtagsá¢ctag`dtextxÊGiven an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer.¢ctaglparam:clientdtextyGiven an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console.¢ctaglparam:targetdtexty*Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console. Targeted client.¢ctagmparam:namebufdtexty7Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console. Targeted client. Name buffer.¢ctagoparam:maxlengthdtextyXGiven an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer.¢ctagfreturndtexty,Given an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer. True if activity should be shown.  False otherwise.  In either case, the name buffer is filled.  The return value can be used to broadcast a "safe" name to all players regardless of the sm_show_activity filters.¢ctageerrordtextyZGiven an originating client and a target client, returns the string that describes the originating client according to the sm_show_activity cvar. 
 For example, "ADMIN", "PLAYER", or a player's name could be placed in this buffer. 
 Originating client; may be 0 for server console. Targeted client. Name buffer. Maximum size of the name buffer. True if activity should be shown.  False otherwise.  In either case, the name buffer is filled.  The return value can be used to broadcast a "safe" name to all players regardless of the sm_show_activity filters. Invalid client index or client not connected.dkindfnativejreturnTypedbooliargumentsÑ£dtypecintdnamefclientddecljint client£dtypecintdnameftargetddecljint target£dtypelconst char[]dnamegnamebufddecltconst char[] namebuf£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamelRegServerCmdhdocStart;≤fdocEnd=¨ddocs¢ebriefxnCreates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive.dtagsÜ¢ctag`dtextxnCreates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive.¢ctagiparam:cmddtextxóCreates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive. 
 Name of the command to hook or create.¢ctagnparam:callbackdtextxÿCreates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked.¢ctagqparam:descriptiondtexty
Creates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation.¢ctagkparam:flagsdtexty6Creates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation.¢ctageerrordtextyfCreates a server-only console command, or hooks an already existing one. 
 Server commands are case sensitive. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation. Command name is the same as an existing convar.dkindfnativejreturnTypedvoidiargumentsÑ£dtypelconst char[]dnameccmdddeclpconst char[] cmd£dtypefSrvCmddnamehcallbackddecloSrvCmd callback£dtypelconst char[]dnamekdescriptionddeclxconst char[] description£dtypecintdnameeflagsddecliint flagsˇødnamemRegConsoleCmdhdocStart?πfdocEndByddocs¢ebriefy,Creates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command.dtagsÜ¢ctag`dtexty,Creates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command.¢ctagiparam:cmddtextyUCreates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command. 
 Name of the command to hook or create.¢ctagnparam:callbackdtextyñCreates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked.¢ctagqparam:descriptiondtexty»Creates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation.¢ctagkparam:flagsdtextyÙCreates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation.¢ctageerrordtexty$Creates a console command, or hooks an already existing one. 
 Console commands are case sensitive.  However, if the command already exists in the game, a client may enter the command in any case.  SourceMod corrects for this automatically, and you should only hook the "real" version of the command. 
 Name of the command to hook or create. A function to use as a callback for when the command is invoked. Optional description to use for command creation. Optional flags to use for command creation. Command name is the same as an existing convar.dkindfnativejreturnTypedvoidiargumentsÑ£dtypelconst char[]dnameccmdddeclpconst char[] cmd£dtypefConCmddnamehcallbackddecloConCmd callback£dtypelconst char[]dnamekdescriptionddeclxconst char[] description£dtypecintdnameeflagsddecliint flagsˇødnamekRegAdminCmdhdocStartBÊfdocEndFdddocs¢ebriefy$Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server.dtagsà¢ctag`dtexty$Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server.¢ctagiparam:cmddtextyMCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register.¢ctagnparam:callbackdtextyéCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked.¢ctagpparam:adminflagsdtexty«Creates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions.¢ctagqparam:descriptiondtextyÌCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help.¢ctagkparam:groupdtextyPCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead.¢ctagkparam:flagsdtextyhCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead. Optional console flags.¢ctageerrordtextyòCreates a console command as an administrative command.  If the command does not exist, it is created.  When this command is invoked, the access rights of the player are automatically checked before allowing it to continue. 
 Admin commands are case sensitive from both the client and server. 
 String containing command to register. A function to use as a callback for when the command is invoked. Administrative flags (bitstring) to use for permissions. Optional description to use for help. String containing the command group to use.  If empty, the plugin's filename will be used instead. Optional console flags. Command name is the same as an existing convar.dkindfnativejreturnTypedvoidiargumentsÜ£dtypelconst char[]dnameccmdddeclpconst char[] cmd£dtypefConCmddnamehcallbackddecloConCmd callback£dtypecintdnamejadminflagsddeclnint adminflags£dtypelconst char[]dnamekdescriptionddeclxconst char[] description£dtypelconst char[]dnameegroupddeclrconst char[] group£dtypecintdnameeflagsddecliint flagsˇødnamejGetCmdArgshdocStartGfdocEndH
ddocs¢ebriefxKReturns the number of arguments from the current console or server command.dtagsÉ¢ctag`dtextxKReturns the number of arguments from the current console or server command.¢ctagdnotedtextxëReturns the number of arguments from the current console or server command. Unlike the HL2 engine call, this does not include the command itself.¢ctagfreturndtextxøReturns the number of arguments from the current console or server command. Unlike the HL2 engine call, this does not include the command itself. 
 Number of arguments to the current command.dkindfnativejreturnTypecintiargumentsÄˇødnameiGetCmdArghdocStartH(fdocEndI≈ddocs¢ebriefxYRetrieves a command argument given its index, from the current console or server command.dtagsÜ¢ctag`dtextxYRetrieves a command argument given its index, from the current console or server command.¢ctagdnotedtextxîRetrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name.¢ctaglparam:argnumdtextx≥Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. 
 Argument number to retrieve.¢ctaglparam:bufferdtextxŸRetrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. 
 Argument number to retrieve. Buffer to use for storing the string.¢ctagoparam:maxlengthdtextx˜Retrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. 
 Argument number to retrieve. Buffer to use for storing the string. Maximum length of the buffer.¢ctagfreturndtextyRetrieves a command argument given its index, from the current console or server command. Argument indexes start at 1; 0 retrieves the command name. 
 Argument number to retrieve. Buffer to use for storing the string. Maximum length of the buffer. Length of string written to buffer.dkindfnativejreturnTypecintiargumentsÉ£dtypecintdnamefargnumddecljint argnum£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnameoGetCmdArgStringhdocStartJ
fdocEndK7ddocs¢ebriefxdRetrieves the entire command argument string in one lump from the current console or server command.dtagsÑ¢ctag`dtextxdRetrieves the entire command argument string in one lump from the current console or server command.¢ctaglparam:bufferdtextxåRetrieves the entire command argument string in one lump from the current console or server command. 
 Buffer to use for storing the string.¢ctagoparam:maxlengthdtextx™Retrieves the entire command argument string in one lump from the current console or server command. 
 Buffer to use for storing the string. Maximum length of the buffer.¢ctagfreturndtextxŒRetrieves the entire command argument string in one lump from the current console or server command. 
 Buffer to use for storing the string. Maximum length of the buffer. Length of string written to buffer.dkindfnativejreturnTypecintiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamerGetCommandIteratorhdocStartQfdocEndQåddocs¢ebriefx;Gets a command iterator.  Must be freed with CloseHandle().dtagsÇ¢ctag`dtextx;Gets a command iterator.  Must be freed with CloseHandle().¢ctagfreturndtextxUGets a command iterator.  Must be freed with CloseHandle(). 
 A new command iterator.dkindfnativejreturnTypefHandleiargumentsÄˇødnamesReadCommandIteratorhdocStartQµfdocEndSºddocs¢ebriefxrReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned.dtagsà¢ctag`dtextxrReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned.¢ctagjparam:iterdtextxçReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle.¢ctagjparam:namedtextxöReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer.¢ctagmparam:nameLendtextx¨Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer. Name buffer size.¢ctaglparam:eflagsdtextx“Reads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command.¢ctagjparam:descdtextxÓReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer.¢ctagmparam:descLendtextyReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer. Command description buffer size.¢ctagfreturndtextyEReads a command iterator, then advances to the next command if any. Only SourceMod specific commands are returned. 
 Command iterator Handle. Name buffer. Name buffer size. Effective default flags of a command. Command description buffer. Command description buffer size. True on success, false if there are no more commands.dkindfnativejreturnTypedbooliargumentsÜ£dtypefHandlednamediterddeclkHandle iter£dtypefchar[]dnamednameddeclkchar[] name£dtypecintdnamegnameLenddeclkint nameLen£dtypedint&dnamefeflagsddeclkint& eflags£dtypefchar[]dnameddescddeclkchar[] desc£dtypecintdnamegdescLenddeclkint descLenˇødnamerCheckCommandAccesshdocStartTifdocEndXddocs¢ebriefxÍReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.dtagsÜ¢ctag`dtextxÍReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.¢ctaglparam:clientdtextx˙Returns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 Client index.¢ctagmparam:commanddtextyBReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 Client index. Command name.  If the command is not found, the default flags are used.¢ctagkparam:flagsdtextyåReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found.¢ctagsparam:override_onlydtextyWReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command.¢ctagfreturndtextyáReturns whether a client has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 Client index. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command. True if the client has access, false otherwise.dkindfnativejreturnTypedbooliargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamegcommandddecltconst char[] command£dtypecintdnameeflagsddecliint flags£dtypedbooldnamemoverride_onlyddeclrbool override_onlyˇødnamekCheckAccesshdocStartXöfdocEnd\Cddocs¢ebriefxÍReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.dtagsÜ¢ctag`dtextxÍReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system.¢ctaghparam:iddtextyReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 AdminId of the admin.¢ctagmparam:commanddtextyJReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 AdminId of the admin. Command name.  If the command is not found, the default flags are used.¢ctagkparam:flagsdtextyîReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found.¢ctagsparam:override_onlydtexty_Returns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command.¢ctagfreturndtextyéReturns whether an admin has access to a given command string.  The string can be any override string, as overrides can be independent of commands.  This feature essentially allows you to create custom flags using the override system. 
 AdminId of the admin. Command name.  If the command is not found, the default flags are used. Flag string to use as a default, if the command or override is not found. If true, SourceMod will not attempt to find a matching command, and it will only use the default flags specified. Otherwise, SourceMod will ignore the default flags if there is a matching admin command. True if the admin has access, false otherwise.dkindfnativejreturnTypedbooliargumentsÑ£dtypegAdminIddnamebidddecljAdminId id£dtypelconst char[]dnamegcommandddecltconst char[] command£dtypecintdnameeflagsddecliint flags£dtypedbooldnamemoverride_onlyddeclrbool override_onlyˇødnameoGetCommandFlagshdocStart\ fdocEnd]œddocs¢ebriefx,Returns the bitstring of flags of a command.dtagsÉ¢ctag`dtextx,Returns the bitstring of flags of a command.¢ctagjparam:namedtextxCReturns the bitstring of flags of a command. 
 Name of the command.¢ctagfreturndtextx™Returns the bitstring of flags of a command. 
 Name of the command. A bitstring containing the FCVAR_* flags that are enabled or INVALID_FCVAR_FLAGS if command not found.dkindfnativejreturnTypecintiargumentsÅ£dtypelconst char[]dnamednameddeclqconst char[] nameˇødnameoSetCommandFlagshdocStart^fdocEnd^Ûddocs¢ebriefx)Sets the bitstring of flags of a command.dtagsÑ¢ctag`dtextx)Sets the bitstring of flags of a command.¢ctagjparam:namedtextx@Sets the bitstring of flags of a command. 
 Name of the command.¢ctagkparam:flagsdtextxtSets the bitstring of flags of a command. 
 Name of the command. A bitstring containing the FCVAR_* flags to enable.¢ctagfreturndtextxñSets the bitstring of flags of a command. 
 Name of the command. A bitstring containing the FCVAR_* flags to enable. True on success, otherwise false.dkindfnativejreturnTypedbooliargumentsÇ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypecintdnameeflagsddecliint flagsˇødnamesFindFirstConCommandhdocStart_3fdocEndc ddocs¢ebriefxƒStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined.dtagsà¢ctag`dtextxƒStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined.¢ctaglparam:bufferdtextx‚Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name.¢ctagnparam:max_sizedtextx˛Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer.¢ctagoparam:isCommanddtextyXStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar.¢ctagkparam:flagsdtextywStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags.¢ctagqparam:descriptiondtextyπStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present.¢ctagsparam:descrmax_sizedtexty·Starts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer.¢ctagfreturndtextyStarts a ConCommandBase search, traversing the list of ConVars and ConCommands.  If a Handle is returned, the next entry must be read via FindNextConCommand().  The order of the list is undefined. 
 Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer. On success, a ConCmdIter Handle is returned, which can be read via FindNextConCommand(), and must be closed via CloseHandle().  Additionally, the output parameters will be filled with information of the first ConCommandBase entry. On failure, INVALID_HANDLE is returned, and the contents of outputs is undefined.dkindfnativejreturnTypefHandleiargumentsÜ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamehmax_sizeddecllint max_size£dtypeebool&dnameiisCommandddeclobool& isCommand£dtypedint&dnameeflagsddecljint& flags£dtypefchar[]dnamekdescriptionddeclrchar[] description£dtypecintdnamemdescrmax_sizeddeclqint descrmax_sizeˇødnamerFindNextConCommandhdocStartdZfdocEndg¬ddocs¢ebriefx2Reads the next entry in a ConCommandBase iterator.dtagsâ¢ctag`dtextx2Reads the next entry in a ConCommandBase iterator.¢ctaglparam:searchdtextxQReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search.¢ctaglparam:bufferdtextxmReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name.¢ctagnparam:max_sizedtextxâReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer.¢ctagoparam:isCommanddtextx„Reads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar.¢ctagkparam:flagsdtextyReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags.¢ctagqparam:descriptiondtextyDReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present.¢ctagsparam:descrmax_sizedtextylReads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer.¢ctagfreturndtexty)Reads the next entry in a ConCommandBase iterator. 
 ConCmdIter Handle to search. Buffer to store entry name. Maximum size of the buffer. Variable to store whether the entry is a command. If it is not a command, it is a ConVar. Variable to store entry flags. Buffer to store the description, empty if no description present. Maximum size of the description buffer. On success, the outputs are filled, the iterator is advanced to the next entry, and true is returned. If no more entries exist, false is returned, and the contents of outputs is undefined.dkindfnativejreturnTypedbooliargumentsá£dtypefHandlednamefsearchddeclmHandle search£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamehmax_sizeddecllint max_size£dtypeebool&dnameiisCommandddeclobool& isCommand£dtypedint&dnameeflagsddecljint& flags£dtypefchar[]dnamekdescriptionddeclrchar[] description£dtypecintdnamemdescrmax_sizeddeclqint descrmax_sizeˇødnamelAddServerTaghdocStarth^fdocEndi®ddocs¢ebriefx¸Adds an informational string to the server's public "tags". This string should be a short, unique identifier. 
 Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master.dtagsÇ¢ctag`dtextx¸Adds an informational string to the server's public "tags". This string should be a short, unique identifier. 
 Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master.¢ctagiparam:tagdtextyAdds an informational string to the server's public "tags". This string should be a short, unique identifier. 
 Note: Tags are automatically removed when a plugin unloads. Note: Currently, this function does nothing because of bugs in the Valve master. 
 Tag string to append.dkindfnativejreturnTypedvoidiargumentsÅ£dtypelconst char[]dnamectagddeclpconst char[] tagˇødnameoRemoveServerTaghdocStartiŸfdocEndjNddocs¢ebriefx5Removes a tag previously added by the calling plugin.dtagsÇ¢ctag`dtextx5Removes a tag previously added by the calling plugin.¢ctagiparam:tagdtextxMRemoves a tag previously added by the calling plugin. 
 Tag string to remove.dkindfnativejreturnTypedvoidiargumentsÅ£dtypelconst char[]dnamectagddeclpconst char[] tagˇødnamerAddCommandListenerhdocStartoáfdocEndrëddocs¢ebriefyªAdds a callback that will fire when a command is sent to the server. 
 Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. 
 To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER.dtagsÑ¢ctag`dtextyªAdds a callback that will fire when a command is sent to the server. 
 Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. 
 To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER.¢ctagnparam:callbackdtexty«Adds a callback that will fire when a command is sent to the server. 
 Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. 
 To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. 
 Callback.¢ctagmparam:commanddtextyAdds a callback that will fire when a command is sent to the server. 
 Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. 
 To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. 
 Callback. Command, or if not specified, a global listener. The command is case insensitive.¢ctagfreturndtextyaAdds a callback that will fire when a command is sent to the server. 
 Registering commands is designed to create a new command as part of the UI, whereas this is a lightweight hook on a command string, existing or not. Using Reg*Cmd to intercept is in poor practice, as it physically creates a new command and can slow down dispatch in general. 
 To see if this feature is available, use FeatureType_Capability and FEATURECAP_COMMANDLISTENER. 
 Callback. Command, or if not specified, a global listener. The command is case insensitive. True if this feature is available on the current game, false otherwise.dkindfnativejreturnTypedbooliargumentsÇ£dtypeoCommandListenerdnamehcallbackddeclxCommandListener callback£dtypelconst char[]dnamegcommandddecltconst char[] commandˇødnameuRemoveCommandListenerhdocStartrÈfdocEndt)ddocs¢ebriefxMRemoves a previously added command listener, in reverse order of being added.dtagsÑ¢ctag`dtextxMRemoves a previously added command listener, in reverse order of being added.¢ctagnparam:callbackdtextxYRemoves a previously added command listener, in reverse order of being added. 
 Callback.¢ctagmparam:commanddtextx´Removes a previously added command listener, in reverse order of being added. 
 Callback. Command, or if not specified, a global listener. The command is case insensitive.¢ctageerrordtextxÕRemoves a previously added command listener, in reverse order of being added. 
 Callback. Command, or if not specified, a global listener. The command is case insensitive. Callback has no active listeners.dkindfnativejreturnTypedvoidiargumentsÇ£dtypeoCommandListenerdnamehcallbackddeclxCommandListener callback£dtypelconst char[]dnamegcommandddecltconst char[] commandˇødnamemCommandExistshdocStarttÑfdocEndu/ddocs¢ebriefx,Returns true if the supplied command exists.dtagsÉ¢ctag`dtextx,Returns true if the supplied command exists.¢ctagmparam:commanddtextx?Returns true if the supplied command exists. 
 Command to find.¢ctagfreturndtextxjReturns true if the supplied command exists. 
 Command to find. True if command is found, false otherwise.dkindestockjreturnTypedbooliargumentsÅ£dtypelconst char[]dnamegcommandddecltconst char[] commandˇødnamerOnClientSayCommandhdocStartu£fdocEndw$ddocs¢ebriefx&Global listener for the chat commands.dtagsÖ¢ctag`dtextx&Global listener for the chat commands.¢ctaglparam:clientdtextx6Global listener for the chat commands. 
 Client index.¢ctagmparam:commanddtextxDGlobal listener for the chat commands. 
 Client index. Command name.¢ctagkparam:sArgsdtextxZGlobal listener for the chat commands. 
 Client index. Command name. Chat argument string.¢ctagfreturndtextxÚGlobal listener for the chat commands. 
 Client index. Command name. Chat argument string. 
 An Action value. Returning Plugin_Handled bypasses the game function call. Returning Plugin_Stop bypasses the post hook as well as the game function.dkindgforwardjreturnTypefActioniargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamegcommandddecltconst char[] command£dtypelconst char[]dnameesArgsddeclrconst char[] sArgsˇødnamewOnClientSayCommand_PosthdocStartwÇfdocEndx;ddocs¢ebriefx+Global post listener for the chat commands.dtagsÑ¢ctag`dtextx+Global post listener for the chat commands.¢ctaglparam:clientdtextx;Global post listener for the chat commands. 
 Client index.¢ctagmparam:commanddtextxIGlobal post listener for the chat commands. 
 Client index. Command name.¢ctagkparam:sArgsdtextx_Global post listener for the chat commands. 
 Client index. Command name. Chat argument string.dkindgforwardjreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamegcommandddecltconst char[] command£dtypelconst char[]dnameesArgsddeclrconst char[] sArgsˇjmethodmapsÅødnameoCommandIteratorhdocStart fdocEnd ddocsˆgmethodsÑødnameoCommandIteratorhdocStartKùfdocEndL—ddocs¢ebriefxﬁCreates a new CommandIterator. Must be freed with delete or CloseHandle(). 
 The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command.dtagsÇ¢ctag`dtextxﬁCreates a new CommandIterator. Must be freed with delete or CloseHandle(). 
 The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command.¢ctagfreturndtextx˚Creates a new CommandIterator. Must be freed with delete or CloseHandle(). 
 The CommandIterator can be used to iterate commands created by SourceMod plugins and allows inspection of properties associated with the command. 
 New CommandIterator HandledkindˆjreturnTypeoCommandIteratoriargumentsÄˇødnamedNexthdocStartL˘fdocEndMüddocs¢ebriefxWDetermines if there is a next command. If one is found, the iterator is advanced to it.dtagsÇ¢ctag`dtextxWDetermines if there is a next command. If one is found, the iterator is advanced to it.¢ctagfreturndtextxÄDetermines if there is a next command. If one is found, the iterator is advanced to it. 
 true if found and iterator is advanceddkindˆjreturnTypedbooliargumentsÄˇødnamenGetDescriptionhdocStartM¡fdocEndNÖddocs¢ebriefx$Retrieves the command's description.dtagsÑ¢ctag`dtextx$Retrieves the command's description.¢ctaglparam:bufferdtextx9Retrieves the command's description. 
 Buffer to copy to.¢ctaglparam:maxlendtextxURetrieves the command's description. 
 Buffer to copy to. Maximum size of the buffer.¢ctageerrordtextxoRetrieves the command's description. 
 Buffer to copy to. Maximum size of the buffer. Invalid iterator positiondkindˆjreturnTypedvoidiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamefmaxlenddecljint maxlenˇødnamegGetNamehdocStartN fdocEndOáddocs¢ebriefxRetrieves the command's name.dtagsÑ¢ctag`dtextxRetrieves the command's name.¢ctaglparam:bufferdtextx2Retrieves the command's name. 
 Buffer to copy to.¢ctaglparam:maxlendtextxNRetrieves the command's name. 
 Buffer to copy to. Maximum size of the buffer.¢ctageerrordtextxhRetrieves the command's name. 
 Buffer to copy to. Maximum size of the buffer. Invalid iterator positiondkindˆjreturnTypedvoidiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamefmaxlenddecljint maxlenˇjpropertiesÇødnamefPluginhdocStartO≈fdocEndP6ddocs¢ebriefx4Retrieves the plugin handle of the command's creatordtagsÇ¢ctag`dtextx4Retrieves the plugin handle of the command's creator¢ctageerrordtextxPRetrieves the plugin handle of the command's creator 
 Invalid iterator positiondtypefHandlefgetterıfsetterÙˇødnameeFlagshdocStartPrfdocEndP’ddocs¢ebriefx%Retrieves the command's default flagsdtagsÇ¢ctag`dtextx%Retrieves the command's default flags¢ctageerrordtextxARetrieves the command's default flags 
 Invalid iterator positiondtypecintfgetterıfsetterÙˇˇiconstantsÄeenumsÇødnamekQueryCookiehdocStartåfdocEndæddocs¢ebriefx%Console variable query helper values.dtagsÅ¢ctag`dtextx%Console variable query helper values.gentriesÅødnamerQUERYCOOKIE_FAILEDhdocStart fdocEnd ddocsˆˇˇødnamekReplySourcehdocStartÙfdocEndddocs¢ebriefxReply sources for commands.dtagsÅ¢ctag`dtextxReply sources for commands.gentriesÇødnamesSM_REPLY_TO_CONSOLEhdocStart fdocEnd ddocsˆˇødnamepSM_REPLY_TO_CHAThdocStart fdocEnd ddocsˆˇˇhtypesetsÄhtypedefsÉødnamefSrvCmdhdocStart:cfdocEnd;Äddocs¢ebriefx-Called when a server-only command is invoked.dtagsÉ¢ctag`dtextx-Called when a server-only command is invoked.¢ctagjparam:argsdtextxeCalled when a server-only command is invoked. 
 Number of arguments that were in the argument string.¢ctagfreturndtextx¡Called when a server-only command is invoked. 
 Number of arguments that were in the argument string. An Action value.  Not handling the command means that Source will report it as "not found."dtypexfunction Action(int args)ˇødnamefConCmdhdocStart>fdocEnd?{ddocs¢ebriefx1Called when a generic console command is invoked.dtagsÑ¢ctag`dtextx1Called when a generic console command is invoked.¢ctaglparam:clientdtextx^Called when a generic console command is invoked. 
 Index of the client, or 0 from the server.¢ctagjparam:argsdtextxîCalled when a generic console command is invoked. 
 Index of the client, or 0 from the server. Number of arguments that were in the argument string.¢ctagfreturndtextxCalled when a generic console command is invoked. 
 Index of the client, or 0 from the server. Number of arguments that were in the argument string. An Action value.  Not handling the command means that Source will report it as "not found."dtypex%function Action(int client, int args)ˇødnameoCommandListenerhdocStartjÇfdocEndnddocs¢ebriefyøCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands.dtagsÖ¢ctag`dtextyøCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands.¢ctaglparam:clientdtextyCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. 
 Client, or 0 for server. Client may not be connected or in game.¢ctagmparam:commanddtextyZCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. 
 Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0.¢ctagjparam:argcdtextyjCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. 
 Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0. Argument count.¢ctagfreturndtextyïCallback for command listeners. This is invoked whenever any command reaches the server, from the server console itself or a player. 
 Clients may be in the process of connecting when they are executing commands IsClientConnected(client) is not guaranteed to return true.  Other functions such as GetClientIP() may not work at this point either. 
 Returning Plugin_Handled or Plugin_Stop will prevent the original, baseline code from running. 
 -- TEXT BELOW IS IMPLEMENTATION, AND NOT GUARANTEED -- Even if returning Plugin_Handled or Plugin_Stop, some callbacks will still trigger. These are: * C++ command dispatch hooks from Metamod:Source plugins * Reg*Cmd() hooks that did not create new commands. 
 Client, or 0 for server. Client may not be connected or in game. Command name, lower case. To get name as typed, use GetCmdArg() and specify argument 0. Argument count. Action to take (see extended notes above).dtypex;function Action(int client, const char[] command, int argc)ˇ