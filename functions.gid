{"functions":[{"name":"GetFunctionByName","docStart":9096,"docEnd":9482,"docs":{"brief":"Gets a function id from a function name.","tags":[{"tag":"","text":"Gets a function id from a function name."},{"tag":"param:plugin","text":"Gets a function id from a function name.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to search in the calling plugin."},{"tag":"param:name","text":"Gets a function id from a function name.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to search in the calling plugin.Name of the function."},{"tag":"return","text":"Gets a function id from a function name.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to search in the calling plugin.Name of the function.Function id or INVALID_FUNCTION if not found."},{"tag":"error","text":"Gets a function id from a function name.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to search in the calling plugin.Name of the function.Function id or INVALID_FUNCTION if not found.Invalid or corrupt plugin handle."}]},"kind":"native","returnType":"function","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"CreateGlobalForward","docStart":9556,"docEnd":10177,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward."},{"tag":"param:type","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used."},{"tag":"param:...","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32)."},{"tag":"return","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32).Handle to new global forward."},{"tag":"error","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32).Handle to new global forward.More than 32 paramater types passed."}]},"kind":"native","returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"ExecType","name":"type","decl":"ExecType type"},{"type":"ParamType...","name":"...","decl":"ParamType... ..."}]},{"name":"CreateForward","docStart":10273,"docEnd":10729,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used."},{"tag":"param:...","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32)."},{"tag":"return","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32).Handle to new private forward."},{"tag":"error","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32).Handle to new private forward.More than 32 paramater types passed."}]},"kind":"native","returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type"},{"type":"ParamType...","name":"...","decl":"ParamType... ..."}]},{"name":"GetForwardFunctionCount","docStart":10801,"docEnd":11072,"docs":{"brief":"Returns the number of functions in a global or private forward's call list.","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list."},{"tag":"param:fwd","text":"Returns the number of functions in a global or private forward's call list.\nHandle to global or private forward."},{"tag":"return","text":"Returns the number of functions in a global or private forward's call list.\nHandle to global or private forward.Number of functions in forward."},{"tag":"error","text":"Returns the number of functions in a global or private forward's call list.\nHandle to global or private forward.Number of functions in forward.Invalid or corrupt forward handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd"}]},{"name":"AddToForward","docStart":11125,"docEnd":11684,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call."},{"tag":"param:fwd","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle to private forward."},{"tag":"param:plugin","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward."},{"tag":"return","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward.True on success, false otherwise."},{"tag":"error","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward.True on success, false otherwise.Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd"},{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"function","name":"func","decl":"function func"}]},{"name":"RemoveFromForward","docStart":11757,"docEnd":12397,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Removes a function from a private forward's call list.\nOnly removes one instance."},{"tag":"note","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward."},{"tag":"param:plugin","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward."},{"tag":"return","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward.True on success, false otherwise."},{"tag":"error","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward.True on success, false otherwise.Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd"},{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"function","name":"func","decl":"function func"}]},{"name":"RemoveAllFromForward","docStart":12475,"docEnd":13020,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:fwd","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward."},{"tag":"param:plugin","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin.Number of functions removed from forward."},{"tag":"error","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle to private forward.Handle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin.Number of functions removed from forward.Invalid or corrupt private forward handle or invalid or corrupt plugin handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd"},{"type":"Handle","name":"plugin","decl":"Handle plugin"}]},{"name":"Call_StartForward","docStart":13085,"docEnd":13376,"docs":{"brief":"Starts a call to functions in a forward's call list.","tags":[{"tag":"","text":"Starts a call to functions in a forward's call list."},{"tag":"note","text":"Starts a call to functions in a forward's call list.\nCannot be used during an incomplete call."},{"tag":"param:fwd","text":"Starts a call to functions in a forward's call list.\nCannot be used during an incomplete call.\nHandle to global or private forward."},{"tag":"error","text":"Starts a call to functions in a forward's call list.\nCannot be used during an incomplete call.\nHandle to global or private forward.Invalid or corrupt forward handle or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"fwd","decl":"Handle fwd"}]},{"name":"Call_StartFunction","docStart":13424,"docEnd":13840,"docs":{"brief":"Starts a call to a function.","tags":[{"tag":"","text":"Starts a call to a function."},{"tag":"note","text":"Starts a call to a function.\nCannot be used during an incomplete call."},{"tag":"param:plugin","text":"Starts a call to a function.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Starts a call to a function.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to call."},{"tag":"error","text":"Starts a call to a function.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to call.Invalid or corrupt plugin handle, invalid function, or called before another call has completed."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"function","name":"func","decl":"function func"}]},{"name":"Call_PushCell","docStart":13907,"docEnd":14130,"docs":{"brief":"Pushes a cell onto the current call.","tags":[{"tag":"","text":"Pushes a cell onto the current call."},{"tag":"note","text":"Pushes a cell onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a cell onto the current call.\nCannot be used before a call has been started.\nCell value to push."},{"tag":"error","text":"Pushes a cell onto the current call.\nCannot be used before a call has been started.\nCell value to push.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any","name":"value","decl":"any value"}]},{"name":"Call_PushCellRef","docStart":14173,"docEnd":14413,"docs":{"brief":"Pushes a cell by reference onto the current call.","tags":[{"tag":"","text":"Pushes a cell by reference onto the current call."},{"tag":"note","text":"Pushes a cell by reference onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a cell by reference onto the current call.\nCannot be used before a call has been started.\nCell reference to push."},{"tag":"error","text":"Pushes a cell by reference onto the current call.\nCannot be used before a call has been started.\nCell reference to push.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any&","name":"value","decl":"any& value"}]},{"name":"Call_PushFloat","docStart":14460,"docEnd":14694,"docs":{"brief":"Pushes a float onto the current call.","tags":[{"tag":"","text":"Pushes a float onto the current call."},{"tag":"note","text":"Pushes a float onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a float onto the current call.\nCannot be used before a call has been started.\nFloating point value to push."},{"tag":"error","text":"Pushes a float onto the current call.\nCannot be used before a call has been started.\nFloating point value to push.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"value","decl":"float value"}]},{"name":"Call_PushFloatRef","docStart":14740,"docEnd":14991,"docs":{"brief":"Pushes a float by reference onto the current call.","tags":[{"tag":"","text":"Pushes a float by reference onto the current call."},{"tag":"note","text":"Pushes a float by reference onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a float by reference onto the current call.\nCannot be used before a call has been started.\nFloating point reference to push."},{"tag":"error","text":"Pushes a float by reference onto the current call.\nCannot be used before a call has been started.\nFloating point reference to push.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"float&","name":"value","decl":"float& value"}]},{"name":"Call_PushArray","docStart":15041,"docEnd":15389,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Pushes an array onto the current call.\nChanges to array are not copied back to caller. Use PushArrayEx() to do this."},{"tag":"note","text":"Pushes an array onto the current call.\nChanges to array are not copied back to caller. Use PushArrayEx() to do this.Cannot be used before a call has been started."},{"tag":"param:value","text":"Pushes an array onto the current call.\nChanges to array are not copied back to caller. Use PushArrayEx() to do this.Cannot be used before a call has been started.\nArray to push."},{"tag":"param:size","text":"Pushes an array onto the current call.\nChanges to array are not copied back to caller. Use PushArrayEx() to do this.Cannot be used before a call has been started.\nArray to push.Size of array."},{"tag":"error","text":"Pushes an array onto the current call.\nChanges to array are not copied back to caller. Use PushArrayEx() to do this.Cannot be used before a call has been started.\nArray to push.Size of array.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const any[]","name":"value","decl":"const any[] value"},{"type":"int","name":"size","decl":"int size"}]},{"name":"Call_PushArrayEx","docStart":15451,"docEnd":15864,"docs":{"brief":"Pushes an array onto the current call.","tags":[{"tag":"","text":"Pushes an array onto the current call."},{"tag":"note","text":"Pushes an array onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes an array onto the current call.\nCannot be used before a call has been started.\nArray to push."},{"tag":"param:size","text":"Pushes an array onto the current call.\nCannot be used before a call has been started.\nArray to push.Size of array."},{"tag":"param:cpflags","text":"Pushes an array onto the current call.\nCannot be used before a call has been started.\nArray to push.Size of array.Whether or not changes should be copied back to the input array.See SP_PARAM_* constants for details."},{"tag":"error","text":"Pushes an array onto the current call.\nCannot be used before a call has been started.\nArray to push.Size of array.Whether or not changes should be copied back to the input array.See SP_PARAM_* constants for details.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[]","name":"value","decl":"any[] value"},{"type":"int","name":"size","decl":"int size"},{"type":"int","name":"cpflags","decl":"int cpflags"}]},{"name":"Call_PushNullVector","docStart":15935,"docEnd":16144,"docs":{"brief":"Pushes the NULL_VECTOR onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_VECTOR onto the current call."},{"tag":"see","text":"Pushes the NULL_VECTOR onto the current call.IsNullVector"},{"tag":"note","text":"Pushes the NULL_VECTOR onto the current call.IsNullVector\nCannot be used before a call has been started."},{"tag":"error","text":"Pushes the NULL_VECTOR onto the current call.IsNullVector\nCannot be used before a call has been started.\nCalled before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Call_PushString","docStart":16184,"docEnd":16495,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Pushes a string onto the current call.\nChanges to string are not copied back to caller. Use PushStringEx() to do this."},{"tag":"note","text":"Pushes a string onto the current call.\nChanges to string are not copied back to caller. Use PushStringEx() to do this.Cannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a string onto the current call.\nChanges to string are not copied back to caller. Use PushStringEx() to do this.Cannot be used before a call has been started.\nString to push."},{"tag":"error","text":"Pushes a string onto the current call.\nChanges to string are not copied back to caller. Use PushStringEx() to do this.Cannot be used before a call has been started.\nString to push.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"Call_PushStringEx","docStart":16549,"docEnd":17175,"docs":{"brief":"Pushes a string onto the current call.","tags":[{"tag":"","text":"Pushes a string onto the current call."},{"tag":"note","text":"Pushes a string onto the current call.\nCannot be used before a call has been started."},{"tag":"param:value","text":"Pushes a string onto the current call.\nCannot be used before a call has been started.\nString to push."},{"tag":"param:length","text":"Pushes a string onto the current call.\nCannot be used before a call has been started.\nString to push.Length of string buffer."},{"tag":"param:szflags","text":"Pushes a string onto the current call.\nCannot be used before a call has been started.\nString to push.Length of string buffer.Flags determining how string should be handled.See SM_PARAM_STRING_* constants for details.The default (0) is to push ASCII."},{"tag":"param:cpflags","text":"Pushes a string onto the current call.\nCannot be used before a call has been started.\nString to push.Length of string buffer.Flags determining how string should be handled.See SM_PARAM_STRING_* constants for details.The default (0) is to push ASCII.Whether or not changes should be copied back to the input array.See SM_PARAM_* constants for details."},{"tag":"error","text":"Pushes a string onto the current call.\nCannot be used before a call has been started.\nString to push.Length of string buffer.Flags determining how string should be handled.See SM_PARAM_STRING_* constants for details.The default (0) is to push ASCII.Whether or not changes should be copied back to the input array.See SM_PARAM_* constants for details.Called before a call has been started."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"length","decl":"int length"},{"type":"int","name":"szflags","decl":"int szflags"},{"type":"int","name":"cpflags","decl":"int cpflags"}]},{"name":"Call_PushNullString","docStart":17263,"docEnd":17472,"docs":{"brief":"Pushes the NULL_STRING onto the current call.","tags":[{"tag":"","text":"Pushes the NULL_STRING onto the current call."},{"tag":"see","text":"Pushes the NULL_STRING onto the current call.IsNullString"},{"tag":"note","text":"Pushes the NULL_STRING onto the current call.IsNullString\nCannot be used before a call has been started."},{"tag":"error","text":"Pushes the NULL_STRING onto the current call.IsNullString\nCannot be used before a call has been started.\nCalled before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Call_Finish","docStart":17512,"docEnd":17863,"docs":{"brief":"Completes a call to a function or forward's call list.","tags":[{"tag":"","text":"Completes a call to a function or forward's call list."},{"tag":"note","text":"Completes a call to a function or forward's call list.\nCannot be used before a call has been started."},{"tag":"param:result","text":"Completes a call to a function or forward's call list.\nCannot be used before a call has been started.\nReturn value of function or forward's call list."},{"tag":"return","text":"Completes a call to a function or forward's call list.\nCannot be used before a call has been started.\nReturn value of function or forward's call list.SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Completes a call to a function or forward's call list.\nCannot be used before a call has been started.\nReturn value of function or forward's call list.SP_ERROR_NONE on success, any other integer on failure.Called before a call has been started."}]},"kind":"native","returnType":"int","arguments":[{"type":"any&","name":"result","decl":"any& result"}]},{"name":"Call_Cancel","docStart":17907,"docEnd":18101,"docs":{"brief":"Cancels a call to a function or forward's call list.","tags":[{"tag":"","text":"Cancels a call to a function or forward's call list."},{"tag":"note","text":"Cancels a call to a function or forward's call list.\nCannot be used before a call has been started."},{"tag":"error","text":"Cancels a call to a function or forward's call list.\nCannot be used before a call has been started.\nCalled before a call has been started."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"CreateNative","docStart":18858,"docEnd":19220,"docs":{"brief":"Creates a dynamic native.  This should only be called in AskPluginLoad(), orelse you risk not having your native shared with other plugins.","tags":[{"tag":"","text":"Creates a dynamic native.  This should only be called in AskPluginLoad(), orelse you risk not having your native shared with other plugins."},{"tag":"param:name","text":"Creates a dynamic native.  This should only be called in AskPluginLoad(), orelse you risk not having your native shared with other plugins.\nName of the dynamic native; must be unique amongall other registered dynamic natives."},{"tag":"param:func","text":"Creates a dynamic native.  This should only be called in AskPluginLoad(), orelse you risk not having your native shared with other plugins.\nName of the dynamic native; must be unique amongall other registered dynamic natives.Function to use as the dynamic native."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"NativeCall","name":"func","decl":"NativeCall func"}]},{"name":"ThrowNativeError","docStart":19287,"docEnd":19516,"docs":{"brief":"Throws an error in the calling plugin of a native, instead of your own plugin.","tags":[{"tag":"","text":"Throws an error in the calling plugin of a native, instead of your own plugin."},{"tag":"param:error","text":"Throws an error in the calling plugin of a native, instead of your own plugin.\nError code to use."},{"tag":"param:fmt","text":"Throws an error in the calling plugin of a native, instead of your own plugin.\nError code to use.Error message format."},{"tag":"param:...","text":"Throws an error in the calling plugin of a native, instead of your own plugin.\nError code to use.Error message format.Format arguments."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"error","decl":"int error"},{"type":"const char[]","name":"fmt","decl":"const char[] fmt"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"GetNativeStringLength","docStart":19588,"docEnd":20105,"docs":{"brief":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.","tags":[{"tag":"","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays."},{"tag":"note","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.\nIf this function succeeds, Get/SetNativeString will also succeed."},{"tag":"param:param","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.\nIf this function succeeds, Get/SetNativeString will also succeed.\nParameter number, starting from 1."},{"tag":"param:length","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.\nIf this function succeeds, Get/SetNativeString will also succeed.\nParameter number, starting from 1.Stores the length of the string."},{"tag":"return","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.\nIf this function succeeds, Get/SetNativeString will also succeed.\nParameter number, starting from 1.Stores the length of the string.SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Retrieves the string length from a native parameter string.  This is useful forfetching the entire string using dynamic arrays.\nIf this function succeeds, Get/SetNativeString will also succeed.\nParameter number, starting from 1.Stores the length of the string.SP_ERROR_NONE on success, any other integer on failure.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"int&","name":"length","decl":"int& length"}]},{"name":"GetNativeString","docStart":20168,"docEnd":20698,"docs":{"brief":"Retrieves a string from a native parameter.","tags":[{"tag":"","text":"Retrieves a string from a native parameter."},{"tag":"note","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure."},{"tag":"param:param","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1."},{"tag":"param:buffer","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Buffer to store the string in."},{"tag":"param:maxlength","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Buffer to store the string in.Maximum length of the buffer."},{"tag":"param:bytes","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Buffer to store the string in.Maximum length of the buffer.Optionally store the number of bytes written."},{"tag":"return","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Buffer to store the string in.Maximum length of the buffer.Optionally store the number of bytes written.SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Retrieves a string from a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Buffer to store the string in.Maximum length of the buffer.Optionally store the number of bytes written.SP_ERROR_NONE on success, any other integer on failure.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"},{"type":"int&","name":"bytes","decl":"int& bytes"}]},{"name":"SetNativeString","docStart":20786,"docEnd":21409,"docs":{"brief":"Sets a string in a native parameter.","tags":[{"tag":"","text":"Sets a string in a native parameter."},{"tag":"note","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure."},{"tag":"param:param","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1."},{"tag":"param:source","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use."},{"tag":"param:maxlength","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use.Maximum number of bytes to write."},{"tag":"param:utf8","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use.Maximum number of bytes to write.If false, string will not be writtenwith UTF8 safety."},{"tag":"param:bytes","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use.Maximum number of bytes to write.If false, string will not be writtenwith UTF8 safety.Optionally store the number of bytes written."},{"tag":"return","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use.Maximum number of bytes to write.If false, string will not be writtenwith UTF8 safety.Optionally store the number of bytes written.SP_ERROR_NONE on success, any other integer on failure."},{"tag":"error","text":"Sets a string in a native parameter.\nOutput conditions are undefined on failure.\nParameter number, starting from 1.Source string to use.Maximum number of bytes to write.If false, string will not be writtenwith UTF8 safety.Optionally store the number of bytes written.SP_ERROR_NONE on success, any other integer on failure.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"const char[]","name":"source","decl":"const char[] source"},{"type":"int","name":"maxlength","decl":"int maxlength"},{"type":"bool","name":"utf8","decl":"bool utf8"},{"type":"int&","name":"bytes","decl":"int& bytes"}]},{"name":"GetNativeCell","docStart":21519,"docEnd":21782,"docs":{"brief":"Gets a cell from a native parameter.","tags":[{"tag":"","text":"Gets a cell from a native parameter."},{"tag":"param:param","text":"Gets a cell from a native parameter.\nParameter number, starting from 1."},{"tag":"return","text":"Gets a cell from a native parameter.\nParameter number, starting from 1.Cell value at the parameter number."},{"tag":"error","text":"Gets a cell from a native parameter.\nParameter number, starting from 1.Cell value at the parameter number.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param"}]},{"name":"GetNativeFunction","docStart":21824,"docEnd":22124,"docs":{"brief":"Gets a function pointer from a native parameter.","tags":[{"tag":"","text":"Gets a function pointer from a native parameter."},{"tag":"param:param","text":"Gets a function pointer from a native parameter.\nParameter number, starting from 1."},{"tag":"return","text":"Gets a function pointer from a native parameter.\nParameter number, starting from 1.Function pointer at the given parameter number."},{"tag":"error","text":"Gets a function pointer from a native parameter.\nParameter number, starting from 1.Function pointer at the given parameter number.Invalid parameter number, or calling from a non-native function."}]},"kind":"native","returnType":"function","arguments":[{"type":"int","name":"param","decl":"int param"}]},{"name":"GetNativeCellRef","docStart":22175,"docEnd":22452,"docs":{"brief":"Gets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Gets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Gets a cell from a native parameter, by reference.\nParameter number, starting from 1."},{"tag":"return","text":"Gets a cell from a native parameter, by reference.\nParameter number, starting from 1.Cell value at the parameter number."},{"tag":"error","text":"Gets a cell from a native parameter, by reference.\nParameter number, starting from 1.Cell value at the parameter number.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"any","arguments":[{"type":"int","name":"param","decl":"int param"}]},{"name":"SetNativeCellRef","docStart":22497,"docEnd":22794,"docs":{"brief":"Sets a cell from a native parameter, by reference.","tags":[{"tag":"","text":"Sets a cell from a native parameter, by reference."},{"tag":"param:param","text":"Sets a cell from a native parameter, by reference.\nParameter number, starting from 1."},{"tag":"param:value","text":"Sets a cell from a native parameter, by reference.\nParameter number, starting from 1.Cell value at the parameter number to set by reference."},{"tag":"error","text":"Sets a cell from a native parameter, by reference.\nParameter number, starting from 1.Cell value at the parameter number to set by reference.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"any","name":"value","decl":"any value"}]},{"name":"GetNativeArray","docStart":22851,"docEnd":23259,"docs":{"brief":"Gets an array from a native parameter (always by reference).","tags":[{"tag":"","text":"Gets an array from a native parameter (always by reference)."},{"tag":"param:param","text":"Gets an array from a native parameter (always by reference).\nParameter number, starting from 1."},{"tag":"param:local","text":"Gets an array from a native parameter (always by reference).\nParameter number, starting from 1.Local array to copy into."},{"tag":"param:size","text":"Gets an array from a native parameter (always by reference).\nParameter number, starting from 1.Local array to copy into.Maximum size of local array."},{"tag":"return","text":"Gets an array from a native parameter (always by reference).\nParameter number, starting from 1.Local array to copy into.Maximum size of local array.SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Gets an array from a native parameter (always by reference).\nParameter number, starting from 1.Local array to copy into.Maximum size of local array.SP_ERROR_NONE on success, anything else on failure.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"any[]","name":"local","decl":"any[] local"},{"type":"int","name":"size","decl":"int size"}]},{"name":"SetNativeArray","docStart":23325,"docEnd":23750,"docs":{"brief":"Copies a local array into a native parameter array (always by reference).","tags":[{"tag":"","text":"Copies a local array into a native parameter array (always by reference)."},{"tag":"param:param","text":"Copies a local array into a native parameter array (always by reference).\nParameter number, starting from 1."},{"tag":"param:local","text":"Copies a local array into a native parameter array (always by reference).\nParameter number, starting from 1.Local array to copy from."},{"tag":"param:size","text":"Copies a local array into a native parameter array (always by reference).\nParameter number, starting from 1.Local array to copy from.Size of the local array to copy."},{"tag":"return","text":"Copies a local array into a native parameter array (always by reference).\nParameter number, starting from 1.Local array to copy from.Size of the local array to copy.SP_ERROR_NONE on success, anything else on failure."},{"tag":"error","text":"Copies a local array into a native parameter array (always by reference).\nParameter number, starting from 1.Local array to copy from.Size of the local array to copy.SP_ERROR_NONE on success, anything else on failure.Invalid parameter number or calling from a non-native function."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"param","decl":"int param"},{"type":"const any[]","name":"local","decl":"const any[] local"},{"type":"int","name":"size","decl":"int size"}]},{"name":"IsNativeParamNullVector","docStart":23822,"docEnd":24011,"docs":{"brief":"Check if the native parameter is the NULL_VECTOR.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_VECTOR."},{"tag":"param:param","text":"Check if the native parameter is the NULL_VECTOR.\nParameter number, starting from 1."},{"tag":"return","text":"Check if the native parameter is the NULL_VECTOR.\nParameter number, starting from 1.True if NULL_VECTOR, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param"}]},{"name":"IsNativeParamNullString","docStart":24064,"docEnd":24253,"docs":{"brief":"Check if the native parameter is the NULL_STRING.","tags":[{"tag":"","text":"Check if the native parameter is the NULL_STRING."},{"tag":"param:param","text":"Check if the native parameter is the NULL_STRING.\nParameter number, starting from 1."},{"tag":"return","text":"Check if the native parameter is the NULL_STRING.\nParameter number, starting from 1.True if NULL_STRING, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"param","decl":"int param"}]},{"name":"FormatNativeString","docStart":24306,"docEnd":25143,"docs":{"brief":"Formats a string using parameters from a native.","tags":[{"tag":"","text":"Formats a string using parameters from a native."},{"tag":"note","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1."},{"tag":"note","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined."},{"tag":"param:out_param","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used."},{"tag":"param:fmt_param","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used."},{"tag":"param:vararg_param","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number."},{"tag":"param:out_len","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number.Output string buffer maximum length (always required)."},{"tag":"param:written","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number.Output string buffer maximum length (always required).Optionally stores the number of bytes written."},{"tag":"param:out_string","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number.Output string buffer maximum length (always required).Optionally stores the number of bytes written.Output string buffer to use if out_param is not used."},{"tag":"param:fmt_string","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number.Output string buffer maximum length (always required).Optionally stores the number of bytes written.Output string buffer to use if out_param is not used.Format string to use if fmt_param is not used."},{"tag":"return","text":"Formats a string using parameters from a native.\nAll parameter indexes start at 1.If the input and output buffers overlap, the contentsof the output buffer at the end is undefined.\nOutput parameter number to write to.  If 0, out_string is used.Format parameter number.  If 0, fmt_string is used.First variable parameter number.Output string buffer maximum length (always required).Optionally stores the number of bytes written.Output string buffer to use if out_param is not used.Format string to use if fmt_param is not used.SP_ERROR_NONE on success, anything else on failure."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"out_param","decl":"int out_param"},{"type":"int","name":"fmt_param","decl":"int fmt_param"},{"type":"int","name":"vararg_param","decl":"int vararg_param"},{"type":"int","name":"out_len","decl":"int out_len"},{"type":"int&","name":"written","decl":"int& written"},{"type":"char[]","name":"out_string","decl":"char[] out_string"},{"type":"const char[]","name":"fmt_string","decl":"const char[] fmt_string"}]},{"name":"RequestFrame","docStart":25561,"docEnd":25755,"docs":{"brief":"Creates a single use Next Frame hook.","tags":[{"tag":"","text":"Creates a single use Next Frame hook."},{"tag":"param:Function","text":"Creates a single use Next Frame hook.\nFunction to call on the next frame."},{"tag":"param:data","text":"Creates a single use Next Frame hook.\nFunction to call on the next frame.Value to be passed on the invocation of the Function."}]},"kind":"native","returnType":"void","arguments":[{"type":"RequestFrameCallback","name":"Function","decl":"RequestFrameCallback Function"},{"type":"any","name":"data","decl":"any data"}]}],"methodmaps":[{"name":"GlobalForward","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"GlobalForward","docStart":5871,"docEnd":6513,"docs":{"brief":"Creates a global forward.","tags":[{"tag":"","text":"Creates a global forward."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned."},{"tag":"note","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these."},{"tag":"param:name","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward."},{"tag":"param:type","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used."},{"tag":"param:...","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32)."},{"tag":"return","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32).Handle to new global forward."},{"tag":"error","text":"Creates a global forward.\nThe name used to create the forward is used as its public function in all target plugins.This is ideal for global, static forwards that are never changed.Global forwards cannot be cloned.Use CloseHandle() to destroy these.\nName of public function to use in forward.Execution type to be used.Variable number of parameter types (up to 32).Handle to new global forward.More than 32 paramater types passed"}]},"kind":null,"returnType":"GlobalForward","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"ExecType","name":"type","decl":"ExecType type"},{"type":"ParamType...","name":"...","decl":"ParamType... ..."}]}],"properties":[{"name":"FunctionCount","docStart":6598,"docEnd":6676,"docs":{"brief":"Returns the number of functions in a global or private forward's call list","tags":[{"tag":"","text":"Returns the number of functions in a global or private forward's call list"}]},"type":"int","getter":true,"setter":false}]},{"name":"PrivateForward","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"PrivateForward","docStart":6788,"docEnd":7243,"docs":{"brief":"Creates a private forward.","tags":[{"tag":"","text":"Creates a private forward."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned."},{"tag":"note","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these."},{"tag":"param:type","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used."},{"tag":"param:...","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32)."},{"tag":"return","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32).Handle to new private forward."},{"tag":"error","text":"Creates a private forward.\nNo functions are automatically added. Use AddToForward() to do this.Private forwards can be cloned.Use CloseHandle() to destroy these.\nExecution type to be used.Variable number of parameter types (up to 32).Handle to new private forward.More than 32 paramater types passed"}]},"kind":null,"returnType":"PrivateForward","arguments":[{"type":"ExecType","name":"type","decl":"ExecType type"},{"type":"ParamType...","name":"...","decl":"ParamType... ..."}]},{"name":"AddFunction","docStart":7310,"docEnd":7815,"docs":{"brief":"Adds a function to a private forward's call list.","tags":[{"tag":"","text":"Adds a function to a private forward's call list."},{"tag":"note","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call."},{"tag":"param:plugin","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward."},{"tag":"return","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward.True on success, false otherwise."},{"tag":"error","text":"Adds a function to a private forward's call list.\nCannot be used during an incomplete call.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to add to forward.True on success, false otherwise.Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function"}]},"kind":null,"returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"function","name":"func","decl":"function func"}]},{"name":"RemoveFunction","docStart":7884,"docEnd":8471,"docs":{"brief":"Removes a function from a private forward's call list.","tags":[{"tag":"","text":"Removes a function from a private forward's call list."},{"tag":"note","text":"Removes a function from a private forward's call list.\nOnly removes one instance."},{"tag":"note","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"param:func","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward."},{"tag":"return","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward.True on success, false otherwise."},{"tag":"error","text":"Removes a function from a private forward's call list.\nOnly removes one instance.Functions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin that contains the function.Pass INVALID_HANDLE to specify the calling plugin.Function to remove from forward.True on success, false otherwise.Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function"}]},"kind":null,"returnType":"bool","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"},{"type":"function","name":"func","decl":"function func"}]},{"name":"RemoveAllFunctions","docStart":8543,"docEnd":9033,"docs":{"brief":"Removes all instances of a plugin from a private forward's call list.","tags":[{"tag":"","text":"Removes all instances of a plugin from a private forward's call list."},{"tag":"note","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded."},{"tag":"param:plugin","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin."},{"tag":"return","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin.Number of functions removed from forward."},{"tag":"error","text":"Removes all instances of a plugin from a private forward's call list.\nFunctions will be removed automatically if their parent plugin is unloaded.\nHandle of the plugin to remove instances of.Pass INVALID_HANDLE to specify the calling plugin.Number of functions removed from forward.Invalid or corrupt private forward handle or invalid or corrupt plugin handle"}]},"kind":null,"returnType":"int","arguments":[{"type":"Handle","name":"plugin","decl":"Handle plugin"}]}],"properties":[]}],"constants":[],"enums":[{"name":"ParamType","docStart":1709,"docEnd":1793,"docs":{"brief":"Describes the various ways to pass parameters to functions or forwards.","tags":[{"tag":"","text":"Describes the various ways to pass parameters to functions or forwards."}]},"entries":[{"name":"Param_Any","docStart":1867,"docEnd":1902,"docs":null},{"name":"Param_Cell","docStart":1957,"docEnd":1995,"docs":null},{"name":"Param_Float","docStart":2050,"docEnd":2083,"docs":null},{"name":"Param_String","docStart":2138,"docEnd":2172,"docs":null},{"name":"Param_Array","docStart":2227,"docEnd":2260,"docs":null},{"name":"Param_VarArgs","docStart":2315,"docEnd":2400,"docs":null},{"name":"Param_CellByRef","docStart":2455,"docEnd":2501,"docs":null},{"name":"Param_FloatByRef","docStart":2556,"docEnd":2603,"docs":null}]},{"name":"ExecType","docStart":2611,"docEnd":2680,"docs":{"brief":"Defines how a forward iterates through plugin functions.","tags":[{"tag":"","text":"Defines how a forward iterates through plugin functions."}]},"entries":[{"name":"ET_Ignore","docStart":2721,"docEnd":2763,"docs":null},{"name":"ET_Single","docStart":2786,"docEnd":2838,"docs":null},{"name":"ET_Event","docStart":2861,"docEnd":2961,"docs":null},{"name":"ET_Hook","docStart":2984,"docEnd":3079,"docs":null}]}],"typesets":[{"name":"NativeCall","docStart":0,"docEnd":0,"docs":null,"types":[{"type":"function int(Handle plugin, int numParams)","docStart":18157,"docEnd":18453,"docs":{"brief":"Defines a native function.\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin."},{"tag":"param:numParams","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin.Number of parameters passed to the native."},{"tag":"return","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin.Number of parameters passed to the native.Value for the native call to return."}]}},{"type":"function any(Handle plugin, int numParams)","docStart":18505,"docEnd":18804,"docs":{"brief":"Defines a native function.\nIt is not necessary to validate the parameter count","tags":[{"tag":"","text":"Defines a native function.\nIt is not necessary to validate the parameter count"},{"tag":"param:plugin","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin."},{"tag":"param:numParams","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin.Number of parameters passed to the native."},{"tag":"return","text":"Defines a native function.\nIt is not necessary to validate the parameter count\nHandle of the calling plugin.Number of parameters passed to the native.Value for the native call to return."}]}}]},{"name":"RequestFrameCallback","docStart":25360,"docEnd":25474,"docs":{"brief":"Defines a RequestFrame Callback.","tags":[{"tag":"","text":"Defines a RequestFrame Callback."},{"tag":"param:data","text":"Defines a RequestFrame Callback.\nData passed to the RequestFrame native."}]},"types":[{"type":"function void()","docStart":0,"docEnd":0,"docs":null},{"type":"function void(any data)","docStart":0,"docEnd":0,"docs":null}]}],"typedefs":[]}