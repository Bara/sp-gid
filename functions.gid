¶ifunctionsò$ødnameqGetFunctionByNamehdocStart#àfdocEnd%
ddocs¢ebriefx(Gets a function id from a function name.dtagsÖ¢ctag`dtextx(Gets a function id from a function name.¢ctaglparam:plugindtextxêGets a function id from a function name. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to search in the calling plugin.¢ctagjparam:namedtextx¶Gets a function id from a function name. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to search in the calling plugin. Name of the function.¢ctagfreturndtextx‘Gets a function id from a function name. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to search in the calling plugin. Name of the function. Function id or INVALID_FUNCTION if not found.¢ctageerrordtextxˆGets a function id from a function name. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to search in the calling plugin. Name of the function. Function id or INVALID_FUNCTION if not found. Invalid or corrupt plugin handle.dkindfnativejreturnTypehfunctioniargumentsÇ£dtypefHandlednamefpluginddeclmHandle plugin£dtypelconst char[]dnamednameddeclqconst char[] nameˇødnamesCreateGlobalForwardhdocStart%TfdocEnd'¡ddocs¢ebriefxCreates a global forward.dtagsä¢ctag`dtextxCreates a global forward.¢ctagdnotedtextxuCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins.¢ctagdnotedtextx∑Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed.¢ctagdnotedtextxŸCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned.¢ctagdnotedtextx˝Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these.¢ctagjparam:namedtexty*Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward.¢ctagjparam:typedtextyECreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used.¢ctagiparam:...dtextytCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32).¢ctagfreturndtextyíCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32). Handle to new global forward.¢ctageerrordtexty∑Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32). Handle to new global forward. More than 32 paramater types passed.dkindfnativejreturnTypemGlobalForwardiargumentsÉ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypehExecTypednamedtypeddeclmExecType type£dtypelParamType...dnamec...ddeclpParamType... ...ˇødnamemCreateForwardhdocStart(!fdocEnd)Èddocs¢ebriefxCreates a private forward.dtagsà¢ctag`dtextxCreates a private forward.¢ctagdnotedtextxaCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this.¢ctagdnotedtextxÅCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned.¢ctagdnotedtextx•Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these.¢ctagjparam:typedtextx¬Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used.¢ctagiparam:...dtextxÒCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32).¢ctagfreturndtextyCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32). Handle to new private forward.¢ctageerrordtexty5Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32). Handle to new private forward. More than 32 paramater types passed.dkindfnativejreturnTypenPrivateForwardiargumentsÇ£dtypehExecTypednamedtypeddeclmExecType type£dtypelParamType...dnamec...ddeclpParamType... ...ˇødnamewGetForwardFunctionCounthdocStart*1fdocEnd+@ddocs¢ebriefxKReturns the number of functions in a global or private forward's call list.dtagsÑ¢ctag`dtextxKReturns the number of functions in a global or private forward's call list.¢ctagiparam:fwddtextxrReturns the number of functions in a global or private forward's call list. 
 Handle to global or private forward.¢ctagfreturndtextxíReturns the number of functions in a global or private forward's call list. 
 Handle to global or private forward. Number of functions in forward.¢ctageerrordtextxµReturns the number of functions in a global or private forward's call list. 
 Handle to global or private forward. Number of functions in forward. Invalid or corrupt forward handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamecfwdddecljHandle fwdˇødnamelAddToForwardhdocStart+ufdocEnd-§ddocs¢ebriefx1Adds a function to a private forward's call list.dtagsá¢ctag`dtextx1Adds a function to a private forward's call list.¢ctagdnotedtextx]Adds a function to a private forward's call list. 
 Cannot be used during an incomplete call.¢ctagiparam:fwddtextxzAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to private forward.¢ctaglparam:plugindtextxﬁAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.¢ctagjparam:funcdtextx˙Adds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward.¢ctagfreturndtextyAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward. True on success, false otherwise.¢ctageerrordtexty~Adds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward. True on success, false otherwise. Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamecfwdddecljHandle fwd£dtypefHandlednamefpluginddeclmHandle plugin£dtypehfunctiondnamedfuncddeclmfunction funcˇødnameqRemoveFromForwardhdocStart-ÌfdocEnd0mddocs¢ebriefx6Removes a function from a private forward's call list.dtagsà¢ctag`dtextx6Removes a function from a private forward's call list.¢ctagdnotedtextxSRemoves a function from a private forward's call list. 
 Only removes one instance.¢ctagdnotedtextxüRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded.¢ctagiparam:fwddtextxºRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward.¢ctaglparam:plugindtexty Removes a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.¢ctagjparam:funcdtextyARemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward.¢ctagfreturndtextycRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward. True on success, false otherwise.¢ctageerrordtexty≈Removes a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward. True on success, false otherwise. Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid function.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamecfwdddecljHandle fwd£dtypefHandlednamefpluginddeclmHandle plugin£dtypehfunctiondnamedfuncddeclmfunction funcˇødnametRemoveAllFromForwardhdocStart0ªfdocEnd2‹ddocs¢ebriefxERemoves all instances of a plugin from a private forward's call list.dtagsÜ¢ctag`dtextxERemoves all instances of a plugin from a private forward's call list.¢ctagdnotedtextxìRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded.¢ctagiparam:fwddtextx∞Removes all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward.¢ctaglparam:plugindtextyRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin.¢ctagfreturndtexty:Removes all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin. Number of functions removed from forward.¢ctageerrordtextyâRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle to private forward. Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin. Number of functions removed from forward. Invalid or corrupt private forward handle or invalid or corrupt plugin handle.dkindfnativejreturnTypecintiargumentsÇ£dtypefHandlednamecfwdddecljHandle fwd£dtypefHandlednamefpluginddeclmHandle pluginˇødnameqCall_StartForwardhdocStart3fdocEnd4@ddocs¢ebriefx4Starts a call to functions in a forward's call list.dtagsÑ¢ctag`dtextx4Starts a call to functions in a forward's call list.¢ctagdnotedtextx`Starts a call to functions in a forward's call list. 
 Cannot be used during an incomplete call.¢ctagiparam:fwddtextxáStarts a call to functions in a forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to global or private forward.¢ctageerrordtextx÷Starts a call to functions in a forward's call list. 
 Cannot be used during an incomplete call. 
 Handle to global or private forward. Invalid or corrupt forward handle or called before another call has completed.dkindfnativejreturnTypedvoidiargumentsÅ£dtypefHandlednamecfwdddecljHandle fwdˇødnamerCall_StartFunctionhdocStart4pfdocEnd6ddocs¢ebriefxStarts a call to a function.dtagsÖ¢ctag`dtextxStarts a call to a function.¢ctagdnotedtextxHStarts a call to a function. 
 Cannot be used during an incomplete call.¢ctaglparam:plugindtextxÆStarts a call to a function. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.¢ctagjparam:funcdtextx¿Starts a call to a function. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to call.¢ctageerrordtexty!Starts a call to a function. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to call. Invalid or corrupt plugin handle, invalid function, or called before another call has completed.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednamefpluginddeclmHandle plugin£dtypehfunctiondnamedfuncddeclmfunction funcˇødnamemCall_PushCellhdocStart6SfdocEnd72ddocs¢ebriefx$Pushes a cell onto the current call.dtagsÑ¢ctag`dtextx$Pushes a cell onto the current call.¢ctagdnotedtextxUPushes a cell onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextxkPushes a cell onto the current call. 
 Cannot be used before a call has been started. 
 Cell value to push.¢ctageerrordtextxíPushes a cell onto the current call. 
 Cannot be used before a call has been started. 
 Cell value to push. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÅ£dtypecanydnameevalueddecliany valueˇødnamepCall_PushCellRefhdocStart7]fdocEnd8Mddocs¢ebriefx1Pushes a cell by reference onto the current call.dtagsÑ¢ctag`dtextx1Pushes a cell by reference onto the current call.¢ctagdnotedtextxbPushes a cell by reference onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextx|Pushes a cell by reference onto the current call. 
 Cannot be used before a call has been started. 
 Cell reference to push.¢ctageerrordtextx£Pushes a cell by reference onto the current call. 
 Cannot be used before a call has been started. 
 Cell reference to push. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÅ£dtypedany&dnameevalueddecljany& valueˇødnamenCall_PushFloathdocStart8|fdocEnd9fddocs¢ebriefx%Pushes a float onto the current call.dtagsÑ¢ctag`dtextx%Pushes a float onto the current call.¢ctagdnotedtextxVPushes a float onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextxvPushes a float onto the current call. 
 Cannot be used before a call has been started. 
 Floating point value to push.¢ctageerrordtextxùPushes a float onto the current call. 
 Cannot be used before a call has been started. 
 Floating point value to push. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÅ£dtypeefloatdnameevalueddeclkfloat valueˇødnameqCall_PushFloatRefhdocStart9îfdocEnd:èddocs¢ebriefx2Pushes a float by reference onto the current call.dtagsÑ¢ctag`dtextx2Pushes a float by reference onto the current call.¢ctagdnotedtextxcPushes a float by reference onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextxáPushes a float by reference onto the current call. 
 Cannot be used before a call has been started. 
 Floating point reference to push.¢ctageerrordtextxÆPushes a float by reference onto the current call. 
 Cannot be used before a call has been started. 
 Floating point reference to push. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÅ£dtypeffloat&dnameevalueddecllfloat& valueˇødnamenCall_PushArrayhdocStart:¡fdocEnd<ddocs¢ebriefx&Pushes an array onto the current call.dtagsÜ¢ctag`dtextx&Pushes an array onto the current call.¢ctagdnotedtextxvPushes an array onto the current call. 
 Changes to array are not copied back to caller. Use PushArrayEx() to do this.¢ctagdnotedtextx•Pushes an array onto the current call. 
 Changes to array are not copied back to caller. Use PushArrayEx() to do this. Cannot be used before a call has been started.¢ctagkparam:valuedtextx∂Pushes an array onto the current call. 
 Changes to array are not copied back to caller. Use PushArrayEx() to do this. Cannot be used before a call has been started. 
 Array to push.¢ctagjparam:sizedtextx≈Pushes an array onto the current call. 
 Changes to array are not copied back to caller. Use PushArrayEx() to do this. Cannot be used before a call has been started. 
 Array to push. Size of array.¢ctageerrordtextxÏPushes an array onto the current call. 
 Changes to array are not copied back to caller. Use PushArrayEx() to do this. Cannot be used before a call has been started. 
 Array to push. Size of array. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÇ£dtypekconst any[]dnameevalueddeclqconst any[] value£dtypecintdnamedsizeddeclhint sizeˇødnamepCall_PushArrayExhdocStart<[fdocEnd=¯ddocs¢ebriefx&Pushes an array onto the current call.dtagsÜ¢ctag`dtextx&Pushes an array onto the current call.¢ctagdnotedtextxWPushes an array onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextxhPushes an array onto the current call. 
 Cannot be used before a call has been started. 
 Array to push.¢ctagjparam:sizedtextxwPushes an array onto the current call. 
 Cannot be used before a call has been started. 
 Array to push. Size of array.¢ctagmparam:cpflagsdtextxﬁPushes an array onto the current call. 
 Cannot be used before a call has been started. 
 Array to push. Size of array. Whether or not changes should be copied back to the input array. See SP_PARAM_* constants for details.¢ctageerrordtextyPushes an array onto the current call. 
 Cannot be used before a call has been started. 
 Array to push. Size of array. Whether or not changes should be copied back to the input array. See SP_PARAM_* constants for details. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÉ£dtypeeany[]dnameevalueddeclkany[] value£dtypecintdnamedsizeddeclhint size£dtypecintdnamegcpflagsddeclkint cpflagsˇødnamesCall_PushNullVectorhdocStart>?fdocEnd?ddocs¢ebriefx-Pushes the NULL_VECTOR onto the current call.dtagsÑ¢ctag`dtextx-Pushes the NULL_VECTOR onto the current call.¢ctagcseedtextx:Pushes the NULL_VECTOR onto the current call. IsNullVector¢ctagdnotedtextxkPushes the NULL_VECTOR onto the current call. IsNullVector 
 Cannot be used before a call has been started.¢ctageerrordtextxîPushes the NULL_VECTOR onto the current call. IsNullVector 
 Cannot be used before a call has been started. 
 Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÄˇødnameoCall_PushStringhdocStart?8fdocEnd@oddocs¢ebriefx&Pushes a string onto the current call.dtagsÖ¢ctag`dtextx&Pushes a string onto the current call.¢ctagdnotedtextxxPushes a string onto the current call. 
 Changes to string are not copied back to caller. Use PushStringEx() to do this.¢ctagdnotedtextxßPushes a string onto the current call. 
 Changes to string are not copied back to caller. Use PushStringEx() to do this. Cannot be used before a call has been started.¢ctagkparam:valuedtextxπPushes a string onto the current call. 
 Changes to string are not copied back to caller. Use PushStringEx() to do this. Cannot be used before a call has been started. 
 String to push.¢ctageerrordtextx‡Pushes a string onto the current call. 
 Changes to string are not copied back to caller. Use PushStringEx() to do this. Cannot be used before a call has been started. 
 String to push. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÅ£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnameqCall_PushStringExhdocStart@•fdocEndCddocs¢ebriefx&Pushes a string onto the current call.dtagsá¢ctag`dtextx&Pushes a string onto the current call.¢ctagdnotedtextxWPushes a string onto the current call. 
 Cannot be used before a call has been started.¢ctagkparam:valuedtextxiPushes a string onto the current call. 
 Cannot be used before a call has been started. 
 String to push.¢ctaglparam:lengthdtextxÇPushes a string onto the current call. 
 Cannot be used before a call has been started. 
 String to push. Length of string buffer.¢ctagmparam:szflagsdtextyPushes a string onto the current call. 
 Cannot be used before a call has been started. 
 String to push. Length of string buffer. Flags determining how string should be handled. See SM_PARAM_STRING_* constants for details. The default (0) is to push ASCII.¢ctagmparam:cpflagsdtextyhPushes a string onto the current call. 
 Cannot be used before a call has been started. 
 String to push. Length of string buffer. Flags determining how string should be handled. See SM_PARAM_STRING_* constants for details. The default (0) is to push ASCII. Whether or not changes should be copied back to the input array. See SM_PARAM_* constants for details.¢ctageerrordtextyèPushes a string onto the current call. 
 Cannot be used before a call has been started. 
 String to push. Length of string buffer. Flags determining how string should be handled. See SM_PARAM_STRING_* constants for details. The default (0) is to push ASCII. Whether or not changes should be copied back to the input array. See SM_PARAM_* constants for details. Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÑ£dtypefchar[]dnameevalueddecllchar[] value£dtypecintdnameflengthddecljint length£dtypecintdnamegszflagsddeclkint szflags£dtypecintdnamegcpflagsddeclkint cpflagsˇødnamesCall_PushNullStringhdocStartCofdocEndD@ddocs¢ebriefx-Pushes the NULL_STRING onto the current call.dtagsÑ¢ctag`dtextx-Pushes the NULL_STRING onto the current call.¢ctagcseedtextx:Pushes the NULL_STRING onto the current call. IsNullString¢ctagdnotedtextxkPushes the NULL_STRING onto the current call. IsNullString 
 Cannot be used before a call has been started.¢ctageerrordtextxîPushes the NULL_STRING onto the current call. IsNullString 
 Cannot be used before a call has been started. 
 Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÄˇødnamekCall_FinishhdocStartDhfdocEndE«ddocs¢ebriefx6Completes a call to a function or forward's call list.dtagsÖ¢ctag`dtextx6Completes a call to a function or forward's call list.¢ctagdnotedtextxgCompletes a call to a function or forward's call list. 
 Cannot be used before a call has been started.¢ctaglparam:resultdtextxöCompletes a call to a function or forward's call list. 
 Cannot be used before a call has been started. 
 Return value of function or forward's call list.¢ctagfreturndtextx“Completes a call to a function or forward's call list. 
 Cannot be used before a call has been started. 
 Return value of function or forward's call list. SP_ERROR_NONE on success, any other integer on failure.¢ctageerrordtextx˘Completes a call to a function or forward's call list. 
 Cannot be used before a call has been started. 
 Return value of function or forward's call list. SP_ERROR_NONE on success, any other integer on failure. Called before a call has been started.dkindfnativejreturnTypecintiargumentsÅ£dtypedany&dnamefresultddeclkany& resultˇødnamekCall_CancelhdocStartEÛfdocEndFµddocs¢ebriefx4Cancels a call to a function or forward's call list.dtagsÉ¢ctag`dtextx4Cancels a call to a function or forward's call list.¢ctagdnotedtextxeCancels a call to a function or forward's call list. 
 Cannot be used before a call has been started.¢ctageerrordtextxéCancels a call to a function or forward's call list. 
 Cannot be used before a call has been started. 
 Called before a call has been started.dkindfnativejreturnTypedvoidiargumentsÄˇødnamelCreateNativehdocStartI™fdocEndKddocs¢ebriefxåCreates a dynamic native.  This should only be called in AskPluginLoad(), or else you risk not having your native shared with other plugins.dtagsÉ¢ctag`dtextxåCreates a dynamic native.  This should only be called in AskPluginLoad(), or else you risk not having your native shared with other plugins.¢ctagjparam:namedtextxÂCreates a dynamic native.  This should only be called in AskPluginLoad(), or else you risk not having your native shared with other plugins. 
 Name of the dynamic native; must be unique among all other registered dynamic natives.¢ctagjparam:funcdtextyCreates a dynamic native.  This should only be called in AskPluginLoad(), or else you risk not having your native shared with other plugins. 
 Name of the dynamic native; must be unique among all other registered dynamic natives. Function to use as the dynamic native.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypejNativeCalldnamedfuncddecloNativeCall funcˇødnamepThrowNativeErrorhdocStartKWfdocEndL<ddocs¢ebriefxNThrows an error in the calling plugin of a native, instead of your own plugin.dtagsÑ¢ctag`dtextxNThrows an error in the calling plugin of a native, instead of your own plugin.¢ctagkparam:errordtextxcThrows an error in the calling plugin of a native, instead of your own plugin. 
 Error code to use.¢ctagiparam:fmtdtextxyThrows an error in the calling plugin of a native, instead of your own plugin. 
 Error code to use. Error message format.¢ctagiparam:...dtextxãThrows an error in the calling plugin of a native, instead of your own plugin. 
 Error code to use. Error message format. Format arguments.dkindfnativejreturnTypecintiargumentsÉ£dtypecintdnameeerrorddecliint error£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnameuGetNativeStringLengthhdocStartLÑfdocEndNâddocs¢ebriefxÄRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays.dtagsÜ¢ctag`dtextxÄRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays.¢ctagdnotedtextxƒRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays. 
 If this function succeeds, Get/SetNativeString will also succeed.¢ctagkparam:paramdtextxÈRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays. 
 If this function succeeds, Get/SetNativeString will also succeed. 
 Parameter number, starting from 1.¢ctaglparam:lengthdtexty
Retrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays. 
 If this function succeeds, Get/SetNativeString will also succeed. 
 Parameter number, starting from 1. Stores the length of the string.¢ctagfreturndtextyBRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays. 
 If this function succeeds, Get/SetNativeString will also succeed. 
 Parameter number, starting from 1. Stores the length of the string. SP_ERROR_NONE on success, any other integer on failure.¢ctageerrordtextyÇRetrieves the string length from a native parameter string.  This is useful for fetching the entire string using dynamic arrays. 
 If this function succeeds, Get/SetNativeString will also succeed. 
 Parameter number, starting from 1. Stores the length of the string. SP_ERROR_NONE on success, any other integer on failure. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecintiargumentsÇ£dtypecintdnameeparamddecliint param£dtypedint&dnameflengthddeclkint& lengthˇødnameoGetNativeStringhdocStartN»fdocEndP⁄ddocs¢ebriefx+Retrieves a string from a native parameter.dtagsà¢ctag`dtextx+Retrieves a string from a native parameter.¢ctagdnotedtextxYRetrieves a string from a native parameter. 
 Output conditions are undefined on failure.¢ctagkparam:paramdtextx~Retrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1.¢ctaglparam:bufferdtextxùRetrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Buffer to store the string in.¢ctagoparam:maxlengthdtextxªRetrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Buffer to store the string in. Maximum length of the buffer.¢ctagkparam:bytesdtextxÈRetrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Buffer to store the string in. Maximum length of the buffer. Optionally store the number of bytes written.¢ctagfreturndtexty!Retrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Buffer to store the string in. Maximum length of the buffer. Optionally store the number of bytes written. SP_ERROR_NONE on success, any other integer on failure.¢ctageerrordtextyaRetrieves a string from a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Buffer to store the string in. Maximum length of the buffer. Optionally store the number of bytes written. SP_ERROR_NONE on success, any other integer on failure. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecintiargumentsÑ£dtypecintdnameeparamddecliint param£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypedint&dnameebytesddecljint& bytesˇødnameoSetNativeStringhdocStartQ2fdocEndS°ddocs¢ebriefx$Sets a string in a native parameter.dtagsâ¢ctag`dtextx$Sets a string in a native parameter.¢ctagdnotedtextxRSets a string in a native parameter. 
 Output conditions are undefined on failure.¢ctagkparam:paramdtextxwSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1.¢ctaglparam:sourcedtextxçSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use.¢ctagoparam:maxlengthdtextxØSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use. Maximum number of bytes to write.¢ctagjparam:utf8dtextxÊSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use. Maximum number of bytes to write. If false, string will not be written with UTF8 safety.¢ctagkparam:bytesdtextySets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use. Maximum number of bytes to write. If false, string will not be written with UTF8 safety. Optionally store the number of bytes written.¢ctagfreturndtextyLSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use. Maximum number of bytes to write. If false, string will not be written with UTF8 safety. Optionally store the number of bytes written. SP_ERROR_NONE on success, any other integer on failure.¢ctageerrordtextyåSets a string in a native parameter. 
 Output conditions are undefined on failure. 
 Parameter number, starting from 1. Source string to use. Maximum number of bytes to write. If false, string will not be written with UTF8 safety. Optionally store the number of bytes written. SP_ERROR_NONE on success, any other integer on failure. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecintiargumentsÖ£dtypecintdnameeparamddecliint param£dtypelconst char[]dnamefsourceddeclsconst char[] source£dtypecintdnameimaxlengthddeclmint maxlength£dtypedbooldnamedutf8ddeclibool utf8£dtypedint&dnameebytesddecljint& bytesˇødnamemGetNativeCellhdocStartTfdocEndUddocs¢ebriefx$Gets a cell from a native parameter.dtagsÑ¢ctag`dtextx$Gets a cell from a native parameter.¢ctagkparam:paramdtextxIGets a cell from a native parameter. 
 Parameter number, starting from 1.¢ctagfreturndtextxmGets a cell from a native parameter. 
 Parameter number, starting from 1. Cell value at the parameter number.¢ctageerrordtextx≠Gets a cell from a native parameter. 
 Parameter number, starting from 1. Cell value at the parameter number. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecanyiargumentsÅ£dtypecintdnameeparamddecliint paramˇødnameqGetNativeFunctionhdocStartU@fdocEndVlddocs¢ebriefx0Gets a function pointer from a native parameter.dtagsÑ¢ctag`dtextx0Gets a function pointer from a native parameter.¢ctagkparam:paramdtextxUGets a function pointer from a native parameter. 
 Parameter number, starting from 1.¢ctagfreturndtextxÖGets a function pointer from a native parameter. 
 Parameter number, starting from 1. Function pointer at the given parameter number.¢ctageerrordtextx∆Gets a function pointer from a native parameter. 
 Parameter number, starting from 1. Function pointer at the given parameter number. Invalid parameter number, or calling from a non-native function.dkindfnativejreturnTypehfunctioniargumentsÅ£dtypecintdnameeparamddecliint paramˇødnamepGetNativeCellRefhdocStartVüfdocEndW¥ddocs¢ebriefx2Gets a cell from a native parameter, by reference.dtagsÑ¢ctag`dtextx2Gets a cell from a native parameter, by reference.¢ctagkparam:paramdtextxWGets a cell from a native parameter, by reference. 
 Parameter number, starting from 1.¢ctagfreturndtextx{Gets a cell from a native parameter, by reference. 
 Parameter number, starting from 1. Cell value at the parameter number.¢ctageerrordtextxªGets a cell from a native parameter, by reference. 
 Parameter number, starting from 1. Cell value at the parameter number. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecanyiargumentsÅ£dtypecintdnameeparamddecliint paramˇødnamepSetNativeCellRefhdocStartW·fdocEndY
ddocs¢ebriefx2Sets a cell from a native parameter, by reference.dtagsÑ¢ctag`dtextx2Sets a cell from a native parameter, by reference.¢ctagkparam:paramdtextxWSets a cell from a native parameter, by reference. 
 Parameter number, starting from 1.¢ctagkparam:valuedtextxèSets a cell from a native parameter, by reference. 
 Parameter number, starting from 1. Cell value at the parameter number to set by reference.¢ctageerrordtextxœSets a cell from a native parameter, by reference. 
 Parameter number, starting from 1. Cell value at the parameter number to set by reference. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnameeparamddecliint param£dtypecanydnameevalueddecliany valueˇødnamenGetNativeArrayhdocStartYCfdocEndZ€ddocs¢ebriefx<Gets an array from a native parameter (always by reference).dtagsÜ¢ctag`dtextx<Gets an array from a native parameter (always by reference).¢ctagkparam:paramdtextxaGets an array from a native parameter (always by reference). 
 Parameter number, starting from 1.¢ctagkparam:localdtextx{Gets an array from a native parameter (always by reference). 
 Parameter number, starting from 1. Local array to copy into.¢ctagjparam:sizedtextxòGets an array from a native parameter (always by reference). 
 Parameter number, starting from 1. Local array to copy into. Maximum size of local array.¢ctagfreturndtextxÃGets an array from a native parameter (always by reference). 
 Parameter number, starting from 1. Local array to copy into. Maximum size of local array. SP_ERROR_NONE on success, anything else on failure.¢ctageerrordtextyGets an array from a native parameter (always by reference). 
 Parameter number, starting from 1. Local array to copy into. Maximum size of local array. SP_ERROR_NONE on success, anything else on failure. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecintiargumentsÉ£dtypecintdnameeparamddecliint param£dtypeeany[]dnameelocalddeclkany[] local£dtypecintdnamedsizeddeclhint sizeˇødnamenSetNativeArrayhdocStart[fdocEnd\∆ddocs¢ebriefxICopies a local array into a native parameter array (always by reference).dtagsÜ¢ctag`dtextxICopies a local array into a native parameter array (always by reference).¢ctagkparam:paramdtextxnCopies a local array into a native parameter array (always by reference). 
 Parameter number, starting from 1.¢ctagkparam:localdtextxàCopies a local array into a native parameter array (always by reference). 
 Parameter number, starting from 1. Local array to copy from.¢ctagjparam:sizedtextx©Copies a local array into a native parameter array (always by reference). 
 Parameter number, starting from 1. Local array to copy from. Size of the local array to copy.¢ctagfreturndtextx›Copies a local array into a native parameter array (always by reference). 
 Parameter number, starting from 1. Local array to copy from. Size of the local array to copy. SP_ERROR_NONE on success, anything else on failure.¢ctageerrordtextyCopies a local array into a native parameter array (always by reference). 
 Parameter number, starting from 1. Local array to copy from. Size of the local array to copy. SP_ERROR_NONE on success, anything else on failure. Invalid parameter number or calling from a non-native function.dkindfnativejreturnTypecintiargumentsÉ£dtypecintdnameeparamddecliint param£dtypekconst any[]dnameelocalddeclqconst any[] local£dtypecintdnamedsizeddeclhint sizeˇødnamewIsNativeParamNullVectorhdocStart]fdocEnd]Àddocs¢ebriefx1Check if the native parameter is the NULL_VECTOR.dtagsÉ¢ctag`dtextx1Check if the native parameter is the NULL_VECTOR.¢ctagkparam:paramdtextxVCheck if the native parameter is the NULL_VECTOR. 
 Parameter number, starting from 1.¢ctagfreturndtextx|Check if the native parameter is the NULL_VECTOR. 
 Parameter number, starting from 1. True if NULL_VECTOR, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnameeparamddecliint paramˇødnamewIsNativeParamNullStringhdocStart^ fdocEnd^Ωddocs¢ebriefx1Check if the native parameter is the NULL_STRING.dtagsÉ¢ctag`dtextx1Check if the native parameter is the NULL_STRING.¢ctagkparam:paramdtextxVCheck if the native parameter is the NULL_STRING. 
 Parameter number, starting from 1.¢ctagfreturndtextx|Check if the native parameter is the NULL_STRING. 
 Parameter number, starting from 1. True if NULL_STRING, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnameeparamddecliint paramˇødnamerFormatNativeStringhdocStart^ÚfdocEndb7ddocs¢ebriefx0Formats a string using parameters from a native.dtagsã¢ctag`dtextx0Formats a string using parameters from a native.¢ctagdnotedtextxTFormats a string using parameters from a native. 
 All parameter indexes start at 1.¢ctagdnotedtextx∏Formats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined.¢ctagoparam:out_paramdtextx˙Formats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used.¢ctagoparam:fmt_paramdtexty.Formats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used.¢ctagrparam:vararg_paramdtextyOFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number.¢ctagmparam:out_lendtextyÜFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number. Output string buffer maximum length (always required).¢ctagmparam:writtendtextyµFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number. Output string buffer maximum length (always required). Optionally stores the number of bytes written.¢ctagpparam:out_stringdtextyÎFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number. Output string buffer maximum length (always required). Optionally stores the number of bytes written. Output string buffer to use if out_param is not used.¢ctagpparam:fmt_stringdtextyFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number. Output string buffer maximum length (always required). Optionally stores the number of bytes written. Output string buffer to use if out_param is not used. Format string to use if fmt_param is not used.¢ctagfreturndtextyNFormats a string using parameters from a native. 
 All parameter indexes start at 1. If the input and output buffers overlap, the contents of the output buffer at the end is undefined. 
 Output parameter number to write to.  If 0, out_string is used. Format parameter number.  If 0, fmt_string is used. First variable parameter number. Output string buffer maximum length (always required). Optionally stores the number of bytes written. Output string buffer to use if out_param is not used. Format string to use if fmt_param is not used. SP_ERROR_NONE on success, anything else on failure.dkindfnativejreturnTypecintiargumentsá£dtypecintdnameiout_paramddeclmint out_param£dtypecintdnameifmt_paramddeclmint fmt_param£dtypecintdnamelvararg_paramddeclpint vararg_param£dtypecintdnamegout_lenddeclkint out_len£dtypedint&dnamegwrittenddecllint& written£dtypefchar[]dnamejout_stringddeclqchar[] out_string£dtypelconst char[]dnamejfmt_stringddeclwconst char[] fmt_stringˇødnamelRequestFramehdocStartcŸfdocEnddõddocs¢ebriefx%Creates a single use Next Frame hook.dtagsÉ¢ctag`dtextx%Creates a single use Next Frame hook.¢ctagnparam:FunctiondtextxKCreates a single use Next Frame hook. 
 Function to call on the next frame.¢ctagjparam:datadtextxÅCreates a single use Next Frame hook. 
 Function to call on the next frame. Value to be passed on the invocation of the Function.dkindfnativejreturnTypedvoidiargumentsÇ£dtypetRequestFrameCallbackdnamehFunctionddeclxRequestFrameCallback Function£dtypecanydnameddataddeclhany dataˇjmethodmapsÇødnamemGlobalForwardhdocStart fdocEnd ddocsˆgmethodsÅødnamemGlobalForwardhdocStartÔfdocEndqddocs¢ebriefxCreates a global forward.dtagsä¢ctag`dtextxCreates a global forward.¢ctagdnotedtextxuCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins.¢ctagdnotedtextx∑Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed.¢ctagdnotedtextxŸCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned.¢ctagdnotedtextx˝Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these.¢ctagjparam:namedtexty*Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward.¢ctagjparam:typedtextyECreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used.¢ctagiparam:...dtextytCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32).¢ctagfreturndtextyíCreates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32). Handle to new global forward.¢ctageerrordtexty∂Creates a global forward. 
 The name used to create the forward is used as its public function in all target plugins. This is ideal for global, static forwards that are never changed. Global forwards cannot be cloned. Use CloseHandle() to destroy these. 
 Name of public function to use in forward. Execution type to be used. Variable number of parameter types (up to 32). Handle to new global forward. More than 32 paramater types passeddkindˆjreturnTypemGlobalForwardiargumentsÉ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypehExecTypednamedtypeddeclmExecType type£dtypelParamType...dnamec...ddeclpParamType... ...ˇjpropertiesÅødnamemFunctionCounthdocStart∆fdocEndddocs¢ebriefxJReturns the number of functions in a global or private forward's call listdtagsÅ¢ctag`dtextxJReturns the number of functions in a global or private forward's call listdtypecintfgetterıfsetterÙˇˇødnamenPrivateForwardhdocStart fdocEnd ddocsˆgmethodsÑødnamenPrivateForwardhdocStartÑfdocEndKddocs¢ebriefxCreates a private forward.dtagsà¢ctag`dtextxCreates a private forward.¢ctagdnotedtextxaCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this.¢ctagdnotedtextxÅCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned.¢ctagdnotedtextx•Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these.¢ctagjparam:typedtextx¬Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used.¢ctagiparam:...dtextxÒCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32).¢ctagfreturndtextyCreates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32). Handle to new private forward.¢ctageerrordtexty4Creates a private forward. 
 No functions are automatically added. Use AddToForward() to do this. Private forwards can be cloned. Use CloseHandle() to destroy these. 
 Execution type to be used. Variable number of parameter types (up to 32). Handle to new private forward. More than 32 paramater types passeddkindˆjreturnTypenPrivateForwardiargumentsÇ£dtypehExecTypednamedtypeddeclmExecType type£dtypelParamType...dnamec...ddeclpParamType... ...ˇødnamekAddFunctionhdocStartéfdocEndáddocs¢ebriefx1Adds a function to a private forward's call list.dtagsÜ¢ctag`dtextx1Adds a function to a private forward's call list.¢ctagdnotedtextx]Adds a function to a private forward's call list. 
 Cannot be used during an incomplete call.¢ctaglparam:plugindtextx√Adds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.¢ctagjparam:funcdtextxﬂAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward.¢ctagfreturndtextyAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward. True on success, false otherwise.¢ctageerrordtextybAdds a function to a private forward's call list. 
 Cannot be used during an incomplete call. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to add to forward. True on success, false otherwise. Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid functiondkindˆjreturnTypedbooliargumentsÇ£dtypefHandlednamefpluginddeclmHandle plugin£dtypehfunctiondnamedfuncddeclmfunction funcˇødnamenRemoveFunctionhdocStartÃfdocEnd!ddocs¢ebriefx6Removes a function from a private forward's call list.dtagsá¢ctag`dtextx6Removes a function from a private forward's call list.¢ctagdnotedtextxSRemoves a function from a private forward's call list. 
 Only removes one instance.¢ctagdnotedtextxüRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded.¢ctaglparam:plugindtextyRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin.¢ctagjparam:funcdtexty&Removes a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward.¢ctagfreturndtextyHRemoves a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward. True on success, false otherwise.¢ctageerrordtexty©Removes a function from a private forward's call list. 
 Only removes one instance. Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin that contains the function. Pass INVALID_HANDLE to specify the calling plugin. Function to remove from forward. True on success, false otherwise. Invalid or corrupt private forward handle, invalid or corrupt plugin handle, or invalid functiondkindˆjreturnTypedbooliargumentsÇ£dtypefHandlednamefpluginddeclmHandle plugin£dtypehfunctiondnamedfuncddeclmfunction funcˇødnamerRemoveAllFunctionshdocStart!_fdocEnd#Iddocs¢ebriefxERemoves all instances of a plugin from a private forward's call list.dtagsÖ¢ctag`dtextxERemoves all instances of a plugin from a private forward's call list.¢ctagdnotedtextxìRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded.¢ctaglparam:plugindtextxıRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin.¢ctagfreturndtextyRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin. Number of functions removed from forward.¢ctageerrordtextymRemoves all instances of a plugin from a private forward's call list. 
 Functions will be removed automatically if their parent plugin is unloaded. 
 Handle of the plugin to remove instances of. Pass INVALID_HANDLE to specify the calling plugin. Number of functions removed from forward. Invalid or corrupt private forward handle or invalid or corrupt plugin handledkindˆjreturnTypecintiargumentsÅ£dtypefHandlednamefpluginddeclmHandle pluginˇjpropertiesÄˇiconstantsÄeenumsÇødnameiParamTypehdocStart≠fdocEndddocs¢ebriefxGDescribes the various ways to pass parameters to functions or forwards.dtagsÅ¢ctag`dtextxGDescribes the various ways to pass parameters to functions or forwards.gentriesàødnameiParam_AnyhdocStartKfdocEndnddocsˆˇødnamejParam_CellhdocStart•fdocEndÀddocsˆˇødnamekParam_FloathdocStartfdocEnd#ddocsˆˇødnamelParam_StringhdocStartZfdocEnd|ddocsˆˇødnamekParam_ArrayhdocStart≥fdocEnd‘ddocsˆˇødnamemParam_VarArgshdocStart	fdocEnd	`ddocsˆˇødnameoParam_CellByRefhdocStart	ófdocEnd	≈ddocsˆˇødnamepParam_FloatByRefhdocStart	¸fdocEnd
+ddocsˆˇˇødnamehExecTypehdocStart
3fdocEnd
xddocs¢ebriefx8Defines how a forward iterates through plugin functions.dtagsÅ¢ctag`dtextx8Defines how a forward iterates through plugin functions.gentriesÑødnameiET_IgnorehdocStart
°fdocEnd
ÀddocsˆˇødnameiET_SinglehdocStart
‚fdocEndddocsˆˇødnamehET_EventhdocStart-fdocEndëddocsˆˇødnamegET_HookhdocStart®fdocEndddocsˆˇˇhtypesetsÇødnamejNativeCallhdocStart fdocEnd ddocsˆetypesÇødtypex*function int(Handle plugin, int numParams)hdocStartFÌfdocEndHddocs¢ebriefxPDefines a native function. 
 It is not necessary to validate the parameter countdtagsÑ¢ctag`dtextxPDefines a native function. 
 It is not necessary to validate the parameter count¢ctaglparam:plugindtextxpDefines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin.¢ctagoparam:numParamsdtextxõDefines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin. Number of parameters passed to the native.¢ctagfreturndtextx¿Defines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin. Number of parameters passed to the native. Value for the native call to return.ˇødtypex*function any(Handle plugin, int numParams)hdocStartHIfdocEndItddocs¢ebriefxPDefines a native function. 
 It is not necessary to validate the parameter countdtagsÑ¢ctag`dtextxPDefines a native function. 
 It is not necessary to validate the parameter count¢ctaglparam:plugindtextxpDefines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin.¢ctagoparam:numParamsdtextxõDefines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin. Number of parameters passed to the native.¢ctagfreturndtextx¿Defines a native function. 
 It is not necessary to validate the parameter count 
 Handle of the calling plugin. Number of parameters passed to the native. Value for the native call to return.ˇˇødnametRequestFrameCallbackhdocStartcfdocEndcÇddocs¢ebriefx Defines a RequestFrame Callback.dtagsÇ¢ctag`dtextx Defines a RequestFrame Callback.¢ctagjparam:datadtextxJDefines a RequestFrame Callback. 
 Data passed to the RequestFrame native.etypesÇødtypeofunction void()hdocStart fdocEnd ddocsˆˇødtypewfunction void(any data)hdocStart fdocEnd ddocsˆˇˇhtypedefsÄ