{"functions":[{"name":"CreateTopMenu","docStart":9690,"docEnd":9870,"docs":{"brief":"Creates a TopMenu.","tags":[{"tag":"","text":"Creates a TopMenu."},{"tag":"param:handler","text":"Creates a TopMenu.\nHandler to use for drawing the root title."},{"tag":"return","text":"Creates a TopMenu.\nHandler to use for drawing the root title.A new TopMenu Handle, or INVALID_HANDLE on failure."}]},"kind":"native","returnType":"TopMenu","arguments":[{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler"}]},{"name":"LoadTopMenuConfig","docStart":9929,"docEnd":11138,"docs":{"brief":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.","tags":[{"tag":"","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items."},{"tag":"param:topmenu","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle."},{"tag":"param:file","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path."},{"tag":"param:error","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer."},{"tag":"param:maxlength","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer.Maximum size of the error buffer.Error buffer will be filled with azero-terminated string if false isreturned."},{"tag":"return","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer.Maximum size of the error buffer.Error buffer will be filled with azero-terminated string if false isreturned.True on success, false on failure."},{"tag":"error","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer.Maximum size of the error buffer.Error buffer will be filled with azero-terminated string if false isreturned.True on success, false on failure.Invalid TopMenu Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"char[]","name":"error","decl":"char[] error"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"AddToTopMenu","docStart":11238,"docEnd":11989,"docs":{"brief":"Adds an topobj to a TopMenu.","tags":[{"tag":"","text":"Adds an topobj to a TopMenu."},{"tag":"param:topmenu","text":"Adds an topobj to a TopMenu.\nTopMenu Handle."},{"tag":"param:name","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique)."},{"tag":"param:type","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type."},{"tag":"param:handler","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj."},{"tag":"param:parent","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent."},{"tag":"param:cmdname","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent.Command name (for access overrides)."},{"tag":"param:flags","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent.Command name (for access overrides).Default access flags."},{"tag":"param:info_string","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes).A new TopMenuObject ID, or INVALID_TOPMENUOBJECT onfailure."},{"tag":"error","text":"Adds an topobj to a TopMenu.\nTopMenu Handle.Object name (MUST be unique).Object type.Handler for topobj.Parent topobj ID, or INVALID_TOPMENUOBJECT for none.Items must have a category parent.Categories must not have a parent.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes).A new TopMenuObject ID, or INVALID_TOPMENUOBJECT onfailure.Invalid TopMenu Handle."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"TopMenuObjectType","name":"type","decl":"TopMenuObjectType type"},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler"},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent"},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string"}]},{"name":"GetTopMenuInfoString","docStart":12278,"docEnd":12711,"docs":{"brief":"Retrieves the info string of a top menu item.","tags":[{"tag":"","text":"Retrieves the info string of a top menu item."},{"tag":"param:topmenu","text":"Retrieves the info string of a top menu item.\nTopMenu Handle."},{"tag":"param:parent","text":"Retrieves the info string of a top menu item.\nTopMenu Handle.TopMenuObject ID."},{"tag":"param:buffer","text":"Retrieves the info string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string."},{"tag":"param:maxlength","text":"Retrieves the info string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string."},{"tag":"return","text":"Retrieves the info string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including thenull terminator."},{"tag":"error","text":"Retrieves the info string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including thenull terminator.Invalid TopMenu Handle or TopMenuObject ID."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetTopMenuObjName","docStart":12817,"docEnd":13250,"docs":{"brief":"Retrieves the name string of a top menu item.","tags":[{"tag":"","text":"Retrieves the name string of a top menu item."},{"tag":"param:topmenu","text":"Retrieves the name string of a top menu item.\nTopMenu Handle."},{"tag":"param:topobj","text":"Retrieves the name string of a top menu item.\nTopMenu Handle.TopMenuObject ID."},{"tag":"param:buffer","text":"Retrieves the name string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string."},{"tag":"param:maxlength","text":"Retrieves the name string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string."},{"tag":"return","text":"Retrieves the name string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including thenull terminator."},{"tag":"error","text":"Retrieves the name string of a top menu item.\nTopMenu Handle.TopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including thenull terminator.Invalid TopMenu Handle or TopMenuObject ID."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"RemoveFromTopMenu","docStart":13353,"docEnd":13696,"docs":{"brief":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.","tags":[{"tag":"","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored."},{"tag":"param:topmenu","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.\nTopMenu Handle."},{"tag":"param:topobj","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.\nTopMenu Handle.TopMenuObject ID."},{"tag":"error","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.\nTopMenu Handle.TopMenuObject ID.Invalid TopMenu Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj"}]},{"name":"DisplayTopMenu","docStart":13770,"docEnd":14080,"docs":{"brief":"Displays a TopMenu to a client.","tags":[{"tag":"","text":"Displays a TopMenu to a client."},{"tag":"param:topmenu","text":"Displays a TopMenu to a client.\nTopMenu Handle."},{"tag":"param:client","text":"Displays a TopMenu to a client.\nTopMenu Handle.Client index."},{"tag":"param:position","text":"Displays a TopMenu to a client.\nTopMenu Handle.Client index.Position to display from."},{"tag":"return","text":"Displays a TopMenu to a client.\nTopMenu Handle.Client index.Position to display from.True on success, false on failure."},{"tag":"error","text":"Displays a TopMenu to a client.\nTopMenu Handle.Client index.Position to display from.True on success, false on failure.Invalid TopMenu Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"int","name":"client","decl":"int client"},{"type":"TopMenuPosition","name":"position","decl":"TopMenuPosition position"}]},{"name":"DisplayTopMenuCategory","docStart":14167,"docEnd":14480,"docs":{"brief":"Displays a TopMenu category to a client.","tags":[{"tag":"","text":"Displays a TopMenu category to a client."},{"tag":"param:topmenu","text":"Displays a TopMenu category to a client.\nTopMenu Handle."},{"tag":"param:category","text":"Displays a TopMenu category to a client.\nTopMenu Handle.Category topobj id."},{"tag":"param:client","text":"Displays a TopMenu category to a client.\nTopMenu Handle.Category topobj id.Client index."},{"tag":"return","text":"Displays a TopMenu category to a client.\nTopMenu Handle.Category topobj id.Client index.True on success, false on failure."},{"tag":"error","text":"Displays a TopMenu category to a client.\nTopMenu Handle.Category topobj id.Client index.True on success, false on failure.Invalid TopMenu Handle or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"TopMenuObject","name":"category","decl":"TopMenuObject category"},{"type":"int","name":"client","decl":"int client"}]},{"name":"FindTopMenuCategory","docStart":14573,"docEnd":14885,"docs":{"brief":"Finds a category's topobj ID in a TopMenu.","tags":[{"tag":"","text":"Finds a category's topobj ID in a TopMenu."},{"tag":"param:topmenu","text":"Finds a category's topobj ID in a TopMenu.\nTopMenu Handle."},{"tag":"param:name","text":"Finds a category's topobj ID in a TopMenu.\nTopMenu Handle.Object's unique name."},{"tag":"return","text":"Finds a category's topobj ID in a TopMenu.\nTopMenu Handle.Object's unique name.TopMenuObject ID on success, orINVALID_TOPMENUOBJECT on failure."},{"tag":"error","text":"Finds a category's topobj ID in a TopMenu.\nTopMenu Handle.Object's unique name.TopMenuObject ID on success, orINVALID_TOPMENUOBJECT on failure.Invalid TopMenu Handle."}]},"kind":"native","returnType":"TopMenuObject","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"SetTopMenuTitleCaching","docStart":14967,"docEnd":15460,"docs":{"brief":"Change the menu title caching behavior of the TopMenu. By default thetitles are cached to reduce overhead. If you need dynamic menu titles, whichcan change everytime the menu is displayed to a user, set this to false.","tags":[{"tag":"","text":"Change the menu title caching behavior of the TopMenu. By default thetitles are cached to reduce overhead. If you need dynamic menu titles, whichcan change everytime the menu is displayed to a user, set this to false."},{"tag":"param:topmenu","text":"Change the menu title caching behavior of the TopMenu. By default thetitles are cached to reduce overhead. If you need dynamic menu titles, whichcan change everytime the menu is displayed to a user, set this to false.\nTopMenu Handle."},{"tag":"param:cache_titles","text":"Change the menu title caching behavior of the TopMenu. By default thetitles are cached to reduce overhead. If you need dynamic menu titles, whichcan change everytime the menu is displayed to a user, set this to false.\nTopMenu Handle.Cache the menu titles and don't call the handler withTopMenuAction_DisplayTitle everytime the menu is drawn?"},{"tag":"error","text":"Change the menu title caching behavior of the TopMenu. By default thetitles are cached to reduce overhead. If you need dynamic menu titles, whichcan change everytime the menu is displayed to a user, set this to false.\nTopMenu Handle.Cache the menu titles and don't call the handler withTopMenuAction_DisplayTitle everytime the menu is drawn?Invalid TopMenu Handle"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"topmenu","decl":"Handle topmenu"},{"type":"bool","name":"cache_titles","decl":"bool cache_titles"}]},{"name":"__ext_topmenus_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[]}],"methodmaps":[{"name":"TopMenu","docStart":4303,"docEnd":4464,"docs":{"brief":"TopMenu objects are used for constructing multi-layer menus. Currently, theysupport at most two levels. The first level of items are called \"categories\"","tags":[{"tag":"","text":"TopMenu objects are used for constructing multi-layer menus. Currently, theysupport at most two levels. The first level of items are called \"categories\""}]},"methods":[{"name":"TopMenu","docStart":4498,"docEnd":4638,"docs":{"brief":"Creates a new TopMenu.","tags":[{"tag":"","text":"Creates a new TopMenu."},{"tag":"param:handler","text":"Creates a new TopMenu.\nHandler to use for drawing the root title."},{"tag":"return","text":"Creates a new TopMenu.\nHandler to use for drawing the root title.A new TopMenu"}]},"kind":null,"returnType":"TopMenu","arguments":[{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler"}]},{"name":"FromHandle","docStart":4692,"docEnd":4851,"docs":{"brief":"Returns a TopMenu handle from a generic handle. If the given handle isa TopMenu, the handle is simply casted back. Otherwise, an error israised","tags":[{"tag":"","text":"Returns a TopMenu handle from a generic handle. If the given handle isa TopMenu, the handle is simply casted back. Otherwise, an error israised"}]},"kind":null,"returnType":"TopMenu","arguments":[{"type":"Handle","name":"handle","decl":"Handle handle"}]},{"name":"LoadConfig","docStart":4914,"docEnd":6055,"docs":{"brief":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.","tags":[{"tag":"","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items."},{"tag":"param:topmenu","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle."},{"tag":"param:file","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path."},{"tag":"param:error","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer."},{"tag":"param:maxlength","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer.Maximum size of the error buffer. Error bufferwill be filled with a zero-terminated string iffalse is returned."},{"tag":"return","text":"Re-sorts the items in a TopMenu via a configuration file.\nThe format of the configuration file should be a Valve Key-Valuesformatted file that SourceMod can parse.  There should be one rootsection, and one sub-section for each category.  Each sub-section'sname should match the category name.\nEach sub-section may only contain key/value pairs in the form of:key: \"item\"value: Name of the item as passed to AddToTopMenu().\nThe TopMenu will draw items in the order declared in the configurationfile.  If items do not appear in the configuration file, they are sortedper-player based on how the handler function renders for that player.These items appear after the configuration sorted items.\nTopMenu Handle.File path.Error buffer.Maximum size of the error buffer. Error bufferwill be filled with a zero-terminated string iffalse is returned.True on success, false on failure"}]},"kind":null,"returnType":"bool","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"char[]","name":"error","decl":"char[] error"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"AddCategory","docStart":6141,"docEnd":6534,"docs":{"brief":"Adds a category to a TopMenu.","tags":[{"tag":"","text":"Adds a category to a TopMenu."},{"tag":"param:name","text":"Adds a category to a TopMenu.\nObject name (MUST be unique)."},{"tag":"param:handler","text":"Adds a category to a TopMenu.\nObject name (MUST be unique).Handler for topobj."},{"tag":"param:cmdname","text":"Adds a category to a TopMenu.\nObject name (MUST be unique).Handler for topobj.Command name (for access overrides)."},{"tag":"param:flags","text":"Adds a category to a TopMenu.\nObject name (MUST be unique).Handler for topobj.Command name (for access overrides).Default access flags."},{"tag":"param:info_string","text":"Adds a category to a TopMenu.\nObject name (MUST be unique).Handler for topobj.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"Adds a category to a TopMenu.\nObject name (MUST be unique).Handler for topobj.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes).A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure"}]},"kind":null,"returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler"},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string"}]},{"name":"AddItem","docStart":6782,"docEnd":7254,"docs":{"brief":"Adds an item to a TopMenu category.","tags":[{"tag":"","text":"Adds an item to a TopMenu category."},{"tag":"param:name","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique)."},{"tag":"param:handler","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj."},{"tag":"param:category","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj.The object of the parent category for the item."},{"tag":"param:cmdname","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj.The object of the parent category for the item.Command name (for access overrides)."},{"tag":"param:flags","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj.The object of the parent category for the item.Command name (for access overrides).Default access flags."},{"tag":"param:info_string","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj.The object of the parent category for the item.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes)."},{"tag":"return","text":"Adds an item to a TopMenu category.\nObject name (MUST be unique).Handler for topobj.The object of the parent category for the item.Command name (for access overrides).Default access flags.Arbitrary storage (max 255 bytes).A new TopMenuObject ID, or INVALID_TOPMENUOBJECT on failure"}]},"kind":null,"returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"TopMenuHandler","name":"handler","decl":"TopMenuHandler handler"},{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent"},{"type":"const char[]","name":"cmdname","decl":"const char[] cmdname"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"info_string","decl":"const char[] info_string"}]},{"name":"GetInfoString","docStart":7512,"docEnd":7803,"docs":{"brief":"Retrieves the info string of a top menu item.","tags":[{"tag":"","text":"Retrieves the info string of a top menu item."},{"tag":"param:parent","text":"Retrieves the info string of a top menu item.\nTopMenuObject ID."},{"tag":"param:buffer","text":"Retrieves the info string of a top menu item.\nTopMenuObject ID.Buffer to store info string."},{"tag":"param:maxlength","text":"Retrieves the info string of a top menu item.\nTopMenuObject ID.Buffer to store info string.Maximum size of info string."},{"tag":"return","text":"Retrieves the info string of a top menu item.\nTopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including the  null terminator"}]},"kind":null,"returnType":"int","arguments":[{"type":"TopMenuObject","name":"parent","decl":"TopMenuObject parent"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetObjName","docStart":7895,"docEnd":8185,"docs":{"brief":"Retrieves the name string of a top menu item.","tags":[{"tag":"","text":"Retrieves the name string of a top menu item."},{"tag":"param:topobj","text":"Retrieves the name string of a top menu item.\nTopMenuObject ID."},{"tag":"param:buffer","text":"Retrieves the name string of a top menu item.\nTopMenuObject ID.Buffer to store info string."},{"tag":"param:maxlength","text":"Retrieves the name string of a top menu item.\nTopMenuObject ID.Buffer to store info string.Maximum size of info string."},{"tag":"return","text":"Retrieves the name string of a top menu item.\nTopMenuObject ID.Buffer to store info string.Maximum size of info string.Number of bytes written, not including the null terminator"}]},"kind":null,"returnType":"int","arguments":[{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Remove","docStart":8274,"docEnd":8521,"docs":{"brief":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.","tags":[{"tag":"","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored."},{"tag":"param:topobj","text":"Removes an topobj from a TopMenu.\nPlugins' topobjs are automatically removed all TopMenus when the givenplugin unloads or pauses.  In the case of unpausing, all items are restored.\nTopMenuObject ID"}]},"kind":null,"returnType":"void","arguments":[{"type":"TopMenuObject","name":"topobj","decl":"TopMenuObject topobj"}]},{"name":"Display","docStart":8577,"docEnd":8767,"docs":{"brief":"Displays a TopMenu to a client.","tags":[{"tag":"","text":"Displays a TopMenu to a client."},{"tag":"param:client","text":"Displays a TopMenu to a client.\nClient index."},{"tag":"param:position","text":"Displays a TopMenu to a client.\nClient index.Position to display from."},{"tag":"return","text":"Displays a TopMenu to a client.\nClient index.Position to display from.True on success, false on failure"}]},"kind":null,"returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"TopMenuPosition","name":"position","decl":"TopMenuPosition position"}]},{"name":"DisplayCategory","docStart":8840,"docEnd":9033,"docs":{"brief":"Displays a TopMenu category to a client.","tags":[{"tag":"","text":"Displays a TopMenu category to a client."},{"tag":"param:category","text":"Displays a TopMenu category to a client.\nCategory topobj id."},{"tag":"param:client","text":"Displays a TopMenu category to a client.\nCategory topobj id.Client index."},{"tag":"return","text":"Displays a TopMenu category to a client.\nCategory topobj id.Client index.True on success, false on failure"}]},"kind":null,"returnType":"bool","arguments":[{"type":"TopMenuObject","name":"category","decl":"TopMenuObject category"},{"type":"int","name":"client","decl":"int client"}]},{"name":"FindCategory","docStart":9112,"docEnd":9326,"docs":{"brief":"Finds a category's topobj ID in a TopMenu.","tags":[{"tag":"","text":"Finds a category's topobj ID in a TopMenu."},{"tag":"param:name","text":"Finds a category's topobj ID in a TopMenu.\nObject's unique name."},{"tag":"return","text":"Finds a category's topobj ID in a TopMenu.\nObject's unique name.TopMenuObject ID on success, orINVALID_TOPMENUOBJECT on failure"}]},"kind":null,"returnType":"TopMenuObject","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]}],"properties":[{"name":"CacheTitles","docStart":9394,"docEnd":9614,"docs":{"brief":"Set the menu title caching behavior of the TopMenu. By default titlesare cached to reduce overhead. If you need dynamic menu titles whichchange each time the menu is displayed to a user, set this to false","tags":[{"tag":"","text":"Set the menu title caching behavior of the TopMenu. By default titlesare cached to reduce overhead. If you need dynamic menu titles whichchange each time the menu is displayed to a user, set this to false"}]},"type":"bool","getter":false,"setter":true}]}],"constants":[],"enums":[{"name":"TopMenuAction","docStart":1676,"docEnd":1731,"docs":{"brief":"Actions a top menu will take on an topobj.","tags":[{"tag":"","text":"Actions a top menu will take on an topobj."}]},"entries":[{"name":"TopMenuAction_DisplayOption","docStart":1757,"docEnd":1949,"docs":null},{"name":"TopMenuAction_DisplayTitle","docStart":1989,"docEnd":2306,"docs":null},{"name":"TopMenuAction_SelectOption","docStart":2345,"docEnd":2516,"docs":null},{"name":"TopMenuAction_DrawOption","docStart":2555,"docEnd":2876,"docs":null},{"name":"TopMenuAction_RemoveObject","docStart":2914,"docEnd":3093,"docs":null}]},{"name":"TopMenuObjectType","docStart":3135,"docEnd":3170,"docs":{"brief":"Top menu topobj types.","tags":[{"tag":"","text":"Top menu topobj types."}]},"entries":[{"name":"TopMenuObject_Category","docStart":3236,"docEnd":3283,"docs":null},{"name":"TopMenuObject_Item","docStart":3322,"docEnd":3348,"docs":null}]},{"name":"TopMenuPosition","docStart":3356,"docEnd":3409,"docs":{"brief":"Top menu starting positions for display.","tags":[{"tag":"","text":"Top menu starting positions for display."}]},"entries":[{"name":"TopMenuPosition_Start","docStart":3473,"docEnd":3503,"docs":null},{"name":"TopMenuPosition_LastRoot","docStart":3542,"docEnd":3580,"docs":null},{"name":"TopMenuPosition_LastCategory","docStart":3619,"docEnd":3663,"docs":null}]},{"name":"TopMenuObject","docStart":3671,"docEnd":3722,"docs":{"brief":"Top menu topobj tag for type checking.","tags":[{"tag":"","text":"Top menu topobj tag for type checking."}]},"entries":[{"name":"INVALID_TOPMENUOBJECT","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[],"typedefs":[{"name":"TopMenuHandler","docStart":3781,"docEnd":4131,"docs":{"brief":"TopMenu callback prototype.","tags":[{"tag":"","text":"TopMenu callback prototype."},{"tag":"param:topmenu","text":"TopMenu callback prototype.\nHandle to the TopMenu."},{"tag":"param:action","text":"TopMenu callback prototype.\nHandle to the TopMenu.TopMenuAction being performed."},{"tag":"param:topobj_id","text":"TopMenu callback prototype.\nHandle to the TopMenu.TopMenuAction being performed.The topobj ID (if used)."},{"tag":"param:param","text":"TopMenu callback prototype.\nHandle to the TopMenu.TopMenuAction being performed.The topobj ID (if used).Extra parameter (if used)."},{"tag":"param:buffer","text":"TopMenu callback prototype.\nHandle to the TopMenu.TopMenuAction being performed.The topobj ID (if used).Extra parameter (if used).Output buffer (if used)."},{"tag":"param:maxlength","text":"TopMenu callback prototype.\nHandle to the TopMenu.TopMenuAction being performed.The topobj ID (if used).Extra parameter (if used).Output buffer (if used).Output buffer (if used)."}]},"type":"function void(TopMenu topmenu, TopMenuAction action, TopMenuObject topobj_id, int param, char[] buffer, int maxlength)"}]}