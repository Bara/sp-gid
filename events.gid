{"functions":[{"name":"HookEvent","docStart":6975,"docEnd":7286,"docs":{"brief":"Creates a hook for when a game event is fired.","tags":[{"tag":"","text":"Creates a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"error","text":"Invalid event name or invalid callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"EventHook","name":"callback","decl":"EventHook callback"},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode"}]},{"name":"HookEventEx","docStart":7392,"docEnd":7773,"docs":{"brief":"Creates a hook for when a game event is fired.","tags":[{"tag":"","text":"Creates a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"return","text":"True if event exists and was hooked successfully, false otherwise."},{"tag":"error","text":"Invalid callback function."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"EventHook","name":"callback","decl":"EventHook callback"},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode"}]},{"name":"UnhookEvent","docStart":7881,"docEnd":8208,"docs":{"brief":"Removes a hook for when a game event is fired.","tags":[{"tag":"","text":"Removes a hook for when a game event is fired."},{"tag":"param:name","text":"Name of event."},{"tag":"param:callback","text":"An EventHook function pointer."},{"tag":"param:mode","text":"Optional EventHookMode determining the type of hook."},{"tag":"error","text":"Invalid callback function or no active hook for specified event."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"EventHook","name":"callback","decl":"EventHook callback"},{"type":"EventHookMode","name":"mode","decl":"EventHookMode mode"}]},{"name":"CreateEvent","docStart":8316,"docEnd":8900,"docs":{"brief":"Creates a game event to be fired later.\n\nThe Handle should not be closed via CloseHandle().  It must be closed via\nevent.Fire() or event.Cancel().","tags":[{"tag":"","text":"Creates a game event to be fired later.\n\nThe Handle should not be closed via CloseHandle().  It must be closed via\nevent.Fire() or event.Cancel()."},{"tag":"param:name","text":"Name of event."},{"tag":"param:force","text":"If set to true, this forces the event to be created even if it's not being hooked.\nNote that this will not force it if the event doesn't exist at all."},{"tag":"return","text":"Handle to event. INVALID_HANDLE is returned if the event doesn't exist or isn't\nbeing hooked (unless force is true)."}]},"kind":"native","returnType":"Event","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"bool","name":"force","decl":"bool force"}]},{"name":"FireEvent","docStart":8968,"docEnd":9265,"docs":{"brief":"Fires a game event.\n\nThis function closes the event Handle after completing.","tags":[{"tag":"","text":"Fires a game event.\n\nThis function closes the event Handle after completing."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:dontBroadcast","text":"Optional boolean that determines if event should be broadcast to clients."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast"}]},{"name":"CancelCreatedEvent","docStart":9333,"docEnd":9513,"docs":{"brief":"Cancels a previously created game event that has not been fired.","tags":[{"tag":"","text":"Cancels a previously created game event that has not been fired."},{"tag":"param:event","text":"Handled to the event."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"}]},{"name":"GetEventBool","docStart":9564,"docEnd":9922,"docs":{"brief":"Returns the boolean value of a game event's key.","tags":[{"tag":"","text":"Returns the boolean value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The boolean value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"bool","name":"defValue","decl":"bool defValue"}]},{"name":"SetEventBool","docStart":10006,"docEnd":10254,"docs":{"brief":"Sets the boolean value of a game event's key.","tags":[{"tag":"","text":"Sets the boolean value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New boolean value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"bool","name":"value","decl":"bool value"}]},{"name":"GetEventInt","docStart":10329,"docEnd":10687,"docs":{"brief":"Returns the integer value of a game event's key.","tags":[{"tag":"","text":"Returns the integer value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The integer value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"int","name":"defValue","decl":"int defValue"}]},{"name":"SetEventInt","docStart":10764,"docEnd":11266,"docs":{"brief":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable).","tags":[{"tag":"","text":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable)."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New integer value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"int","name":"value","decl":"int value"}]},{"name":"GetEventFloat","docStart":11339,"docEnd":11711,"docs":{"brief":"Returns the floating point value of a game event's key.","tags":[{"tag":"","text":"Returns the floating point value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The floating point value of the specified event key."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"float","name":"defValue","decl":"float defValue"}]},{"name":"SetEventFloat","docStart":11796,"docEnd":12058,"docs":{"brief":"Sets the floating point value of a game event's key.","tags":[{"tag":"","text":"Sets the floating point value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New floating point value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"float","name":"value","decl":"float value"}]},{"name":"GetEventString","docStart":12135,"docEnd":12560,"docs":{"brief":"Retrieves the string value of a game event's key.","tags":[{"tag":"","text":"Retrieves the string value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"Buffer to store the value of the specified event key."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue"}]},{"name":"SetEventString","docStart":12680,"docEnd":12926,"docs":{"brief":"Sets the string value of a game event's key.","tags":[{"tag":"","text":"Sets the string value of a game event's key."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New string value."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"GetEventName","docStart":13011,"docEnd":13288,"docs":{"brief":"Retrieves the name of a game event.","tags":[{"tag":"","text":"Retrieves the name of a game event."},{"tag":"param:event","text":"Handle to the event."},{"tag":"param:name","text":"Buffer to store the name of the event."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SetEventBroadcast","docStart":13361,"docEnd":13719,"docs":{"brief":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks.","tags":[{"tag":"","text":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks."},{"tag":"param:event","text":"Handle to an event from an event hook."},{"tag":"param:dontBroadcast","text":"True to disable broadcasting, false otherwise."},{"tag":"error","text":"Invalid Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"event","decl":"Handle event"},{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast"}]}],"methodmaps":[{"name":"Event","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"Fire","docStart":3276,"docEnd":3469,"docs":{"brief":"Fires a game event.\n\nThis function closes the event Handle after completing.","tags":[{"tag":"","text":"Fires a game event.\n\nThis function closes the event Handle after completing."},{"tag":"param:dontBroadcast","text":"Optional boolean that determines if event should be broadcast to clients"}]},"kind":null,"returnType":"void","arguments":[{"type":"bool","name":"dontBroadcast","decl":"bool dontBroadcast"}]},{"name":"FireToClient","docStart":3528,"docEnd":3719,"docs":{"brief":"Fires a game event to only the specified client.\n\nUnlike Fire, this function DOES NOT close the event Handle.","tags":[{"tag":"","text":"Fires a game event to only the specified client.\n\nUnlike Fire, this function DOES NOT close the event Handle."},{"tag":"param:client","text":"Index of client to receive the event."}]},"kind":null,"returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Cancel","docStart":3771,"docEnd":3912,"docs":{"brief":"Cancels a previously created game event that has not been fired. This\nis necessary to avoid leaking memory when an event isn't fired","tags":[{"tag":"","text":"Cancels a previously created game event that has not been fired. This\nis necessary to avoid leaking memory when an event isn't fired"}]},"kind":null,"returnType":"void","arguments":[]},{"name":"GetBool","docStart":3948,"docEnd":4199,"docs":{"brief":"Returns the boolean value of a game event's key.","tags":[{"tag":"","text":"Returns the boolean value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The boolean value of the specified event key"}]},"kind":null,"returnType":"bool","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"bool","name":"defValue","decl":"bool defValue"}]},{"name":"SetBool","docStart":4273,"docEnd":4414,"docs":{"brief":"Sets the boolean value of a game event's key.","tags":[{"tag":"","text":"Sets the boolean value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New boolean value"}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"bool","name":"value","decl":"bool value"}]},{"name":"GetInt","docStart":4479,"docEnd":4730,"docs":{"brief":"Returns the integer value of a game event's key.","tags":[{"tag":"","text":"Returns the integer value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The integer value of the specified event key"}]},"kind":null,"returnType":"int","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"int","name":"defValue","decl":"int defValue"}]},{"name":"SetInt","docStart":4797,"docEnd":5197,"docs":{"brief":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable).","tags":[{"tag":"","text":"Sets the integer value of a game event's key.\n\nInteger value refers to anything that can be reduced to an integer.\nThe various size specifiers, such as \"byte\" and \"short\" are still\nintegers, and only refer to how much data will actually be sent\nover the network (if applicable)."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New integer value"}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"int","name":"value","decl":"int value"}]},{"name":"GetFloat","docStart":5260,"docEnd":5525,"docs":{"brief":"Returns the floating point value of a game event's key.","tags":[{"tag":"","text":"Returns the floating point value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found."},{"tag":"return","text":"The floating point value of the specified event key"}]},"kind":null,"returnType":"float","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"float","name":"defValue","decl":"float defValue"}]},{"name":"SetFloat","docStart":5600,"docEnd":5755,"docs":{"brief":"Sets the floating point value of a game event's key.","tags":[{"tag":"","text":"Sets the floating point value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New floating point value"}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"float","name":"value","decl":"float value"}]},{"name":"GetString","docStart":5822,"docEnd":6140,"docs":{"brief":"Retrieves the string value of a game event's key.","tags":[{"tag":"","text":"Retrieves the string value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"Buffer to store the value of the specified event key."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"param:defValue","text":"Optional default value to use if the key is not found"}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"},{"type":"const char[]","name":"defvalue","decl":"const char[] defvalue"}]},{"name":"SetString","docStart":6250,"docEnd":6389,"docs":{"brief":"Sets the string value of a game event's key.","tags":[{"tag":"","text":"Sets the string value of a game event's key."},{"tag":"param:key","text":"Name of event key."},{"tag":"param:value","text":"New string value"}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"GetName","docStart":6464,"docEnd":6629,"docs":{"brief":"Retrieves the name of a game event.","tags":[{"tag":"","text":"Retrieves the name of a game event."},{"tag":"param:name","text":"Buffer to store the name of the event."},{"tag":"param:maxlength","text":"Maximum length of string buffer"}]},"kind":null,"returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]}],"properties":[{"name":"BroadcastDisabled","docStart":6692,"docEnd":6862,"docs":{"brief":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks","tags":[{"tag":"","text":"Sets whether an event's broadcasting will be disabled or not.\n\nThis has no effect on events Handles that are not from HookEvent\nor HookEventEx callbacks"}]},"type":"bool","getter":true,"setter":true}]}],"constants":[],"enums":[{"name":"EventHookMode","docStart":1655,"docEnd":1726,"docs":{"brief":"Event hook modes determining how hooking should be handled","tags":[{"tag":"","text":"Event hook modes determining how hooking should be handled"}]},"entries":[{"name":"EventHookMode_Pre","docStart":1788,"docEnd":1836,"docs":null},{"name":"EventHookMode_Post","docStart":1875,"docEnd":1922,"docs":null},{"name":"EventHookMode_PostNoCopy","docStart":1961,"docEnd":2040,"docs":null}]}],"typesets":[{"name":"EventHook","docStart":2048,"docEnd":2092,"docs":{"brief":"Hook function types for events.","tags":[{"tag":"","text":"Hook function types for events."}]},"types":[{"type":"function Action(Event event, const char[] name, bool dontBroadcast)","docStart":2117,"docEnd":2701,"docs":{"brief":"Called when a game event is fired.","tags":[{"tag":"","text":"Called when a game event is fired."},{"tag":"param:event","text":"Handle to event. This could be INVALID_HANDLE if every plugin hooking\nthis event has set the hook mode EventHookMode_PostNoCopy."},{"tag":"param:name","text":"String containing the name of the event."},{"tag":"param:dontBroadcast","text":"True if event was not broadcast to clients, false otherwise.\nMay not correspond to the real value. Use the property BroadcastDisabled."},{"tag":"return","text":"Ignored for post hooks. Plugin_Handled will block event if hooked as pre."}]}},{"type":"function void(Event event, const char[] name, bool dontBroadcast)","docStart":2779,"docEnd":3168,"docs":{"brief":"Called when a game event is fired.","tags":[{"tag":"","text":"Called when a game event is fired."},{"tag":"param:event","text":"Handle to event. This could be INVALID_HANDLE if every plugin hooking\nthis event has set the hook mode EventHookMode_PostNoCopy."},{"tag":"param:name","text":"String containing the name of the event."},{"tag":"param:dontBroadcast","text":"True if event was not broadcast to clients, false otherwise."}]}}]}],"typedefs":[]}