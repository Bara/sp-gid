¶ifunctionsêødnameiHookEventhdocStart?fdocEndvddocs¢ebriefx.Creates a hook for when a game event is fired.dtagsÖ¢ctag`dtextx.Creates a hook for when a game event is fired.¢ctagjparam:namedtextx?Creates a hook for when a game event is fired. 
 Name of event.¢ctagnparam:callbackdtextx^Creates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer.¢ctagjparam:modedtextxìCreates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook.¢ctageerrordtextxƒCreates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook. Invalid event name or invalid callback function.dkindfnativejreturnTypedvoidiargumentsÉ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypeiEventHookdnamehcallbackddeclrEventHook callback£dtypemEventHookModednamedmodeddeclrEventHookMode modeˇødnamekHookEventExhdocStart‡fdocEnd]ddocs¢ebriefx.Creates a hook for when a game event is fired.dtagsÜ¢ctag`dtextx.Creates a hook for when a game event is fired.¢ctagjparam:namedtextx?Creates a hook for when a game event is fired. 
 Name of event.¢ctagnparam:callbackdtextx^Creates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer.¢ctagjparam:modedtextxìCreates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook.¢ctagfreturndtextx÷Creates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook. True if event exists and was hooked successfully, false otherwise.¢ctageerrordtextxÒCreates a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook. True if event exists and was hooked successfully, false otherwise. Invalid callback function.dkindfnativejreturnTypedbooliargumentsÉ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypeiEventHookdnamehcallbackddeclrEventHook callback£dtypemEventHookModednamedmodeddeclrEventHookMode modeˇødnamekUnhookEventhdocStart…fdocEnd ddocs¢ebriefx.Removes a hook for when a game event is fired.dtagsÖ¢ctag`dtextx.Removes a hook for when a game event is fired.¢ctagjparam:namedtextx?Removes a hook for when a game event is fired. 
 Name of event.¢ctagnparam:callbackdtextx^Removes a hook for when a game event is fired. 
 Name of event. An EventHook function pointer.¢ctagjparam:modedtextxìRemoves a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook.¢ctageerrordtextx‘Removes a hook for when a game event is fired. 
 Name of event. An EventHook function pointer. Optional EventHookMode determining the type of hook. Invalid callback function or no active hook for specified event.dkindfnativejreturnTypedvoidiargumentsÉ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypeiEventHookdnamehcallbackddeclrEventHook callback£dtypemEventHookModednamedmodeddeclrEventHookMode modeˇødnamekCreateEventhdocStart |fdocEnd"ƒddocs¢ebriefxìCreates a game event to be fired later. 
 The Handle should not be closed via CloseHandle().  It must be closed via event.Fire() or event.Cancel().dtagsÑ¢ctag`dtextxìCreates a game event to be fired later. 
 The Handle should not be closed via CloseHandle().  It must be closed via event.Fire() or event.Cancel().¢ctagjparam:namedtextx§Creates a game event to be fired later. 
 The Handle should not be closed via CloseHandle().  It must be closed via event.Fire() or event.Cancel(). 
 Name of event.¢ctagkparam:forcedtexty;Creates a game event to be fired later. 
 The Handle should not be closed via CloseHandle().  It must be closed via event.Fire() or event.Cancel(). 
 Name of event. If set to true, this forces the event to be created even if it's not being hooked. Note that this will not force it if the event doesn't exist at all.¢ctagfreturndtexty∞Creates a game event to be fired later. 
 The Handle should not be closed via CloseHandle().  It must be closed via event.Fire() or event.Cancel(). 
 Name of event. If set to true, this forces the event to be created even if it's not being hooked. Note that this will not force it if the event doesn't exist at all. Handle to event. INVALID_HANDLE is returned if the event doesn't exist or isn't being hooked (unless force is true).dkindfnativejreturnTypeeEventiargumentsÇ£dtypelconst char[]dnamednameddeclqconst char[] name£dtypedbooldnameeforceddecljbool forceˇødnameiFireEventhdocStart#fdocEnd$1ddocs¢ebriefxMFires a game event. 
 This function closes the event Handle after completing.dtagsÑ¢ctag`dtextxMFires a game event. 
 This function closes the event Handle after completing.¢ctagkparam:eventdtextxdFires a game event. 
 This function closes the event Handle after completing. 
 Handle to the event.¢ctagsparam:dontBroadcastdtextxÆFires a game event. 
 This function closes the event Handle after completing. 
 Handle to the event. Optional boolean that determines if event should be broadcast to clients.¢ctageerrordtextx…Fires a game event. 
 This function closes the event Handle after completing. 
 Handle to the event. Optional boolean that determines if event should be broadcast to clients. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednameeeventddecllHandle event£dtypedbooldnamemdontBroadcastddeclrbool dontBroadcastˇødnamerCancelCreatedEventhdocStart$ufdocEnd%)ddocs¢ebriefx@Cancels a previously created game event that has not been fired.dtagsÉ¢ctag`dtextx@Cancels a previously created game event that has not been fired.¢ctagkparam:eventdtextxXCancels a previously created game event that has not been fired. 
 Handled to the event.¢ctageerrordtextxsCancels a previously created game event that has not been fired. 
 Handled to the event. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÅ£dtypefHandlednameeeventddecllHandle eventˇødnamelGetEventBoolhdocStart%\fdocEnd&¬ddocs¢ebriefx0Returns the boolean value of a game event's key.dtagsÜ¢ctag`dtextx0Returns the boolean value of a game event's key.¢ctagkparam:eventdtextxGReturns the boolean value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextxZReturns the boolean value of a game event's key. 
 Handle to the event. Name of event key.¢ctagnparam:defValuedtextxëReturns the boolean value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextxøReturns the boolean value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The boolean value of the specified event key.¢ctageerrordtextx⁄Returns the boolean value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The boolean value of the specified event key. Invalid or corrupt Handle.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypedbooldnamehdefValueddeclmbool defValueˇødnamelSetEventBoolhdocStart'fdocEnd(ddocs¢ebriefx-Sets the boolean value of a game event's key.dtagsÖ¢ctag`dtextx-Sets the boolean value of a game event's key.¢ctagkparam:eventdtextxDSets the boolean value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextxWSets the boolean value of a game event's key. 
 Handle to the event. Name of event key.¢ctagkparam:valuedtextxjSets the boolean value of a game event's key. 
 Handle to the event. Name of event key. New boolean value.¢ctageerrordtextxÖSets the boolean value of a game event's key. 
 Handle to the event. Name of event key. New boolean value. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypedbooldnameevalueddecljbool valueˇødnamekGetEventInthdocStart(YfdocEnd)øddocs¢ebriefx0Returns the integer value of a game event's key.dtagsÜ¢ctag`dtextx0Returns the integer value of a game event's key.¢ctagkparam:eventdtextxGReturns the integer value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextxZReturns the integer value of a game event's key. 
 Handle to the event. Name of event key.¢ctagnparam:defValuedtextxëReturns the integer value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextxøReturns the integer value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The integer value of the specified event key.¢ctageerrordtextx⁄Returns the integer value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The integer value of the specified event key. Invalid or corrupt Handle.dkindfnativejreturnTypecintiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypecintdnamehdefValueddecllint defValueˇødnamekSetEventInthdocStart*fdocEnd,ddocs¢ebriefySets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable).dtagsÖ¢ctag`dtextySets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable).¢ctagkparam:eventdtexty.Sets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Handle to the event.¢ctagiparam:keydtextyASets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Handle to the event. Name of event key.¢ctagkparam:valuedtextyTSets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Handle to the event. Name of event key. New integer value.¢ctageerrordtextyoSets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Handle to the event. Name of event key. New integer value. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypecintdnameevalueddecliint valueˇødnamemGetEventFloathdocStart,KfdocEnd-øddocs¢ebriefx7Returns the floating point value of a game event's key.dtagsÜ¢ctag`dtextx7Returns the floating point value of a game event's key.¢ctagkparam:eventdtextxNReturns the floating point value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextxaReturns the floating point value of a game event's key. 
 Handle to the event. Name of event key.¢ctagnparam:defValuedtextxòReturns the floating point value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextxÕReturns the floating point value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The floating point value of the specified event key.¢ctageerrordtextxËReturns the floating point value of a game event's key. 
 Handle to the event. Name of event key. Optional default value to use if the key is not found. The floating point value of the specified event key. Invalid or corrupt Handle.dkindfnativejreturnTypeefloatiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypeefloatdnamehdefValueddeclnfloat defValueˇødnamemSetEventFloathdocStart.fdocEnd/ddocs¢ebriefx4Sets the floating point value of a game event's key.dtagsÖ¢ctag`dtextx4Sets the floating point value of a game event's key.¢ctagkparam:eventdtextxKSets the floating point value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextx^Sets the floating point value of a game event's key. 
 Handle to the event. Name of event key.¢ctagkparam:valuedtextxxSets the floating point value of a game event's key. 
 Handle to the event. Name of event key. New floating point value.¢ctageerrordtextxìSets the floating point value of a game event's key. 
 Handle to the event. Name of event key. New floating point value. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypeefloatdnameevalueddeclkfloat valueˇødnamenGetEventStringhdocStart/gfdocEnd1ddocs¢ebriefx1Retrieves the string value of a game event's key.dtagsá¢ctag`dtextx1Retrieves the string value of a game event's key.¢ctagkparam:eventdtextxHRetrieves the string value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextx[Retrieves the string value of a game event's key. 
 Handle to the event. Name of event key.¢ctagkparam:valuedtextxëRetrieves the string value of a game event's key. 
 Handle to the event. Name of event key. Buffer to store the value of the specified event key.¢ctagoparam:maxlengthdtextx≤Retrieves the string value of a game event's key. 
 Handle to the event. Name of event key. Buffer to store the value of the specified event key. Maximum length of string buffer.¢ctagnparam:defValuedtextxÈRetrieves the string value of a game event's key. 
 Handle to the event. Name of event key. Buffer to store the value of the specified event key. Maximum length of string buffer. Optional default value to use if the key is not found.¢ctageerrordtextyRetrieves the string value of a game event's key. 
 Handle to the event. Name of event key. Buffer to store the value of the specified event key. Maximum length of string buffer. Optional default value to use if the key is not found. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÖ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypefchar[]dnameevalueddecllchar[] value£dtypecintdnameimaxlengthddeclmint maxlength£dtypelconst char[]dnamehdefvalueddecluconst char[] defvalueˇødnamenSetEventStringhdocStart1àfdocEnd2~ddocs¢ebriefx,Sets the string value of a game event's key.dtagsÖ¢ctag`dtextx,Sets the string value of a game event's key.¢ctagkparam:eventdtextxCSets the string value of a game event's key. 
 Handle to the event.¢ctagiparam:keydtextxVSets the string value of a game event's key. 
 Handle to the event. Name of event key.¢ctagkparam:valuedtextxhSets the string value of a game event's key. 
 Handle to the event. Name of event key. New string value.¢ctageerrordtextxÉSets the string value of a game event's key. 
 Handle to the event. Name of event key. New string value. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnamelGetEventNamehdocStart2”fdocEnd3Ëddocs¢ebriefx#Retrieves the name of a game event.dtagsÖ¢ctag`dtextx#Retrieves the name of a game event.¢ctagkparam:eventdtextx:Retrieves the name of a game event. 
 Handle to the event.¢ctagjparam:namedtextxaRetrieves the name of a game event. 
 Handle to the event. Buffer to store the name of the event.¢ctagoparam:maxlengthdtextxÇRetrieves the name of a game event. 
 Handle to the event. Buffer to store the name of the event. Maximum length of string buffer.¢ctageerrordtextxùRetrieves the name of a game event. 
 Handle to the event. Buffer to store the name of the event. Maximum length of string buffer. Invalid or corrupt Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameeeventddecllHandle event£dtypefchar[]dnamednameddeclkchar[] name£dtypecintdnameimaxlengthddeclmint maxlengthˇødnameqSetEventBroadcasthdocStart41fdocEnd5óddocs¢ebriefxöSets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks.dtagsÑ¢ctag`dtextxöSets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks.¢ctagkparam:eventdtextx√Sets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks. 
 Handle to an event from an event hook.¢ctagsparam:dontBroadcastdtextxÚSets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks. 
 Handle to an event from an event hook. True to disable broadcasting, false otherwise.¢ctageerrordtextySets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacks. 
 Handle to an event from an event hook. True to disable broadcasting, false otherwise. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednameeeventddecllHandle event£dtypedbooldnamemdontBroadcastddeclrbool dontBroadcastˇjmethodmapsÅødnameeEventhdocStart fdocEnd ddocsˆgmethodsåødnamedFirehdocStartÃfdocEndçddocs¢ebriefxMFires a game event. 
 This function closes the event Handle after completing.dtagsÇ¢ctag`dtextxMFires a game event. 
 This function closes the event Handle after completing.¢ctagsparam:dontBroadcastdtextxòFires a game event. 
 This function closes the event Handle after completing. 
 Optional boolean that determines if event should be broadcast to clientsdkindˆjreturnTypedvoidiargumentsÅ£dtypedbooldnamemdontBroadcastddeclrbool dontBroadcastˇødnamelFireToClienthdocStart»fdocEndáddocs¢ebriefxnFires a game event to only the specified client. 
 Unlike Fire, this function DOES NOT close the event Handle.dtagsÇ¢ctag`dtextxnFires a game event to only the specified client. 
 Unlike Fire, this function DOES NOT close the event Handle.¢ctaglparam:clientdtextxñFires a game event to only the specified client. 
 Unlike Fire, this function DOES NOT close the event Handle. 
 Index of client to receive the event.dkindˆjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamefCancelhdocStartªfdocEndHddocs¢ebriefxÑCancels a previously created game event that has not been fired. This is necessary to avoid leaking memory when an event isn't fireddtagsÅ¢ctag`dtextxÑCancels a previously created game event that has not been fired. This is necessary to avoid leaking memory when an event isn't fireddkindˆjreturnTypedvoidiargumentsÄˇødnamegGetBoolhdocStartlfdocEndgddocs¢ebriefx0Returns the boolean value of a game event's key.dtagsÑ¢ctag`dtextx0Returns the boolean value of a game event's key.¢ctagiparam:keydtextxEReturns the boolean value of a game event's key. 
 Name of event key.¢ctagnparam:defValuedtextx|Returns the boolean value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextx©Returns the boolean value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found. The boolean value of the specified event keydkindˆjreturnTypedbooliargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypedbooldnamehdefValueddeclmbool defValueˇødnamegSetBoolhdocStart±fdocEnd>ddocs¢ebriefx-Sets the boolean value of a game event's key.dtagsÉ¢ctag`dtextx-Sets the boolean value of a game event's key.¢ctagiparam:keydtextxBSets the boolean value of a game event's key. 
 Name of event key.¢ctagkparam:valuedtextxTSets the boolean value of a game event's key. 
 Name of event key. New boolean valuedkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypedbooldnameevalueddecljbool valueˇødnamefGetInthdocStartfdocEndzddocs¢ebriefx0Returns the integer value of a game event's key.dtagsÑ¢ctag`dtextx0Returns the integer value of a game event's key.¢ctagiparam:keydtextxEReturns the integer value of a game event's key. 
 Name of event key.¢ctagnparam:defValuedtextx|Returns the integer value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextx©Returns the integer value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found. The integer value of the specified event keydkindˆjreturnTypecintiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypecintdnamehdefValueddecllint defValueˇødnamefSetInthdocStartΩfdocEndMddocs¢ebriefySets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable).dtagsÉ¢ctag`dtextySets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable).¢ctagiparam:keydtexty,Sets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Name of event key.¢ctagkparam:valuedtexty>Sets the integer value of a game event's key. 
 Integer value refers to anything that can be reduced to an integer. The various size specifiers, such as "byte" and "short" are still integers, and only refer to how much data will actually be sent over the network (if applicable). 
 Name of event key. New integer valuedkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypecintdnameevalueddecliint valueˇødnamehGetFloathdocStartåfdocEndïddocs¢ebriefx7Returns the floating point value of a game event's key.dtagsÑ¢ctag`dtextx7Returns the floating point value of a game event's key.¢ctagiparam:keydtextxLReturns the floating point value of a game event's key. 
 Name of event key.¢ctagnparam:defValuedtextxÉReturns the floating point value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found.¢ctagfreturndtextx∑Returns the floating point value of a game event's key. 
 Name of event key. Optional default value to use if the key is not found. The floating point value of the specified event keydkindˆjreturnTypeefloatiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypeefloatdnamehdefValueddeclnfloat defValueˇødnamehSetFloathdocStart‡fdocEnd{ddocs¢ebriefx4Sets the floating point value of a game event's key.dtagsÉ¢ctag`dtextx4Sets the floating point value of a game event's key.¢ctagiparam:keydtextxISets the floating point value of a game event's key. 
 Name of event key.¢ctagkparam:valuedtextxbSets the floating point value of a game event's key. 
 Name of event key. New floating point valuedkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypeefloatdnameevalueddeclkfloat valueˇødnameiGetStringhdocStartæfdocEnd¸ddocs¢ebriefx1Retrieves the string value of a game event's key.dtagsÖ¢ctag`dtextx1Retrieves the string value of a game event's key.¢ctagiparam:keydtextxFRetrieves the string value of a game event's key. 
 Name of event key.¢ctagkparam:valuedtextx|Retrieves the string value of a game event's key. 
 Name of event key. Buffer to store the value of the specified event key.¢ctagoparam:maxlengthdtextxùRetrieves the string value of a game event's key. 
 Name of event key. Buffer to store the value of the specified event key. Maximum length of string buffer.¢ctagnparam:defValuedtextx”Retrieves the string value of a game event's key. 
 Name of event key. Buffer to store the value of the specified event key. Maximum length of string buffer. Optional default value to use if the key is not founddkindˆjreturnTypedvoidiargumentsÑ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypefchar[]dnameevalueddecllchar[] value£dtypecintdnameimaxlengthddeclmint maxlength£dtypelconst char[]dnamehdefvalueddecluconst char[] defvalueˇødnameiSetStringhdocStartjfdocEndıddocs¢ebriefx,Sets the string value of a game event's key.dtagsÉ¢ctag`dtextx,Sets the string value of a game event's key.¢ctagiparam:keydtextxASets the string value of a game event's key. 
 Name of event key.¢ctagkparam:valuedtextxRSets the string value of a game event's key. 
 Name of event key. New string valuedkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnamegGetNamehdocStart@fdocEndÂddocs¢ebriefx#Retrieves the name of a game event.dtagsÉ¢ctag`dtextx#Retrieves the name of a game event.¢ctagjparam:namedtextxLRetrieves the name of a game event. 
 Buffer to store the name of the event.¢ctagoparam:maxlengthdtextxlRetrieves the name of a game event. 
 Buffer to store the name of the event. Maximum length of string bufferdkindˆjreturnTypedvoidiargumentsÇ£dtypefchar[]dnamednameddeclkchar[] name£dtypecintdnameimaxlengthddeclmint maxlengthˇjpropertiesÅødnameqBroadcastDisabledhdocStart$fdocEndŒddocs¢ebriefxôSets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacksdtagsÅ¢ctag`dtextxôSets whether an event's broadcasting will be disabled or not. 
 This has no effect on events Handles that are not from HookEvent or HookEventEx callbacksdtypedboolfgetterıfsetterıˇˇiconstantsÄeenumsÅødnamemEventHookModehdocStartwfdocEndæddocs¢ebriefx:Event hook modes determining how hooking should be handleddtagsÅ¢ctag`dtextx:Event hook modes determining how hooking should be handledgentriesÉødnameqEventHookMode_PrehdocStart¸fdocEnd,ddocsˆˇødnamerEventHookMode_PosthdocStartSfdocEndÇddocsˆˇødnamexEventHookMode_PostNoCopyhdocStart©fdocEnd¯ddocsˆˇˇhtypesetsÅødnameiEventHookhdocStart fdocEnd,ddocs¢ebriefxHook function types for events.dtagsÅ¢ctag`dtextxHook function types for events.etypesÇødtypexCfunction Action(Event event, const char[] name, bool dontBroadcast)hdocStartEfdocEnd
çddocs¢ebriefx"Called when a game event is fired.dtagsÖ¢ctag`dtextx"Called when a game event is fired.¢ctagkparam:eventdtextx•Called when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy.¢ctagjparam:namedtextxŒCalled when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy. String containing the name of the event.¢ctagsparam:dontBroadcastdtextyUCalled when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy. String containing the name of the event. True if event was not broadcast to clients, false otherwise. May not correspond to the real value. Use the property BroadcastDisabled.¢ctagfreturndtextyüCalled when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy. String containing the name of the event. True if event was not broadcast to clients, false otherwise. May not correspond to the real value. Use the property BroadcastDisabled. Ignored for post hooks. Plugin_Handled will block event if hooked as pre.ˇødtypexAfunction void(Event event, const char[] name, bool dontBroadcast)hdocStart
€fdocEnd`ddocs¢ebriefx"Called when a game event is fired.dtagsÑ¢ctag`dtextx"Called when a game event is fired.¢ctagkparam:eventdtextx•Called when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy.¢ctagjparam:namedtextxŒCalled when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy. String containing the name of the event.¢ctagsparam:dontBroadcastdtextyCalled when a game event is fired. 
 Handle to event. This could be INVALID_HANDLE if every plugin hooking this event has set the hook mode EventHookMode_PostNoCopy. String containing the name of the event. True if event was not broadcast to clients, false otherwise.ˇˇhtypedefsÄ