{"functions":[{"name":"OnBanClient","docStart":1972,"docEnd":2700,"docs":{"brief":"Called for calls to BanClient() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to BanClient() with a non-empty command."},{"tag":"param:client","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned."},{"tag":"param:time","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent)."},{"tag":"param:flags","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use."},{"tag":"param:reason","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use.Reason passed via BanClient()."},{"tag":"param:kick_message","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use.Reason passed via BanClient().Kick message passed via BanClient()."},{"tag":"param:command","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use.Reason passed via BanClient().Kick message passed via BanClient().Command string to identify the ban source."},{"tag":"param:source","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use.Reason passed via BanClient().Kick message passed via BanClient().Command string to identify the ban source.Source value passed via BanClient()."},{"tag":"return","text":"Called for calls to BanClient() with a non-empty command.\nClient being banned.Time the client is being banned for (0 = permanent).One if AUTHID or IP will be enabled.  If AUTO is alsoenabled, it means Core autodetected which to use.Reason passed via BanClient().Kick message passed via BanClient().Command string to identify the ban source.Source value passed via BanClient().Plugin_Handled to block the actual server banning.Kicking will still occur."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"time","decl":"int time"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"reason","decl":"const char[] reason"},{"type":"const char[]","name":"kick_message","decl":"const char[] kick_message"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]},{"name":"OnBanIdentity","docStart":2912,"docEnd":3477,"docs":{"brief":"Called for calls to BanIdentity() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to BanIdentity() with a non-empty command."},{"tag":"param:identity","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip)."},{"tag":"param:time","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent)."},{"tag":"param:flags","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent).Ban flags (only IP or AUTHID are valid here)."},{"tag":"param:reason","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent).Ban flags (only IP or AUTHID are valid here).Reason passed via BanIdentity()."},{"tag":"param:command","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent).Ban flags (only IP or AUTHID are valid here).Reason passed via BanIdentity().Command string to identify the ban source."},{"tag":"param:source","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent).Ban flags (only IP or AUTHID are valid here).Reason passed via BanIdentity().Command string to identify the ban source.Source value passed via BanIdentity()."},{"tag":"return","text":"Called for calls to BanIdentity() with a non-empty command.\nIdentity string being banned (authstring or ip).Time the client is being banned for (0 = permanent).Ban flags (only IP or AUTHID are valid here).Reason passed via BanIdentity().Command string to identify the ban source.Source value passed via BanIdentity().Plugin_Handled to block the actual server banning."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity"},{"type":"int","name":"time","decl":"int time"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"reason","decl":"const char[] reason"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]},{"name":"OnRemoveBan","docStart":3656,"docEnd":4078,"docs":{"brief":"Called for calls to RemoveBan() with a non-empty command.","tags":[{"tag":"","text":"Called for calls to RemoveBan() with a non-empty command."},{"tag":"param:identity","text":"Called for calls to RemoveBan() with a non-empty command.\nIdentity string being banned (authstring or ip)."},{"tag":"param:flags","text":"Called for calls to RemoveBan() with a non-empty command.\nIdentity string being banned (authstring or ip).Ban flags (only IP or AUTHID are valid here)."},{"tag":"param:command","text":"Called for calls to RemoveBan() with a non-empty command.\nIdentity string being banned (authstring or ip).Ban flags (only IP or AUTHID are valid here).Command string to identify the ban source."},{"tag":"param:source","text":"Called for calls to RemoveBan() with a non-empty command.\nIdentity string being banned (authstring or ip).Ban flags (only IP or AUTHID are valid here).Command string to identify the ban source.Source value passed via BanIdentity()."},{"tag":"return","text":"Called for calls to RemoveBan() with a non-empty command.\nIdentity string being banned (authstring or ip).Ban flags (only IP or AUTHID are valid here).Command string to identify the ban source.Source value passed via BanIdentity().Plugin_Handled to block the actual unbanning."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]},{"name":"BanClient","docStart":4209,"docEnd":5135,"docs":{"brief":"Bans a client.","tags":[{"tag":"","text":"Bans a client."},{"tag":"param:client","text":"Bans a client.\nClient being banned."},{"tag":"param:time","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent)."},{"tag":"param:flags","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged."},{"tag":"param:reason","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for."},{"tag":"param:kick_message","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for.Message to display to the user when kicking."},{"tag":"param:command","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for.Message to display to the user when kicking.Command string to identify the source.  If this is leftempty, then the OnBanClient forward will not be called."},{"tag":"param:source","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for.Message to display to the user when kicking.Command string to identify the source.  If this is leftempty, then the OnBanClient forward will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core)."},{"tag":"return","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for.Message to display to the user when kicking.Command string to identify the source.  If this is leftempty, then the OnBanClient forward will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core).True on success, false on failure."},{"tag":"error","text":"Bans a client.\nClient being banned.Time (in minutes) to ban (0 = permanent).Flags for controlling the ban mechanism.  If AUTHIDis set and no AUTHID is available, the ban will failunless AUTO is also flagged.Reason to ban the client for.Message to display to the user when kicking.Command string to identify the source.  If this is leftempty, then the OnBanClient forward will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core).True on success, false on failure.Invalid client index or client not in game."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"time","decl":"int time"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"reason","decl":"const char[] reason"},{"type":"const char[]","name":"kick_message","decl":"const char[] kick_message"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]},{"name":"BanIdentity","docStart":5339,"docEnd":6024,"docs":{"brief":"Bans an identity (either an IP address or auth string).","tags":[{"tag":"","text":"Bans an identity (either an IP address or auth string)."},{"tag":"param:identity","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring)."},{"tag":"param:time","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent)."},{"tag":"param:flags","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent).Flags (only IP and AUTHID are valid flags here)."},{"tag":"param:reason","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent).Flags (only IP and AUTHID are valid flags here).Ban reason string."},{"tag":"param:command","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent).Flags (only IP and AUTHID are valid flags here).Ban reason string.Command string to identify the source.  If this is leftempty, then the OnBanIdentity forward will not be called."},{"tag":"param:source","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent).Flags (only IP and AUTHID are valid flags here).Ban reason string.Command string to identify the source.  If this is leftempty, then the OnBanIdentity forward will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core)."},{"tag":"return","text":"Bans an identity (either an IP address or auth string).\nString to ban (ip or authstring).Time to ban for (0 = permanent).Flags (only IP and AUTHID are valid flags here).Ban reason string.Command string to identify the source.  If this is leftempty, then the OnBanIdentity forward will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core).True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity"},{"type":"int","name":"time","decl":"int time"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"reason","decl":"const char[] reason"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]},{"name":"RemoveBan","docStart":6196,"docEnd":6788,"docs":{"brief":"Removes a ban that was written to the server (either in memory or on disk).","tags":[{"tag":"","text":"Removes a ban that was written to the server (either in memory or on disk)."},{"tag":"param:identity","text":"Removes a ban that was written to the server (either in memory or on disk).\nString to unban (ip or authstring)."},{"tag":"param:flags","text":"Removes a ban that was written to the server (either in memory or on disk).\nString to unban (ip or authstring).Flags (only IP and AUTHID are valid flags here)."},{"tag":"param:command","text":"Removes a ban that was written to the server (either in memory or on disk).\nString to unban (ip or authstring).Flags (only IP and AUTHID are valid flags here).Command string to identify the source.  If this is leftempty, then OnRemoveBan will not be called."},{"tag":"param:source","text":"Removes a ban that was written to the server (either in memory or on disk).\nString to unban (ip or authstring).Flags (only IP and AUTHID are valid flags here).Command string to identify the source.  If this is leftempty, then OnRemoveBan will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core)."},{"tag":"return","text":"Removes a ban that was written to the server (either in memory or on disk).\nString to unban (ip or authstring).Flags (only IP and AUTHID are valid flags here).Command string to identify the source.  If this is leftempty, then OnRemoveBan will not be called.A source value that could be interpreted as a playerindex of any sort (not actually checked by Core).True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"identity","decl":"const char[] identity"},{"type":"int","name":"flags","decl":"int flags"},{"type":"const char[]","name":"command","decl":"const char[] command"},{"type":"any","name":"source","decl":"any source"}]}],"methodmaps":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}