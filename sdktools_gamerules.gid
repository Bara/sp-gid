{"functions":[{"name":"GameRules_GetProp","docStart":2543,"docEnd":3080,"docs":{"brief":"Retrieves an integer value from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves an integer value from a property of the gamerules entity."},{"tag":"param:prop","text":"Retrieves an integer value from a property of the gamerules entity. \n Property name."},{"tag":"param:size","text":"Retrieves an integer value from a property of the gamerules entity. \n Property name. Number of bytes to read (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails."},{"tag":"param:element","text":"Retrieves an integer value from a property of the gamerules entity. \n Property name. Number of bytes to read (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array."},{"tag":"return","text":"Retrieves an integer value from a property of the gamerules entity. \n Property name. Number of bytes to read (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array. Value at the given property offset."},{"tag":"error","text":"Retrieves an integer value from a property of the gamerules entity. \n Property name. Number of bytes to read (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array. Value at the given property offset. Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"int","name":"size","decl":"int size"},{"type":"int","name":"element","decl":"int element"}]},{"name":"GameRules_SetProp","docStart":3161,"docEnd":3723,"docs":{"brief":"Sets an integer value for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets an integer value for a property of the gamerules entity."},{"tag":"param:prop","text":"Sets an integer value for a property of the gamerules entity. \n Property name."},{"tag":"param:value","text":"Sets an integer value for a property of the gamerules entity. \n Property name. Value to set."},{"tag":"param:size","text":"Sets an integer value for a property of the gamerules entity. \n Property name. Value to set. Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails."},{"tag":"param:element","text":"Sets an integer value for a property of the gamerules entity. \n Property name. Value to set. Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"Sets an integer value for a property of the gamerules entity. \n Property name. Value to set. Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array. This parameter is ignored."},{"tag":"error","text":"Sets an integer value for a property of the gamerules entity. \n Property name. Value to set. Number of bytes to write (valid values are 1, 2, or 4). This value is auto-detected, and the size parameter is only used as a fallback in case detection fails. Element # (starting from 0) if property is an array. This parameter is ignored. Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"any","name":"value","decl":"any value"},{"type":"int","name":"size","decl":"int size"},{"type":"int","name":"element","decl":"int element"},{"type":"bool","name":"changeState","decl":"bool changeState"}]},{"name":"GameRules_GetPropFloat","docStart":3840,"docEnd":4140,"docs":{"brief":"Retrieves a float value from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves a float value from a property of the gamerules entity."},{"tag":"param:prop","text":"Retrieves a float value from a property of the gamerules entity. \n Property name."},{"tag":"param:element","text":"Retrieves a float value from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array."},{"tag":"return","text":"Retrieves a float value from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array. Value at the given property offset."},{"tag":"error","text":"Retrieves a float value from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array. Value at the given property offset. Not supported."}]},"kind":"native","returnType":"float","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"int","name":"element","decl":"int element"}]},{"name":"GameRules_SetPropFloat","docStart":4216,"docEnd":4540,"docs":{"brief":"Sets a float value for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets a float value for a property of the gamerules entity."},{"tag":"param:prop","text":"Sets a float value for a property of the gamerules entity. \n Property name."},{"tag":"param:value","text":"Sets a float value for a property of the gamerules entity. \n Property name. Value to set."},{"tag":"param:element","text":"Sets a float value for a property of the gamerules entity. \n Property name. Value to set. Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"Sets a float value for a property of the gamerules entity. \n Property name. Value to set. Element # (starting from 0) if property is an array. This parameter is ignored."},{"tag":"error","text":"Sets a float value for a property of the gamerules entity. \n Property name. Value to set. Element # (starting from 0) if property is an array. This parameter is ignored. Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"float","name":"value","decl":"float value"},{"type":"int","name":"element","decl":"int element"},{"type":"bool","name":"changeState","decl":"bool changeState"}]},{"name":"GameRules_GetPropEnt","docStart":4652,"docEnd":5075,"docs":{"brief":"Retrieves a entity index from a property of the gamerules entity.","tags":[{"tag":"","text":"Retrieves a entity index from a property of the gamerules entity."},{"tag":"param:prop","text":"Retrieves a entity index from a property of the gamerules entity. \n Property name."},{"tag":"param:element","text":"Retrieves a entity index from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array."},{"tag":"return","text":"Retrieves a entity index from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array. Entity index at the given property. If there is no entity, or the entity is not valid, then -1 is returned."},{"tag":"error","text":"Retrieves a entity index from a property of the gamerules entity. \n Property name. Element # (starting from 0) if property is an array. Entity index at the given property. If there is no entity, or the entity is not valid, then -1 is returned. Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"int","name":"element","decl":"int element"}]},{"name":"GameRules_SetPropEnt","docStart":5147,"docEnd":5496,"docs":{"brief":"Sets an entity index for a property of the gamerules entity.","tags":[{"tag":"","text":"Sets an entity index for a property of the gamerules entity."},{"tag":"param:prop","text":"Sets an entity index for a property of the gamerules entity. \n Property name."},{"tag":"param:other","text":"Sets an entity index for a property of the gamerules entity. \n Property name. Entity index to set, or -1 to unset."},{"tag":"param:element","text":"Sets an entity index for a property of the gamerules entity. \n Property name. Entity index to set, or -1 to unset. Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"Sets an entity index for a property of the gamerules entity. \n Property name. Entity index to set, or -1 to unset. Element # (starting from 0) if property is an array. This parameter is ignored."},{"tag":"error","text":"Sets an entity index for a property of the gamerules entity. \n Property name. Entity index to set, or -1 to unset. Element # (starting from 0) if property is an array. This parameter is ignored. Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"int","name":"other","decl":"int other"},{"type":"int","name":"element","decl":"int element"},{"type":"bool","name":"changeState","decl":"bool changeState"}]},{"name":"GameRules_GetPropVector","docStart":5604,"docEnd":5923,"docs":{"brief":"Retrieves a vector of floats from the gamerules entity, given a named network property.","tags":[{"tag":"","text":"Retrieves a vector of floats from the gamerules entity, given a named network property."},{"tag":"param:prop","text":"Retrieves a vector of floats from the gamerules entity, given a named network property. \n Property name."},{"tag":"param:vec","text":"Retrieves a vector of floats from the gamerules entity, given a named network property. \n Property name. Vector buffer to store data in."},{"tag":"param:element","text":"Retrieves a vector of floats from the gamerules entity, given a named network property. \n Property name. Vector buffer to store data in. Element # (starting from 0) if property is an array."},{"tag":"error","text":"Retrieves a vector of floats from the gamerules entity, given a named network property. \n Property name. Vector buffer to store data in. Element # (starting from 0) if property is an array. Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"float[3]","name":"vec","decl":"float vec[3]"},{"type":"int","name":"element","decl":"int element"}]},{"name":"GameRules_SetPropVector","docStart":6013,"docEnd":6360,"docs":{"brief":"Sets a vector of floats in the gamerules entity, given a named network property.","tags":[{"tag":"","text":"Sets a vector of floats in the gamerules entity, given a named network property."},{"tag":"param:prop","text":"Sets a vector of floats in the gamerules entity, given a named network property. \n Property name."},{"tag":"param:vec","text":"Sets a vector of floats in the gamerules entity, given a named network property. \n Property name. Vector to set."},{"tag":"param:element","text":"Sets a vector of floats in the gamerules entity, given a named network property. \n Property name. Vector to set. Element # (starting from 0) if property is an array."},{"tag":"param:changeState","text":"Sets a vector of floats in the gamerules entity, given a named network property. \n Property name. Vector to set. Element # (starting from 0) if property is an array. This parameter is ignored."},{"tag":"error","text":"Sets a vector of floats in the gamerules entity, given a named network property. \n Property name. Vector to set. Element # (starting from 0) if property is an array. This parameter is ignored. Not supported."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"const float[3]","name":"vec","decl":"const float vec[3]"},{"type":"int","name":"element","decl":"int element"},{"type":"bool","name":"changeState","decl":"bool changeState"}]},{"name":"GameRules_GetPropString","docStart":6480,"docEnd":6793,"docs":{"brief":"Gets a gamerules property as a string.","tags":[{"tag":"","text":"Gets a gamerules property as a string."},{"tag":"param:prop","text":"Gets a gamerules property as a string. \n Property to use."},{"tag":"param:buffer","text":"Gets a gamerules property as a string. \n Property to use. Destination string buffer."},{"tag":"param:maxlen","text":"Gets a gamerules property as a string. \n Property to use. Destination string buffer. Maximum length of output string buffer."},{"tag":"return","text":"Gets a gamerules property as a string. \n Property to use. Destination string buffer. Maximum length of output string buffer. Number of non-null bytes written."},{"tag":"error","text":"Gets a gamerules property as a string. \n Property to use. Destination string buffer. Maximum length of output string buffer. Number of non-null bytes written. Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GameRules_SetPropString","docStart":6880,"docEnd":7168,"docs":{"brief":"Sets a gamerules property as a string.","tags":[{"tag":"","text":"Sets a gamerules property as a string."},{"tag":"param:prop","text":"Sets a gamerules property as a string. \n Property to use."},{"tag":"param:buffer","text":"Sets a gamerules property as a string. \n Property to use. String to set."},{"tag":"param:changeState","text":"Sets a gamerules property as a string. \n Property to use. String to set. This parameter is ignored."},{"tag":"return","text":"Sets a gamerules property as a string. \n Property to use. String to set. This parameter is ignored. Number of non-null bytes written."},{"tag":"error","text":"Sets a gamerules property as a string. \n Property to use. String to set. This parameter is ignored. Number of non-null bytes written. Not supported."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"prop","decl":"const char[] prop"},{"type":"const char[]","name":"buffer","decl":"const char[] buffer"},{"type":"bool","name":"changeState","decl":"bool changeState"}]},{"name":"GameRules_GetRoundState","docStart":7273,"docEnd":7416,"docs":{"brief":"Gets the current round state.","tags":[{"tag":"","text":"Gets the current round state."},{"tag":"return","text":"Gets the current round state. \n Round state."},{"tag":"error","text":"Gets the current round state. \n Round state. Game doesn't support round state."}]},"kind":"stock","returnType":"RoundState","arguments":[]}],"methodmaps":[],"constants":[],"enums":[{"name":"RoundState","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"RoundState_Init","docStart":1681,"docEnd":1717,"docs":null},{"name":"RoundState_Pregame","docStart":1741,"docEnd":1909,"docs":null},{"name":"RoundState_StartGame","docStart":1936,"docEnd":1995,"docs":null},{"name":"RoundState_Preround","docStart":2024,"docEnd":2068,"docs":null},{"name":"RoundState_RoundRunning","docStart":2096,"docEnd":2127,"docs":null},{"name":"RoundState_TeamWin","docStart":2159,"docEnd":2186,"docs":null},{"name":"RoundState_Restart","docStart":2213,"docEnd":2269,"docs":null},{"name":"RoundState_Stalemate","docStart":2296,"docEnd":2329,"docs":null},{"name":"RoundState_GameOver","docStart":2358,"docEnd":2400,"docs":null},{"name":"RoundState_Bonus","docStart":2428,"docEnd":2467,"docs":null},{"name":"RoundState_BetweenRounds","docStart":2492,"docEnd":2508,"docs":null}]}],"typesets":[],"typedefs":[]}