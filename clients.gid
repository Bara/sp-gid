{"functions":[{"name":"OnClientConnect","docStart":3029,"docEnd":3841,"docs":{"brief":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.","tags":[{"tag":"","text":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will."},{"tag":"param:client","text":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. \n Client index."},{"tag":"param:rejectmsg","text":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. \n Client index. Buffer to store the rejection message when the connection is refused."},{"tag":"param:maxlen","text":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. \n Client index. Buffer to store the rejection message when the connection is refused. Maximum number of characters for rejection buffer."},{"tag":"return","text":"Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. \n Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. \n Client index. Buffer to store the rejection message when the connection is refused. Maximum number of characters for rejection buffer. True to validate client's connection, false to refuse it."}]},"kind":"forward","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"rejectmsg","decl":"char[] rejectmsg"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"OnClientConnected","docStart":3918,"docEnd":4067,"docs":{"brief":"Called once a client successfully connects.  This callback is paired with OnClientDisconnect.","tags":[{"tag":"","text":"Called once a client successfully connects.  This callback is paired with OnClientDisconnect."},{"tag":"param:client","text":"Called once a client successfully connects.  This callback is paired with OnClientDisconnect. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientPutInServer","docStart":4116,"docEnd":4615,"docs":{"brief":"Called when a client is entering the game. \n Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. \n GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point.","tags":[{"tag":"","text":"Called when a client is entering the game. \n Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. \n GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point."},{"tag":"param:client","text":"Called when a client is entering the game. \n Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. \n GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientDisconnect","docStart":4666,"docEnd":4776,"docs":{"brief":"Called when a client is disconnecting from the server.","tags":[{"tag":"","text":"Called when a client is disconnecting from the server."},{"tag":"param:client","text":"Called when a client is disconnecting from the server. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientDisconnect_Post","docStart":4826,"docEnd":4935,"docs":{"brief":"Called when a client is disconnected from the server.","tags":[{"tag":"","text":"Called when a client is disconnected from the server."},{"tag":"param:client","text":"Called when a client is disconnected from the server. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientCommand","docStart":4990,"docEnd":5419,"docs":{"brief":"Called when a client is sending a command. \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks.","tags":[{"tag":"","text":"Called when a client is sending a command. \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks."},{"tag":"param:client","text":"Called when a client is sending a command. \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. \n Client index."},{"tag":"param:args","text":"Called when a client is sending a command. \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. \n Client index. Number of arguments."},{"tag":"return","text":"Called when a client is sending a command. \n As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. \n Client index. Number of arguments. Plugin_Handled blocks the command from being sent, and Plugin_Continue resumes normal functionality."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"args","decl":"int args"}]},{"name":"OnClientCommandKeyValues","docStart":5478,"docEnd":5947,"docs":{"brief":"Called when a client is sending a KeyValues command.","tags":[{"tag":"","text":"Called when a client is sending a KeyValues command."},{"tag":"param:client","text":"Called when a client is sending a KeyValues command. \n Client index."},{"tag":"param:kv","text":"Called when a client is sending a KeyValues command. \n Client index. Editable KeyValues data to be sent as the command. (This handle should not be stored and will be closed after this forward completes.)"},{"tag":"return","text":"Called when a client is sending a KeyValues command. \n Client index. Editable KeyValues data to be sent as the command. (This handle should not be stored and will be closed after this forward completes.) Plugin_Handled blocks the command from being sent, and Plugin_Continue resumes normal functionality."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"KeyValues","name":"kv","decl":"KeyValues kv"}]},{"name":"OnClientCommandKeyValues_Post","docStart":6019,"docEnd":6321,"docs":{"brief":"Called after a client has sent a KeyValues command.","tags":[{"tag":"","text":"Called after a client has sent a KeyValues command."},{"tag":"param:client","text":"Called after a client has sent a KeyValues command. \n Client index."},{"tag":"param:kv","text":"Called after a client has sent a KeyValues command. \n Client index. KeyValues data sent as the command. (This handle should not be stored and will be closed after this forward completes.)"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"KeyValues","name":"kv","decl":"KeyValues kv"}]},{"name":"OnClientSettingsChanged","docStart":6396,"docEnd":6502,"docs":{"brief":"Called whenever the client's settings are changed.","tags":[{"tag":"","text":"Called whenever the client's settings are changed."},{"tag":"param:client","text":"Called whenever the client's settings are changed. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientAuthorized","docStart":6557,"docEnd":6942,"docs":{"brief":"Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. \n This is called by bots, but the ID will be \"BOT\".","tags":[{"tag":"","text":"Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. \n This is called by bots, but the ID will be \"BOT\"."},{"tag":"param:client","text":"Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. \n This is called by bots, but the ID will be \"BOT\". \n Client index."},{"tag":"param:auth","text":"Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. \n This is called by bots, but the ID will be \"BOT\". \n Client index. Client Steam2 id, if available, else engine auth id."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"auth","decl":"const char[] auth"}]},{"name":"OnClientPreAdminCheck","docStart":7011,"docEnd":7636,"docs":{"brief":"Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. \n Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.","tags":[{"tag":"","text":"Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. \n Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call."},{"tag":"param:client","text":"Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. \n Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. \n Client index."},{"tag":"return","text":"Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. \n Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. \n Client index. Plugin_Handled to block admin checks."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientPostAdminFilter","docStart":7691,"docEnd":8201,"docs":{"brief":"Called directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. \n In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. \n See OnClientPostAdminCheck() for more information.","tags":[{"tag":"","text":"Called directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. \n In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. \n See OnClientPostAdminCheck() for more information."},{"tag":"param:client","text":"Called directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. \n In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. \n See OnClientPostAdminCheck() for more information. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"OnClientPostAdminCheck","docStart":8256,"docEnd":8554,"docs":{"brief":"Called once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.","tags":[{"tag":"","text":"Called once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call."},{"tag":"param:client","text":"Called once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. \n This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. \n Client index."}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetMaxClients","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},{"name":"GetMaxHumanPlayers","docStart":9284,"docEnd":9934,"docs":{"brief":"Returns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. \n You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally.","tags":[{"tag":"","text":"Returns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. \n You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally."},{"tag":"return","text":"Returns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. \n You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally. \n Maximum number of humans allowed."}]},"kind":"native","returnType":"int","arguments":[]},{"name":"GetClientCount","docStart":9972,"docEnd":10156,"docs":{"brief":"Returns the client count put in the server.","tags":[{"tag":"","text":"Returns the client count put in the server."},{"tag":"param:inGameOnly","text":"Returns the client count put in the server. \n If false connecting players are also counted."},{"tag":"return","text":"Returns the client count put in the server. \n If false connecting players are also counted. Client count in the server."}]},"kind":"native","returnType":"int","arguments":[{"type":"bool","name":"inGameOnly","decl":"bool inGameOnly"}]},{"name":"GetClientName","docStart":10210,"docEnd":10577,"docs":{"brief":"Returns the client's name.","tags":[{"tag":"","text":"Returns the client's name."},{"tag":"param:client","text":"Returns the client's name. \n Player index."},{"tag":"param:name","text":"Returns the client's name. \n Player index. Buffer to store the client's name."},{"tag":"param:maxlen","text":"Returns the client's name. \n Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator)."},{"tag":"return","text":"Returns the client's name. \n Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator). True on success, false otherwise."},{"tag":"error","text":"Returns the client's name. \n Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator). True on success, false otherwise. If the client is not connected an error will be thrown."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GetClientIP","docStart":10646,"docEnd":11109,"docs":{"brief":"Retrieves a client's IP address.","tags":[{"tag":"","text":"Retrieves a client's IP address."},{"tag":"param:client","text":"Retrieves a client's IP address. \n Player index."},{"tag":"param:ip","text":"Retrieves a client's IP address. \n Player index. Buffer to store the client's ip address."},{"tag":"param:maxlen","text":"Retrieves a client's IP address. \n Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator)."},{"tag":"param:remport","text":"Retrieves a client's IP address. \n Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default)."},{"tag":"return","text":"Retrieves a client's IP address. \n Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default). True on success, false otherwise."},{"tag":"error","text":"Retrieves a client's IP address. \n Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default). True on success, false otherwise. If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"ip","decl":"char[] ip"},{"type":"int","name":"maxlen","decl":"int maxlen"},{"type":"bool","name":"remport","decl":"bool remport"}]},{"name":"GetClientAuthString","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"auth","decl":"char[] auth"},{"type":"int","name":"maxlen","decl":"int maxlen"},{"type":"bool","name":"validate","decl":"bool validate"}]},{"name":"GetClientAuthId","docStart":11994,"docEnd":12668,"docs":{"brief":"Retrieves a client's authentication string (SteamID).","tags":[{"tag":"","text":"Retrieves a client's authentication string (SteamID)."},{"tag":"param:client","text":"Retrieves a client's authentication string (SteamID). \n Player index."},{"tag":"param:authType","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use."},{"tag":"param:auth","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use. Buffer to store the client's auth id."},{"tag":"param:maxlen","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator)."},{"tag":"param:validate","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT."},{"tag":"return","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. True on success, false otherwise."},{"tag":"error","text":"Retrieves a client's authentication string (SteamID). \n Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. True on success, false otherwise. If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"AuthIdType","name":"authType","decl":"AuthIdType authType"},{"type":"char[]","name":"auth","decl":"char[] auth"},{"type":"int","name":"maxlen","decl":"int maxlen"},{"type":"bool","name":"validate","decl":"bool validate"}]},{"name":"GetSteamAccountID","docStart":12780,"docEnd":13399,"docs":{"brief":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.","tags":[{"tag":"","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples."},{"tag":"param:client","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. \n Client Index."},{"tag":"param:validate","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. \n Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT."},{"tag":"return","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. \n Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. Steam account ID or 0 if not available."},{"tag":"error","text":"Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. \n Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. Steam account ID or 0 if not available. If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"bool","name":"validate","decl":"bool validate"}]},{"name":"GetClientUserId","docStart":13466,"docEnd":13754,"docs":{"brief":"Retrieves a client's user id, which is an index incremented for every client that joins the server.","tags":[{"tag":"","text":"Retrieves a client's user id, which is an index incremented for every client that joins the server."},{"tag":"param:client","text":"Retrieves a client's user id, which is an index incremented for every client that joins the server. \n Player index."},{"tag":"return","text":"Retrieves a client's user id, which is an index incremented for every client that joins the server. \n Player index. User id of the client."},{"tag":"error","text":"Retrieves a client's user id, which is an index incremented for every client that joins the server. \n Player index. User id of the client. If the client is not connected or the index is invalid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientConnected","docStart":13799,"docEnd":13981,"docs":{"brief":"Returns if a certain player is connected.","tags":[{"tag":"","text":"Returns if a certain player is connected."},{"tag":"param:client","text":"Returns if a certain player is connected. \n Player index."},{"tag":"return","text":"Returns if a certain player is connected. \n Player index. True if player is connected to the server, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientInGame","docStart":14029,"docEnd":14298,"docs":{"brief":"Returns if a certain player has entered the game.","tags":[{"tag":"","text":"Returns if a certain player has entered the game."},{"tag":"param:client","text":"Returns if a certain player has entered the game. \n Player index (index does not have to be connected)."},{"tag":"return","text":"Returns if a certain player has entered the game. \n Player index (index does not have to be connected). True if player has entered the game, false otherwise."},{"tag":"error","text":"Returns if a certain player has entered the game. \n Player index (index does not have to be connected). True if player has entered the game, false otherwise. Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientInKickQueue","docStart":14343,"docEnd":14665,"docs":{"brief":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked shortly and thus they should not appear as valid).","tags":[{"tag":"","text":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked shortly and thus they should not appear as valid)."},{"tag":"param:client","text":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked shortly and thus they should not appear as valid). \n Player index (must be connected)."},{"tag":"return","text":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked shortly and thus they should not appear as valid). \n Player index (must be connected). True if in the kick queue, false otherwise."},{"tag":"error","text":"Returns if a client is in the \"kick queue\" (i.e. the client will be kicked shortly and thus they should not appear as valid). \n Player index (must be connected). True if in the kick queue, false otherwise. Invalid client index."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsPlayerInGame","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientAuthorized","docStart":14960,"docEnd":15148,"docs":{"brief":"Returns if a certain player has been authenticated.","tags":[{"tag":"","text":"Returns if a certain player has been authenticated."},{"tag":"param:client","text":"Returns if a certain player has been authenticated. \n Player index."},{"tag":"return","text":"Returns if a certain player has been authenticated. \n Player index. True if player has been authenticated, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsFakeClient","docStart":15197,"docEnd":15373,"docs":{"brief":"Returns if a certain player is a fake client.","tags":[{"tag":"","text":"Returns if a certain player is a fake client."},{"tag":"param:client","text":"Returns if a certain player is a fake client. \n Player index."},{"tag":"return","text":"Returns if a certain player is a fake client. \n Player index. True if player is a fake client, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientSourceTV","docStart":15416,"docEnd":15598,"docs":{"brief":"Returns if a certain player is the SourceTV bot.","tags":[{"tag":"","text":"Returns if a certain player is the SourceTV bot."},{"tag":"param:client","text":"Returns if a certain player is the SourceTV bot. \n Player index."},{"tag":"return","text":"Returns if a certain player is the SourceTV bot. \n Player index. True if player is the SourceTV bot, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientReplay","docStart":15645,"docEnd":15823,"docs":{"brief":"Returns if a certain player is the Replay bot.","tags":[{"tag":"","text":"Returns if a certain player is the Replay bot."},{"tag":"param:client","text":"Returns if a certain player is the Replay bot. \n Player index."},{"tag":"return","text":"Returns if a certain player is the Replay bot. \n Player index. True if player is the Replay bot, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientObserver","docStart":15868,"docEnd":16050,"docs":{"brief":"Returns if a certain player is an observer/spectator.","tags":[{"tag":"","text":"Returns if a certain player is an observer/spectator."},{"tag":"param:client","text":"Returns if a certain player is an observer/spectator. \n Player index."},{"tag":"return","text":"Returns if a certain player is an observer/spectator. \n Player index. True if player is an observer, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsPlayerAlive","docStart":16097,"docEnd":16429,"docs":{"brief":"Returns if the client is alive or dead. \n Note: This function was originally in SDKTools and was moved to core.","tags":[{"tag":"","text":"Returns if the client is alive or dead. \n Note: This function was originally in SDKTools and was moved to core."},{"tag":"param:client","text":"Returns if the client is alive or dead. \n Note: This function was originally in SDKTools and was moved to core. \n Player's index."},{"tag":"return","text":"Returns if the client is alive or dead. \n Note: This function was originally in SDKTools and was moved to core. \n Player's index. True if the client is alive, false otherwise."},{"tag":"error","text":"Returns if the client is alive or dead. \n Note: This function was originally in SDKTools and was moved to core. \n Player's index. True if the client is alive, false otherwise. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientInfo","docStart":16473,"docEnd":16855,"docs":{"brief":"Retrieves values from client replicated keys.","tags":[{"tag":"","text":"Retrieves values from client replicated keys."},{"tag":"param:client","text":"Retrieves values from client replicated keys. \n Player's index."},{"tag":"param:key","text":"Retrieves values from client replicated keys. \n Player's index. Key string."},{"tag":"param:value","text":"Retrieves values from client replicated keys. \n Player's index. Key string. Buffer to store value."},{"tag":"param:maxlen","text":"Retrieves values from client replicated keys. \n Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe)."},{"tag":"return","text":"Retrieves values from client replicated keys. \n Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe). True on success, false otherwise."},{"tag":"error","text":"Retrieves values from client replicated keys. \n Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe). True on success, false otherwise. Invalid client index, or client not connected."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GetClientTeam","docStart":16943,"docEnd":17188,"docs":{"brief":"Retrieves a client's team index.","tags":[{"tag":"","text":"Retrieves a client's team index."},{"tag":"param:client","text":"Retrieves a client's team index. \n Player's index."},{"tag":"return","text":"Retrieves a client's team index. \n Player's index. Team index the client is on (mod specific)."},{"tag":"error","text":"Retrieves a client's team index. \n Player's index. Team index the client is on (mod specific). Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"SetUserAdmin","docStart":17232,"docEnd":17560,"docs":{"brief":"Sets a client's AdminId.","tags":[{"tag":"","text":"Sets a client's AdminId."},{"tag":"param:client","text":"Sets a client's AdminId. \n Player's index."},{"tag":"param:id","text":"Sets a client's AdminId. \n Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions."},{"tag":"param:temp","text":"Sets a client's AdminId. \n Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions. True if the id should be freed on disconnect."},{"tag":"error","text":"Sets a client's AdminId. \n Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions. True if the id should be freed on disconnect. Invalid client index, client not connected, or bogus AdminId."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"bool","name":"temp","decl":"bool temp"}]},{"name":"GetUserAdmin","docStart":17632,"docEnd":17868,"docs":{"brief":"Retrieves a client's AdminId.","tags":[{"tag":"","text":"Retrieves a client's AdminId."},{"tag":"param:client","text":"Retrieves a client's AdminId. \n Player's index."},{"tag":"return","text":"Retrieves a client's AdminId. \n Player's index. AdminId of the client, or INVALID_ADMIN_ID if none."},{"tag":"error","text":"Retrieves a client's AdminId. \n Player's index. AdminId of the client, or INVALID_ADMIN_ID if none. Invalid client index, or client not connected."}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"AddUserFlags","docStart":17914,"docEnd":18204,"docs":{"brief":"Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given.","tags":[{"tag":"","text":"Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given."},{"tag":"param:client","text":"Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. \n Player's index."},{"tag":"param:...","text":"Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. \n Player's index. Flags to set on the client."},{"tag":"error","text":"Sets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. \n Player's index. Flags to set on the client. Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"AdminFlag ...","name":"...","decl":"AdminFlag ... ..."}]},{"name":"RemoveUserFlags","docStart":18262,"docEnd":18534,"docs":{"brief":"Removes flags from a client.  If the client is not an admin, this has no effect.","tags":[{"tag":"","text":"Removes flags from a client.  If the client is not an admin, this has no effect."},{"tag":"param:client","text":"Removes flags from a client.  If the client is not an admin, this has no effect. \n Player's index."},{"tag":"param:...","text":"Removes flags from a client.  If the client is not an admin, this has no effect. \n Player's index. Flags to remove from the client."},{"tag":"error","text":"Removes flags from a client.  If the client is not an admin, this has no effect. \n Player's index. Flags to remove from the client. Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"AdminFlag ...","name":"...","decl":"AdminFlag ... ..."}]},{"name":"SetUserFlagBits","docStart":18595,"docEnd":18868,"docs":{"brief":"Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given.","tags":[{"tag":"","text":"Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given."},{"tag":"param:client","text":"Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given. \n Player's index."},{"tag":"param:flags","text":"Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given. \n Player's index. Bitstring of flags to set on client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"GetUserFlagBits","docStart":18925,"docEnd":19175,"docs":{"brief":"Returns client access flags.  If the client is not an admin, the result is always 0.","tags":[{"tag":"","text":"Returns client access flags.  If the client is not an admin, the result is always 0."},{"tag":"param:client","text":"Returns client access flags.  If the client is not an admin, the result is always 0. \n Player's index."},{"tag":"return","text":"Returns client access flags.  If the client is not an admin, the result is always 0. \n Player's index. Flags"},{"tag":"error","text":"Returns client access flags.  If the client is not an admin, the result is always 0. \n Player's index. Flags Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"CanUserTarget","docStart":19220,"docEnd":19575,"docs":{"brief":"Returns whether a user can target another user. This is a helper function for CanAdminTarget.","tags":[{"tag":"","text":"Returns whether a user can target another user. This is a helper function for CanAdminTarget."},{"tag":"param:client","text":"Returns whether a user can target another user. This is a helper function for CanAdminTarget. \n Player's index."},{"tag":"param:target","text":"Returns whether a user can target another user. This is a helper function for CanAdminTarget. \n Player's index. Target player's index."},{"tag":"return","text":"Returns whether a user can target another user. This is a helper function for CanAdminTarget. \n Player's index. Target player's index. True if target is targettable by the player, false otherwise."},{"tag":"error","text":"Returns whether a user can target another user. This is a helper function for CanAdminTarget. \n Player's index. Target player's index. True if target is targettable by the player, false otherwise. Invalid or unconnected player indexers."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"target","decl":"int target"}]},{"name":"RunAdminCacheChecks","docStart":19631,"docEnd":20032,"docs":{"brief":"Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. \n Note: This function is based on the internal cache only.","tags":[{"tag":"","text":"Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. \n Note: This function is based on the internal cache only."},{"tag":"param:client","text":"Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. \n Note: This function is based on the internal cache only. \n Client index."},{"tag":"return","text":"Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. \n Note: This function is based on the internal cache only. \n Client index. True if access was changed, false if it did not."},{"tag":"error","text":"Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. \n Note: This function is based on the internal cache only. \n Client index. True if access was changed, false if it did not. Invalid client index or client not in-game AND authorized."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"NotifyPostAdminCheck","docStart":20082,"docEnd":20423,"docs":{"brief":"Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. \n Note: This must be sent even if no admin id was assigned.","tags":[{"tag":"","text":"Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. \n Note: This must be sent even if no admin id was assigned."},{"tag":"param:client","text":"Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. \n Note: This must be sent even if no admin id was assigned. \n Client index."},{"tag":"error","text":"Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. \n Note: This must be sent even if no admin id was assigned. \n Client index. Invalid client index or client not in-game AND authorized."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"CreateFakeClient","docStart":20474,"docEnd":20615,"docs":{"brief":"Creates a fake client.","tags":[{"tag":"","text":"Creates a fake client."},{"tag":"param:name","text":"Creates a fake client. \n Name to use."},{"tag":"return","text":"Creates a fake client. \n Name to use. Client index on success, 0 otherwise."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"SetFakeClientConVar","docStart":20668,"docEnd":20961,"docs":{"brief":"Sets a convar value on a fake client.","tags":[{"tag":"","text":"Sets a convar value on a fake client."},{"tag":"param:client","text":"Sets a convar value on a fake client. \n Client index."},{"tag":"param:cvar","text":"Sets a convar value on a fake client. \n Client index. ConVar name."},{"tag":"param:value","text":"Sets a convar value on a fake client. \n Client index. ConVar name. ConVar value."},{"tag":"error","text":"Sets a convar value on a fake client. \n Client index. ConVar name. ConVar value. Invalid client index, client not connected, or client not a fake client."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"cvar","decl":"const char[] cvar"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"GetClientHealth","docStart":21050,"docEnd":21261,"docs":{"brief":"Returns the client's health.","tags":[{"tag":"","text":"Returns the client's health."},{"tag":"param:client","text":"Returns the client's health. \n Player's index."},{"tag":"return","text":"Returns the client's health. \n Player's index. Health value."},{"tag":"error","text":"Returns the client's health. \n Player's index. Health value. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientModel","docStart":21306,"docEnd":21633,"docs":{"brief":"Returns the client's model name.","tags":[{"tag":"","text":"Returns the client's model name."},{"tag":"param:client","text":"Returns the client's model name. \n Player's index."},{"tag":"param:model","text":"Returns the client's model name. \n Player's index. Buffer to store the client's model name."},{"tag":"param:maxlen","text":"Returns the client's model name. \n Player's index. Buffer to store the client's model name. Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Returns the client's model name. \n Player's index. Buffer to store the client's model name. Maximum length of string buffer (includes NULL terminator). Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"model","decl":"char[] model"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GetClientWeapon","docStart":21704,"docEnd":22033,"docs":{"brief":"Returns the client's weapon name.","tags":[{"tag":"","text":"Returns the client's weapon name."},{"tag":"param:client","text":"Returns the client's weapon name. \n Player's index."},{"tag":"param:weapon","text":"Returns the client's weapon name. \n Player's index. Buffer to store the client's weapon name."},{"tag":"param:maxlen","text":"Returns the client's weapon name. \n Player's index. Buffer to store the client's weapon name. Maximum length of string buffer (includes NULL terminator)."},{"tag":"error","text":"Returns the client's weapon name. \n Player's index. Buffer to store the client's weapon name. Maximum length of string buffer (includes NULL terminator). Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"weapon","decl":"char[] weapon"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"GetClientMaxs","docStart":22106,"docEnd":22363,"docs":{"brief":"Returns the client's max size vector.","tags":[{"tag":"","text":"Returns the client's max size vector."},{"tag":"param:client","text":"Returns the client's max size vector. \n Player's index."},{"tag":"param:vec","text":"Returns the client's max size vector. \n Player's index. Destination vector to store the client's max size."},{"tag":"error","text":"Returns the client's max size vector. \n Player's index. Destination vector to store the client's max size. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"float[3]","name":"vec","decl":"float vec[3]"}]},{"name":"GetClientMins","docStart":22421,"docEnd":22678,"docs":{"brief":"Returns the client's min size vector.","tags":[{"tag":"","text":"Returns the client's min size vector."},{"tag":"param:client","text":"Returns the client's min size vector. \n Player's index."},{"tag":"param:vec","text":"Returns the client's min size vector. \n Player's index. Destination vector to store the client's min size."},{"tag":"error","text":"Returns the client's min size vector. \n Player's index. Destination vector to store the client's min size. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"float[3]","name":"vec","decl":"float vec[3]"}]},{"name":"GetClientAbsAngles","docStart":22736,"docEnd":22998,"docs":{"brief":"Returns the client's position angle.","tags":[{"tag":"","text":"Returns the client's position angle."},{"tag":"param:client","text":"Returns the client's position angle. \n Player's index."},{"tag":"param:ang","text":"Returns the client's position angle. \n Player's index. Destination vector to store the client's position angle."},{"tag":"error","text":"Returns the client's position angle. \n Player's index. Destination vector to store the client's position angle. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"float[3]","name":"ang","decl":"float ang[3]"}]},{"name":"GetClientAbsOrigin","docStart":23061,"docEnd":23321,"docs":{"brief":"Returns the client's origin vector.","tags":[{"tag":"","text":"Returns the client's origin vector."},{"tag":"param:client","text":"Returns the client's origin vector. \n Player's index."},{"tag":"param:vec","text":"Returns the client's origin vector. \n Player's index. Destination vector to store the client's origin vector."},{"tag":"error","text":"Returns the client's origin vector. \n Player's index. Destination vector to store the client's origin vector. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"float[3]","name":"vec","decl":"float vec[3]"}]},{"name":"GetClientArmor","docStart":23384,"docEnd":23593,"docs":{"brief":"Returns the client's armor.","tags":[{"tag":"","text":"Returns the client's armor."},{"tag":"param:client","text":"Returns the client's armor. \n Player's index."},{"tag":"return","text":"Returns the client's armor. \n Player's index. Armor value."},{"tag":"error","text":"Returns the client's armor. \n Player's index. Armor value. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientDeaths","docStart":23637,"docEnd":23852,"docs":{"brief":"Returns the client's death count.","tags":[{"tag":"","text":"Returns the client's death count."},{"tag":"param:client","text":"Returns the client's death count. \n Player's index."},{"tag":"return","text":"Returns the client's death count. \n Player's index. Death count."},{"tag":"error","text":"Returns the client's death count. \n Player's index. Death count. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientFrags","docStart":23897,"docEnd":24110,"docs":{"brief":"Returns the client's frag count.","tags":[{"tag":"","text":"Returns the client's frag count."},{"tag":"param:client","text":"Returns the client's frag count. \n Player's index."},{"tag":"return","text":"Returns the client's frag count. \n Player's index. Frag count."},{"tag":"error","text":"Returns the client's frag count. \n Player's index. Frag count. Invalid client index, client not in game, or no mod support."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientDataRate","docStart":24154,"docEnd":24382,"docs":{"brief":"Returns the client's send data rate in bytes/sec.","tags":[{"tag":"","text":"Returns the client's send data rate in bytes/sec."},{"tag":"param:client","text":"Returns the client's send data rate in bytes/sec. \n Player's index."},{"tag":"return","text":"Returns the client's send data rate in bytes/sec. \n Player's index. Data rate."},{"tag":"error","text":"Returns the client's send data rate in bytes/sec. \n Player's index. Data rate. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"IsClientTimingOut","docStart":24429,"docEnd":24677,"docs":{"brief":"Returns if a client is timing out","tags":[{"tag":"","text":"Returns if a client is timing out"},{"tag":"param:client","text":"Returns if a client is timing out \n Player's index."},{"tag":"return","text":"Returns if a client is timing out \n Player's index. True if client is timing out, false otherwise."},{"tag":"error","text":"Returns if a client is timing out \n Player's index. True if client is timing out, false otherwise. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientTime","docStart":24725,"docEnd":24958,"docs":{"brief":"Returns the client's connection time in seconds.","tags":[{"tag":"","text":"Returns the client's connection time in seconds."},{"tag":"param:client","text":"Returns the client's connection time in seconds. \n Player's index."},{"tag":"return","text":"Returns the client's connection time in seconds. \n Player's index. Connection time."},{"tag":"error","text":"Returns the client's connection time in seconds. \n Player's index. Connection time. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientLatency","docStart":25003,"docEnd":25363,"docs":{"brief":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.","tags":[{"tag":"","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering."},{"tag":"param:client","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. \n Player's index."},{"tag":"param:flow","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. \n Player's index. Traffic flowing direction. Latency, or -1 if network info is not available."},{"tag":"error","text":"Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. \n Player's index. Traffic flowing direction. Latency, or -1 if network info is not available. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientAvgLatency","docStart":25425,"docEnd":25749,"docs":{"brief":"Returns the client's average packet latency in seconds.","tags":[{"tag":"","text":"Returns the client's average packet latency in seconds."},{"tag":"param:client","text":"Returns the client's average packet latency in seconds. \n Player's index."},{"tag":"param:flow","text":"Returns the client's average packet latency in seconds. \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's average packet latency in seconds. \n Player's index. Traffic flowing direction. Latency, or -1 if network info is not available."},{"tag":"error","text":"Returns the client's average packet latency in seconds. \n Player's index. Traffic flowing direction. Latency, or -1 if network info is not available. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientAvgLoss","docStart":25814,"docEnd":26177,"docs":{"brief":"Returns the client's average packet loss, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages). \n Player's index."},{"tag":"param:flow","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available."},{"tag":"error","text":"Returns the client's average packet loss, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientAvgChoke","docStart":26239,"docEnd":26603,"docs":{"brief":"Returns the client's average packet choke, values go from 0 to 1 (for percentages).","tags":[{"tag":"","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages)."},{"tag":"param:client","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages). \n Player's index."},{"tag":"param:flow","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available."},{"tag":"error","text":"Returns the client's average packet choke, values go from 0 to 1 (for percentages). \n Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientAvgData","docStart":26666,"docEnd":26941,"docs":{"brief":"Returns the client's data flow in bytes/sec.","tags":[{"tag":"","text":"Returns the client's data flow in bytes/sec."},{"tag":"param:client","text":"Returns the client's data flow in bytes/sec. \n Player's index."},{"tag":"param:flow","text":"Returns the client's data flow in bytes/sec. \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's data flow in bytes/sec. \n Player's index. Traffic flowing direction. Data flow."},{"tag":"error","text":"Returns the client's data flow in bytes/sec. \n Player's index. Traffic flowing direction. Data flow. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientAvgPackets","docStart":27003,"docEnd":27302,"docs":{"brief":"Returns the client's average packet frequency in packets/sec.","tags":[{"tag":"","text":"Returns the client's average packet frequency in packets/sec."},{"tag":"param:client","text":"Returns the client's average packet frequency in packets/sec. \n Player's index."},{"tag":"param:flow","text":"Returns the client's average packet frequency in packets/sec. \n Player's index. Traffic flowing direction."},{"tag":"return","text":"Returns the client's average packet frequency in packets/sec. \n Player's index. Traffic flowing direction. Packet frequency."},{"tag":"error","text":"Returns the client's average packet frequency in packets/sec. \n Player's index. Traffic flowing direction. Packet frequency. Invalid client index, client not connected, or fake client."}]},"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"NetFlow","name":"flow","decl":"NetFlow flow"}]},{"name":"GetClientOfUserId","docStart":27367,"docEnd":27568,"docs":{"brief":"Translates an userid index to the real player index.","tags":[{"tag":"","text":"Translates an userid index to the real player index."},{"tag":"param:userid","text":"Translates an userid index to the real player index. \n Userid value."},{"tag":"return","text":"Translates an userid index to the real player index. \n Userid value. Client value."},{"tag":"error","text":"Translates an userid index to the real player index. \n Userid value. Client value. Returns 0 if invalid userid."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"userid","decl":"int userid"}]},{"name":"KickClient","docStart":27615,"docEnd":28491,"docs":{"brief":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs.","tags":[{"tag":"","text":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs."},{"tag":"param:client","text":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs. \n Client index."},{"tag":"param:format","text":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine."},{"tag":"param:...","text":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters."},{"tag":"error","text":"Disconnects a client from the server as soon as the next frame starts. \n Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. \n If you need immediate disconnects, use KickClientEx(). \n Note: IsClientInKickQueue() will return true before the kick occurs. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters. Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"KickClientEx","docStart":28565,"docEnd":29160,"docs":{"brief":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame.","tags":[{"tag":"","text":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame."},{"tag":"param:client","text":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. \n Client index."},{"tag":"param:format","text":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine."},{"tag":"param:...","text":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters."},{"tag":"error","text":"Immediately disconnects a client from the server. \n Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. \n Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters. Invalid client index, or client not connected."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"ChangeClientTeam","docStart":29236,"docEnd":29574,"docs":{"brief":"Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player.","tags":[{"tag":"","text":"Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player."},{"tag":"param:client","text":"Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player. \n Client index."},{"tag":"param:team","text":"Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player. \n Client index. Mod-specific team index."},{"tag":"error","text":"Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player. \n Client index. Mod-specific team index. Invalid client index, client not connected, or lack of mod support."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"team","decl":"int team"}]},{"name":"GetClientSerial","docStart":29631,"docEnd":29844,"docs":{"brief":"Returns the clients unique serial identifier.","tags":[{"tag":"","text":"Returns the clients unique serial identifier."},{"tag":"param:client","text":"Returns the clients unique serial identifier. \n Client index."},{"tag":"return","text":"Returns the clients unique serial identifier. \n Client index. Serial number."},{"tag":"error","text":"Returns the clients unique serial identifier. \n Client index. Serial number. Invalid client index, or client not connected."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"GetClientFromSerial","docStart":29889,"docEnd":30056,"docs":{"brief":"Returns the client index by its serial number.","tags":[{"tag":"","text":"Returns the client index by its serial number."},{"tag":"param:serial","text":"Returns the client index by its serial number. \n Serial number."},{"tag":"return","text":"Returns the client index by its serial number. \n Serial number. Client index, or 0 for invalid serial."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"serial","decl":"int serial"}]}],"methodmaps":[],"constants":[],"enums":[{"name":"NetFlow","docStart":1640,"docEnd":1677,"docs":{"brief":"Network flow directions.","tags":[{"tag":"","text":"Network flow directions."}]},"entries":[{"name":"NetFlow_Outgoing","docStart":1721,"docEnd":1745,"docs":null},{"name":"NetFlow_Incoming","docStart":1772,"docEnd":1796,"docs":null},{"name":"NetFlow_Both","docStart":1823,"docEnd":1857,"docs":null}]},{"name":"AuthIdType","docStart":1865,"docEnd":2159,"docs":{"brief":"Auth string types. \n Note that for the Steam2 and Steam3 types, the following ids are also valid values: \"STEAM_ID_PENDING\" - Authentication is pending. \"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server. \"BOT\" - The client is a bot.","tags":[{"tag":"","text":"Auth string types. \n Note that for the Steam2 and Steam3 types, the following ids are also valid values: \"STEAM_ID_PENDING\" - Authentication is pending. \"STEAM_ID_LAN\" - Authentication is disabled because of being on a LAN server. \"BOT\" - The client is a bot."}]},"entries":[{"name":"AuthId_Engine","docStart":2205,"docEnd":2270,"docs":null},{"name":"AuthId_Steam2","docStart":2276,"docEnd":2355,"docs":null},{"name":"AuthId_Steam3","docStart":2461,"docEnd":2511,"docs":null},{"name":"AuthId_SteamID64","docStart":2537,"docEnd":2601,"docs":null}]}],"typesets":[],"typedefs":[]}