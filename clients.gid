¶ifunctionsòFødnameoOnClientConnecthdocStart’fdocEndddocs¢ebriefyﬂCalled on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.dtagsÖ¢ctag`dtextyﬂCalled on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will.¢ctaglparam:clientdtextyÔCalled on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. 
 Client index.¢ctagoparam:rejectmsgdtexty5Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. 
 Client index. Buffer to store the rejection message when the connection is refused.¢ctaglparam:maxlendtextyhCalled on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. 
 Client index. Buffer to store the rejection message when the connection is refused. Maximum number of characters for rejection buffer.¢ctagfreturndtexty¢Called on client connection.  If you return true, the client will be allowed in the server. If you return false (or return nothing), the client will be rejected.  If the client is rejected by this forward or any other, OnClientDisconnect will not be called. 
 Note: Do not write to rejectmsg if you plan on returning true.  If multiple plugins write to the string buffer, it is not defined which plugin's string will be shown to the client, but it is guaranteed one of them will. 
 Client index. Buffer to store the rejection message when the connection is refused. Maximum number of characters for rejection buffer. True to validate client's connection, false to refuse it.dkindgforwardjreturnTypedbooliargumentsÉ£dtypecintdnamefclientddecljint client£dtypefchar[]dnameirejectmsgddeclpchar[] rejectmsg£dtypecintdnamefmaxlenddecljint maxlenˇødnameqOnClientConnectedhdocStartNfdocEnd„ddocs¢ebriefx]Called once a client successfully connects.  This callback is paired with OnClientDisconnect.dtagsÇ¢ctag`dtextx]Called once a client successfully connects.  This callback is paired with OnClientDisconnect.¢ctaglparam:clientdtextxmCalled once a client successfully connects.  This callback is paired with OnClientDisconnect. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamesOnClientPutInServerhdocStartfdocEndddocs¢ebriefyùCalled when a client is entering the game. 
 Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. 
 GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point.dtagsÇ¢ctag`dtextyùCalled when a client is entering the game. 
 Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. 
 GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point.¢ctaglparam:clientdtexty≠Called when a client is entering the game. 
 Whether a client has a steamid is undefined until OnClientAuthorized is called, which may occur either before or after OnClientPutInServer. Similarly, use OnClientPostAdminCheck() if you need to verify whether connecting players are admins. 
 GetClientCount() will include clients as they are passed through this function, as clients are already in game at this point. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamerOnClientDisconnecthdocStart:fdocEnd®ddocs¢ebriefx6Called when a client is disconnecting from the server.dtagsÇ¢ctag`dtextx6Called when a client is disconnecting from the server.¢ctaglparam:clientdtextxFCalled when a client is disconnecting from the server. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamewOnClientDisconnect_PosthdocStart⁄fdocEndGddocs¢ebriefx5Called when a client is disconnected from the server.dtagsÇ¢ctag`dtextx5Called when a client is disconnected from the server.¢ctaglparam:clientdtextxECalled when a client is disconnected from the server. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnameoOnClientCommandhdocStart~fdocEnd+ddocs¢ebriefx¶Called when a client is sending a command. 
 As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks.dtagsÑ¢ctag`dtextx¶Called when a client is sending a command. 
 As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks.¢ctaglparam:clientdtextx∂Called when a client is sending a command. 
 As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. 
 Client index.¢ctagjparam:argsdtextxÀCalled when a client is sending a command. 
 As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. 
 Client index. Number of arguments.¢ctagfreturndtexty0Called when a client is sending a command. 
 As of SourceMod 1.3, the client is guaranteed to be in-game. Use command listeners (console.inc) for more advanced hooks. 
 Client index. Number of arguments. Plugin_Handled blocks the command from being sent, and Plugin_Continue resumes normal functionality.dkindgforwardjreturnTypefActioniargumentsÇ£dtypecintdnamefclientddecljint client£dtypecintdnamedargsddeclhint argsˇødnamexOnClientCommandKeyValueshdocStartffdocEnd;ddocs¢ebriefx4Called when a client is sending a KeyValues command.dtagsÑ¢ctag`dtextx4Called when a client is sending a KeyValues command.¢ctaglparam:clientdtextxDCalled when a client is sending a KeyValues command. 
 Client index.¢ctaghparam:kvdtextxÀCalled when a client is sending a KeyValues command. 
 Client index. Editable KeyValues data to be sent as the command. (This handle should not be stored and will be closed after this forward completes.)¢ctagfreturndtexty0Called when a client is sending a KeyValues command. 
 Client index. Editable KeyValues data to be sent as the command. (This handle should not be stored and will be closed after this forward completes.) Plugin_Handled blocks the command from being sent, and Plugin_Continue resumes normal functionality.dkindgforwardjreturnTypefActioniargumentsÇ£dtypecintdnamefclientddecljint client£dtypeiKeyValuesdnamebkvddecllKeyValues kvˇødnamexOnClientCommandKeyValues_PosthdocStartÉfdocEnd±ddocs¢ebriefx3Called after a client has sent a KeyValues command.dtagsÉ¢ctag`dtextx3Called after a client has sent a KeyValues command.¢ctaglparam:clientdtextxCCalled after a client has sent a KeyValues command. 
 Client index.¢ctaghparam:kvdtextxªCalled after a client has sent a KeyValues command. 
 Client index. KeyValues data sent as the command. (This handle should not be stored and will be closed after this forward completes.)dkindgforwardjreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypeiKeyValuesdnamebkvddecllKeyValues kvˇødnamewOnClientSettingsChangedhdocStart¸fdocEndfddocs¢ebriefx2Called whenever the client's settings are changed.dtagsÇ¢ctag`dtextx2Called whenever the client's settings are changed.¢ctaglparam:clientdtextxBCalled whenever the client's settings are changed. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamerOnClientAuthorizedhdocStartùfdocEndddocs¢ebriefxÎCalled when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. 
 This is called by bots, but the ID will be "BOT".dtagsÉ¢ctag`dtextxÎCalled when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. 
 This is called by bots, but the ID will be "BOT".¢ctaglparam:clientdtextx˚Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. 
 This is called by bots, but the ID will be "BOT". 
 Client index.¢ctagjparam:authdtexty0Called when a client receives an auth ID.  The state of a client's authorization as an admin is not guaranteed here.  Use OnClientPostAdminCheck() if you need a client's admin status. 
 This is called by bots, but the ID will be "BOT". 
 Client index. Client Steam2 id, if available, else engine auth id.dkindgforwardjreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamedauthddeclqconst char[] authˇødnameuOnClientPreAdminCheckhdocStartcfdocEnd‘ddocs¢ebriefy–Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. 
 Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.dtagsÉ¢ctag`dtexty–Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. 
 Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.¢ctaglparam:clientdtexty‡Called once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. 
 Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. 
 Client index.¢ctagfreturndtextyCalled once a client is authorized and fully in-game, but before admin checks are done.  This can be used to override the default admin checks for a client.  You should only use this for overriding; use OnClientPostAdminCheck() instead if you want notification. 
 Note: If handled/blocked, PostAdminCheck must be signalled manually via NotifyPostAdminCheck(). 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. 
 Client index. Plugin_Handled to block admin checks.dkindgforwardjreturnTypefActioniargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamewOnClientPostAdminFilterhdocStartfdocEnd 	ddocs¢ebriefyüCalled directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. 
 In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. 
 See OnClientPostAdminCheck() for more information.dtagsÇ¢ctag`dtextyüCalled directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. 
 In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. 
 See OnClientPostAdminCheck() for more information.¢ctaglparam:clientdtextyØCalled directly before OnClientPostAdminCheck() as a method to alter administrative permissions before plugins perform final post-connect operations. 
 In general, do not use this function unless you are specifically attempting to change access permissions.  Use OnClientPostAdminCheck() instead if you simply want to perform post-connect authorization routines. 
 See OnClientPostAdminCheck() for more information. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamevOnClientPostAdminCheckhdocStart @fdocEnd!jddocs¢ebriefx‡Called once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.dtagsÇ¢ctag`dtextx‡Called once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call.¢ctaglparam:clientdtextxCalled once a client is authorized and fully in-game, and after all post-connection authorizations have been performed. 
 This callback is guaranteed to occur on all clients, and always after each OnClientPutInServer() call. 
 Client index.dkindgforwardjreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamemGetMaxClientshdocStart fdocEnd ddocsˆdkindfnativejreturnTypecintiargumentsÄˇødnamerGetMaxHumanPlayershdocStart$DfdocEnd&Œddocs¢ebriefyReturns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. 
 You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally.dtagsÇ¢ctag`dtextyReturns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. 
 You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally.¢ctagfreturndtextyCReturns the maximum number of human players allowed on the server.  This is a game-specific function used on newer games to limit the number of humans that can join a game and can be lower than MaxClients. It is the number often reflected in the server browser or when viewing the output of the status command. On unsupported games or modes without overrides, it will return the same value as MaxClients. 
 You should not globally cache the value to GetMaxHumanPlayers() because it can change across game modes. You may still cache it locally. 
 Maximum number of humans allowed.dkindfnativejreturnTypecintiargumentsÄˇødnamenGetClientCounthdocStart&ÙfdocEnd'¨ddocs¢ebriefx+Returns the client count put in the server.dtagsÉ¢ctag`dtextx+Returns the client count put in the server.¢ctagpparam:inGameOnlydtextx[Returns the client count put in the server. 
 If false connecting players are also counted.¢ctagfreturndtextxwReturns the client count put in the server. 
 If false connecting players are also counted. Client count in the server.dkindfnativejreturnTypecintiargumentsÅ£dtypedbooldnamejinGameOnlyddeclobool inGameOnlyˇødnamemGetClientNamehdocStart'‚fdocEnd)Qddocs¢ebriefxReturns the client's name.dtagsÜ¢ctag`dtextxReturns the client's name.¢ctaglparam:clientdtextx*Returns the client's name. 
 Player index.¢ctagjparam:namedtextxMReturns the client's name. 
 Player index. Buffer to store the client's name.¢ctaglparam:maxlendtextxâReturns the client's name. 
 Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator).¢ctagfreturndtextx´Returns the client's name. 
 Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator). True on success, false otherwise.¢ctageerrordtextx„Returns the client's name. 
 Player index. Buffer to store the client's name. Maximum length of string buffer (includes NULL terminator). True on success, false otherwise. If the client is not connected an error will be thrown.dkindfnativejreturnTypedbooliargumentsÉ£dtypecintdnamefclientddecljint client£dtypefchar[]dnamednameddeclkchar[] name£dtypecintdnamefmaxlenddecljint maxlenˇødnamekGetClientIPhdocStart)ñfdocEnd+eddocs¢ebriefx Retrieves a client's IP address.dtagsá¢ctag`dtextx Retrieves a client's IP address.¢ctaglparam:clientdtextx0Retrieves a client's IP address. 
 Player index.¢ctaghparam:ipdtextxYRetrieves a client's IP address. 
 Player index. Buffer to store the client's ip address.¢ctaglparam:maxlendtextxïRetrieves a client's IP address. 
 Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator).¢ctagmparam:remportdtextx–Retrieves a client's IP address. 
 Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default).¢ctagfreturndtextxÚRetrieves a client's IP address. 
 Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default). True on success, false otherwise.¢ctageerrordtexty*Retrieves a client's IP address. 
 Player index. Buffer to store the client's ip address. Maximum length of string buffer (includes NULL terminator). Remove client's port from the ip string (true by default). True on success, false otherwise. If the client is not connected or the index is invalid.dkindfnativejreturnTypedbooliargumentsÑ£dtypecintdnamefclientddecljint client£dtypefchar[]dnamebipddeclichar[] ip£dtypecintdnamefmaxlenddecljint maxlen£dtypedbooldnamegremportddecllbool remportˇødnamesGetClientAuthStringhdocStart fdocEnd ddocsˆdkindfnativejreturnTypedbooliargumentsÑ£dtypecintdnamefclientddecljint client£dtypefchar[]dnamedauthddeclkchar[] auth£dtypecintdnamefmaxlenddecljint maxlen£dtypedbooldnamehvalidateddeclmbool validateˇødnameoGetClientAuthIdhdocStart.⁄fdocEnd1|ddocs¢ebriefx5Retrieves a client's authentication string (SteamID).dtagsà¢ctag`dtextx5Retrieves a client's authentication string (SteamID).¢ctaglparam:clientdtextxERetrieves a client's authentication string (SteamID). 
 Player index.¢ctagnparam:authTypedtextxeRetrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use.¢ctagjparam:authdtextxãRetrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use. Buffer to store the client's auth id.¢ctaglparam:maxlendtextx«Retrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator).¢ctagnparam:validatedtextyXRetrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT.¢ctagfreturndtextyzRetrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. True on success, false otherwise.¢ctageerrordtexty≤Retrieves a client's authentication string (SteamID). 
 Player index. Auth id type and format to use. Buffer to store the client's auth id. Maximum length of string buffer (includes NULL terminator). Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. True on success, false otherwise. If the client is not connected or the index is invalid.dkindfnativejreturnTypedbooliargumentsÖ£dtypecintdnamefclientddecljint client£dtypejAuthIdTypednamehauthTypeddeclsAuthIdType authType£dtypefchar[]dnamedauthddeclkchar[] auth£dtypecintdnamefmaxlenddecljint maxlen£dtypedbooldnamehvalidateddeclmbool validateˇødnameqGetSteamAccountIDhdocStart1ÏfdocEnd4Wddocs¢ebriefx¡Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.dtagsÖ¢ctag`dtextx¡Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples.¢ctaglparam:clientdtextx—Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. 
 Client Index.¢ctagnparam:validatedtextybReturns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. 
 Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT.¢ctagfreturndtextyäReturns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. 
 Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. Steam account ID or 0 if not available.¢ctageerrordtexty¬Returns the client's Steam account ID, a number uniquely identifying a given Steam account. This number is the basis for the various display SteamID forms, see the AuthIdType enum for examples. 
 Client Index. Check backend validation status. DO NOT PASS FALSE UNLESS YOU UNDERSTAND THE CONSEQUENCES, You WILL KNOW if you need to use this, MOST WILL NOT. Steam account ID or 0 if not available. If the client is not connected or the index is invalid.dkindfnativejreturnTypecintiargumentsÇ£dtypecintdnamefclientddecljint client£dtypedbooldnamehvalidateddeclmbool validateˇødnameoGetClientUserIdhdocStart4öfdocEnd5∫ddocs¢ebriefxcRetrieves a client's user id, which is an index incremented for every client that joins the server.dtagsÑ¢ctag`dtextxcRetrieves a client's user id, which is an index incremented for every client that joins the server.¢ctaglparam:clientdtextxsRetrieves a client's user id, which is an index incremented for every client that joins the server. 
 Player index.¢ctagfreturndtextxäRetrieves a client's user id, which is an index incremented for every client that joins the server. 
 Player index. User id of the client.¢ctageerrordtextx¬Retrieves a client's user id, which is an index incremented for every client that joins the server. 
 Player index. User id of the client. If the client is not connected or the index is invalid.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnameqIsClientConnectedhdocStart5ÁfdocEnd6ùddocs¢ebriefx)Returns if a certain player is connected.dtagsÉ¢ctag`dtextx)Returns if a certain player is connected.¢ctaglparam:clientdtextx9Returns if a certain player is connected. 
 Player index.¢ctagfreturndtextxuReturns if a certain player is connected. 
 Player index. True if player is connected to the server, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamenIsClientInGamehdocStart6ÕfdocEnd7⁄ddocs¢ebriefx1Returns if a certain player has entered the game.dtagsÑ¢ctag`dtextx1Returns if a certain player has entered the game.¢ctaglparam:clientdtextxgReturns if a certain player has entered the game. 
 Player index (index does not have to be connected).¢ctagfreturndtextxùReturns if a certain player has entered the game. 
 Player index (index does not have to be connected). True if player has entered the game, false otherwise.¢ctageerrordtextx≥Returns if a certain player has entered the game. 
 Player index (index does not have to be connected). True if player has entered the game, false otherwise. Invalid client index.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamesIsClientInKickQueuehdocStart8fdocEnd9Iddocs¢ebriefx}Returns if a client is in the "kick queue" (i.e. the client will be kicked shortly and thus they should not appear as valid).dtagsÑ¢ctag`dtextx}Returns if a client is in the "kick queue" (i.e. the client will be kicked shortly and thus they should not appear as valid).¢ctaglparam:clientdtextx°Returns if a client is in the "kick queue" (i.e. the client will be kicked shortly and thus they should not appear as valid). 
 Player index (must be connected).¢ctagfreturndtextxÕReturns if a client is in the "kick queue" (i.e. the client will be kicked shortly and thus they should not appear as valid). 
 Player index (must be connected). True if in the kick queue, false otherwise.¢ctageerrordtextx„Returns if a client is in the "kick queue" (i.e. the client will be kicked shortly and thus they should not appear as valid). 
 Player index (must be connected). True if in the kick queue, false otherwise. Invalid client index.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamenIsPlayerInGamehdocStart fdocEnd ddocsˆdkindestockjreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamerIsClientAuthorizedhdocStart:pfdocEnd;,ddocs¢ebriefx3Returns if a certain player has been authenticated.dtagsÉ¢ctag`dtextx3Returns if a certain player has been authenticated.¢ctaglparam:clientdtextxCReturns if a certain player has been authenticated. 
 Player index.¢ctagfreturndtextx{Returns if a certain player has been authenticated. 
 Player index. True if player has been authenticated, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamelIsFakeClienthdocStart;]fdocEnd<ddocs¢ebriefx-Returns if a certain player is a fake client.dtagsÉ¢ctag`dtextx-Returns if a certain player is a fake client.¢ctaglparam:clientdtextx=Returns if a certain player is a fake client. 
 Player index.¢ctagfreturndtextxoReturns if a certain player is a fake client. 
 Player index. True if player is a fake client, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamepIsClientSourceTVhdocStart<8fdocEnd<Óddocs¢ebriefx0Returns if a certain player is the SourceTV bot.dtagsÉ¢ctag`dtextx0Returns if a certain player is the SourceTV bot.¢ctaglparam:clientdtextx@Returns if a certain player is the SourceTV bot. 
 Player index.¢ctagfreturndtextxuReturns if a certain player is the SourceTV bot. 
 Player index. True if player is the SourceTV bot, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamenIsClientReplayhdocStart=fdocEnd=œddocs¢ebriefx.Returns if a certain player is the Replay bot.dtagsÉ¢ctag`dtextx.Returns if a certain player is the Replay bot.¢ctaglparam:clientdtextx>Returns if a certain player is the Replay bot. 
 Player index.¢ctagfreturndtextxqReturns if a certain player is the Replay bot. 
 Player index. True if player is the Replay bot, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamepIsClientObserverhdocStart=¸fdocEnd>≤ddocs¢ebriefx5Returns if a certain player is an observer/spectator.dtagsÉ¢ctag`dtextx5Returns if a certain player is an observer/spectator.¢ctaglparam:clientdtextxEReturns if a certain player is an observer/spectator. 
 Player index.¢ctagfreturndtextxuReturns if a certain player is an observer/spectator. 
 Player index. True if player is an observer, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamemIsPlayerAlivehdocStart>·fdocEnd@-ddocs¢ebriefxoReturns if the client is alive or dead. 
 Note: This function was originally in SDKTools and was moved to core.dtagsÑ¢ctag`dtextxoReturns if the client is alive or dead. 
 Note: This function was originally in SDKTools and was moved to core.¢ctaglparam:clientdtextxÅReturns if the client is alive or dead. 
 Note: This function was originally in SDKTools and was moved to core. 
 Player's index.¢ctagfreturndtextxØReturns if the client is alive or dead. 
 Note: This function was originally in SDKTools and was moved to core. 
 Player's index. True if the client is alive, false otherwise.¢ctageerrordtextxÏReturns if the client is alive or dead. 
 Note: This function was originally in SDKTools and was moved to core. 
 Player's index. True if the client is alive, false otherwise. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamemGetClientInfohdocStart@YfdocEndA◊ddocs¢ebriefx-Retrieves values from client replicated keys.dtagsá¢ctag`dtextx-Retrieves values from client replicated keys.¢ctaglparam:clientdtextx?Retrieves values from client replicated keys. 
 Player's index.¢ctagiparam:keydtextxKRetrieves values from client replicated keys. 
 Player's index. Key string.¢ctagkparam:valuedtextxbRetrieves values from client replicated keys. 
 Player's index. Key string. Buffer to store value.¢ctaglparam:maxlendtextxàRetrieves values from client replicated keys. 
 Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe).¢ctagfreturndtextx™Retrieves values from client replicated keys. 
 Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe). True on success, false otherwise.¢ctageerrordtextxŸRetrieves values from client replicated keys. 
 Player's index. Key string. Buffer to store value. Maximum length of valve (UTF-8 safe). True on success, false otherwise. Invalid client index, or client not connected.dkindfnativejreturnTypedbooliargumentsÑ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnameckeyddeclpconst char[] key£dtypefchar[]dnameevalueddecllchar[] value£dtypecintdnamefmaxlenddecljint maxlenˇødnamemGetClientTeamhdocStartB/fdocEndC$ddocs¢ebriefx Retrieves a client's team index.dtagsÑ¢ctag`dtextx Retrieves a client's team index.¢ctaglparam:clientdtextx2Retrieves a client's team index. 
 Player's index.¢ctagfreturndtextx^Retrieves a client's team index. 
 Player's index. Team index the client is on (mod specific).¢ctageerrordtextxõRetrieves a client's team index. 
 Player's index. Team index the client is on (mod specific). Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamelSetUserAdminhdocStartCPfdocEndDòddocs¢ebriefxSets a client's AdminId.dtagsÖ¢ctag`dtextxSets a client's AdminId.¢ctaglparam:clientdtextx*Sets a client's AdminId. 
 Player's index.¢ctaghparam:iddtextxgSets a client's AdminId. 
 Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions.¢ctagjparam:tempdtextxïSets a client's AdminId. 
 Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions. True if the id should be freed on disconnect.¢ctageerrordtextx”Sets a client's AdminId. 
 Player's index. AdminId to set.  INVALID_ADMIN_ID removes admin permissions. True if the id should be freed on disconnect. Invalid client index, client not connected, or bogus AdminId.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypegAdminIddnamebidddecljAdminId id£dtypedbooldnamedtempddeclibool tempˇødnamelGetUserAdminhdocStartD‡fdocEndEÃddocs¢ebriefxRetrieves a client's AdminId.dtagsÑ¢ctag`dtextxRetrieves a client's AdminId.¢ctaglparam:clientdtextx/Retrieves a client's AdminId. 
 Player's index.¢ctagfreturndtextxcRetrieves a client's AdminId. 
 Player's index. AdminId of the client, or INVALID_ADMIN_ID if none.¢ctageerrordtextxíRetrieves a client's AdminId. 
 Player's index. AdminId of the client, or INVALID_ADMIN_ID if none. Invalid client index, or client not connected.dkindfnativejreturnTypegAdminIdiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamelAddUserFlagshdocStartE˙fdocEndGddocs¢ebriefxgSets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given.dtagsÑ¢ctag`dtextxgSets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given.¢ctaglparam:clientdtextxySets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. 
 Player's index.¢ctagiparam:...dtextxïSets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. 
 Player's index. Flags to set on the client.¢ctageerrordtextxƒSets access flags on a client.  If the client is not an admin, a temporary, anonymous AdminId is given. 
 Player's index. Flags to set on the client. Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypemAdminFlag ...dnamec...ddeclqAdminFlag ... ...ˇødnameoRemoveUserFlagshdocStartGVfdocEndHfddocs¢ebriefxPRemoves flags from a client.  If the client is not an admin, this has no effect.dtagsÑ¢ctag`dtextxPRemoves flags from a client.  If the client is not an admin, this has no effect.¢ctaglparam:clientdtextxbRemoves flags from a client.  If the client is not an admin, this has no effect. 
 Player's index.¢ctagiparam:...dtextxÉRemoves flags from a client.  If the client is not an admin, this has no effect. 
 Player's index. Flags to remove from the client.¢ctageerrordtextx≤Removes flags from a client.  If the client is not an admin, this has no effect. 
 Player's index. Flags to remove from the client. Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypemAdminFlag ...dnamec...ddeclqAdminFlag ... ...ˇødnameoSetUserFlagBitshdocStartH£fdocEndI¥ddocs¢ebriefxîSets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given.dtagsÉ¢ctag`dtextxîSets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given.¢ctaglparam:clientdtextx¶Sets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given. 
 Player's index.¢ctagkparam:flagsdtextxÀSets access flags on a client using bits instead of flags.  If the client is not an admin, and flags not 0, a temporary, anonymous AdminId is given. 
 Player's index. Bitstring of flags to set on client.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypecintdnameeflagsddecliint flagsˇødnameoGetUserFlagBitshdocStartIÌfdocEndJÁddocs¢ebriefxTReturns client access flags.  If the client is not an admin, the result is always 0.dtagsÑ¢ctag`dtextxTReturns client access flags.  If the client is not an admin, the result is always 0.¢ctaglparam:clientdtextxfReturns client access flags.  If the client is not an admin, the result is always 0. 
 Player's index.¢ctagfreturndtextxlReturns client access flags.  If the client is not an admin, the result is always 0. 
 Player's index. Flags¢ctageerrordtextxõReturns client access flags.  If the client is not an admin, the result is always 0. 
 Player's index. Flags Invalid client index, or client not connected.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamemCanUserTargethdocStartKfdocEndLwddocs¢ebriefx]Returns whether a user can target another user. This is a helper function for CanAdminTarget.dtagsÖ¢ctag`dtextx]Returns whether a user can target another user. This is a helper function for CanAdminTarget.¢ctaglparam:clientdtextxoReturns whether a user can target another user. This is a helper function for CanAdminTarget. 
 Player's index.¢ctaglparam:targetdtextxÜReturns whether a user can target another user. This is a helper function for CanAdminTarget. 
 Player's index. Target player's index.¢ctagfreturndtextxƒReturns whether a user can target another user. This is a helper function for CanAdminTarget. 
 Player's index. Target player's index. True if target is targettable by the player, false otherwise.¢ctageerrordtextxÏReturns whether a user can target another user. This is a helper function for CanAdminTarget. 
 Player's index. Target player's index. True if target is targettable by the player, false otherwise. Invalid or unconnected player indexers.dkindfnativejreturnTypedbooliargumentsÇ£dtypecintdnamefclientddecljint client£dtypecintdnameftargetddecljint targetˇødnamesRunAdminCacheCheckshdocStartLØfdocEndN@ddocs¢ebriefx±Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. 
 Note: This function is based on the internal cache only.dtagsÑ¢ctag`dtextx±Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. 
 Note: This function is based on the internal cache only.¢ctaglparam:clientdtextx¡Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. 
 Note: This function is based on the internal cache only. 
 Client index.¢ctagfreturndtextxÚRuns through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. 
 Note: This function is based on the internal cache only. 
 Client index. True if access was changed, false if it did not.¢ctageerrordtexty-Runs through the Core-defined admin authorization checks on a player. Has no effect if the player is already an admin. 
 Note: This function is based on the internal cache only. 
 Client index. True if access was changed, false if it did not. Invalid client index or client not in-game AND authorized.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnametNotifyPostAdminCheckhdocStartNrfdocEndO«ddocs¢ebriefxøSignals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. 
 Note: This must be sent even if no admin id was assigned.dtagsÉ¢ctag`dtextxøSignals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. 
 Note: This must be sent even if no admin id was assigned.¢ctaglparam:clientdtextxœSignals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. 
 Note: This must be sent even if no admin id was assigned. 
 Client index.¢ctageerrordtexty
Signals that a player has completed post-connection admin checks. Has no effect if the player has already had this event signalled. 
 Note: This must be sent even if no admin id was assigned. 
 Client index. Invalid client index or client not in-game AND authorized.dkindfnativejreturnTypedvoidiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamepCreateFakeClienthdocStartO˙fdocEndPáddocs¢ebriefvCreates a fake client.dtagsÉ¢ctag`dtextvCreates a fake client.¢ctagjparam:namedtextx%Creates a fake client. 
 Name to use.¢ctagfreturndtextxKCreates a fake client. 
 Name to use. Client index on success, 0 otherwise.dkindfnativejreturnTypecintiargumentsÅ£dtypelconst char[]dnamednameddeclqconst char[] nameˇødnamesSetFakeClientConVarhdocStartPºfdocEndQ·ddocs¢ebriefx%Sets a convar value on a fake client.dtagsÖ¢ctag`dtextx%Sets a convar value on a fake client.¢ctaglparam:clientdtextx5Sets a convar value on a fake client. 
 Client index.¢ctagjparam:cvardtextxBSets a convar value on a fake client. 
 Client index. ConVar name.¢ctagkparam:valuedtextxPSets a convar value on a fake client. 
 Client index. ConVar name. ConVar value.¢ctageerrordtextxôSets a convar value on a fake client. 
 Client index. ConVar name. ConVar value. Invalid client index, client not connected, or client not a fake client.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamedcvarddeclqconst char[] cvar£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnameoGetClientHealthhdocStartR:fdocEndSddocs¢ebriefxReturns the client's health.dtagsÑ¢ctag`dtextxReturns the client's health.¢ctaglparam:clientdtextx.Returns the client's health. 
 Player's index.¢ctagfreturndtextx<Returns the client's health. 
 Player's index. Health value.¢ctageerrordtextxyReturns the client's health. 
 Player's index. Health value. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamenGetClientModelhdocStartS:fdocEndTÅddocs¢ebriefx Returns the client's model name.dtagsÖ¢ctag`dtextx Returns the client's model name.¢ctaglparam:clientdtextx2Returns the client's model name. 
 Player's index.¢ctagkparam:modeldtextx[Returns the client's model name. 
 Player's index. Buffer to store the client's model name.¢ctaglparam:maxlendtextxóReturns the client's model name. 
 Player's index. Buffer to store the client's model name. Maximum length of string buffer (includes NULL terminator).¢ctageerrordtextx‘Returns the client's model name. 
 Player's index. Buffer to store the client's model name. Maximum length of string buffer (includes NULL terminator). Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypefchar[]dnameemodelddecllchar[] model£dtypecintdnamefmaxlenddecljint maxlenˇødnameoGetClientWeaponhdocStartT»fdocEndVddocs¢ebriefx!Returns the client's weapon name.dtagsÖ¢ctag`dtextx!Returns the client's weapon name.¢ctaglparam:clientdtextx3Returns the client's weapon name. 
 Player's index.¢ctaglparam:weapondtextx]Returns the client's weapon name. 
 Player's index. Buffer to store the client's weapon name.¢ctaglparam:maxlendtextxôReturns the client's weapon name. 
 Player's index. Buffer to store the client's weapon name. Maximum length of string buffer (includes NULL terminator).¢ctageerrordtextx÷Returns the client's weapon name. 
 Player's index. Buffer to store the client's weapon name. Maximum length of string buffer (includes NULL terminator). Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypefchar[]dnamefweaponddeclmchar[] weapon£dtypecintdnamefmaxlenddecljint maxlenˇødnamemGetClientMaxshdocStartVZfdocEndW[ddocs¢ebriefx%Returns the client's max size vector.dtagsÑ¢ctag`dtextx%Returns the client's max size vector.¢ctaglparam:clientdtextx7Returns the client's max size vector. 
 Player's index.¢ctagiparam:vecdtextxjReturns the client's max size vector. 
 Player's index. Destination vector to store the client's max size.¢ctageerrordtextxßReturns the client's max size vector. 
 Player's index. Destination vector to store the client's max size. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypehfloat[3]dnamecvecddecllfloat vec[3]ˇødnamemGetClientMinshdocStartWïfdocEndXñddocs¢ebriefx%Returns the client's min size vector.dtagsÑ¢ctag`dtextx%Returns the client's min size vector.¢ctaglparam:clientdtextx7Returns the client's min size vector. 
 Player's index.¢ctagiparam:vecdtextxjReturns the client's min size vector. 
 Player's index. Destination vector to store the client's min size.¢ctageerrordtextxßReturns the client's min size vector. 
 Player's index. Destination vector to store the client's min size. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypehfloat[3]dnamecvecddecllfloat vec[3]ˇødnamerGetClientAbsAngleshdocStartX–fdocEndY÷ddocs¢ebriefx$Returns the client's position angle.dtagsÑ¢ctag`dtextx$Returns the client's position angle.¢ctaglparam:clientdtextx6Returns the client's position angle. 
 Player's index.¢ctagiparam:angdtextxoReturns the client's position angle. 
 Player's index. Destination vector to store the client's position angle.¢ctageerrordtextx¨Returns the client's position angle. 
 Player's index. Destination vector to store the client's position angle. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypehfloat[3]dnamecangddecllfloat ang[3]ˇødnamerGetClientAbsOriginhdocStartZfdocEnd[ddocs¢ebriefx#Returns the client's origin vector.dtagsÑ¢ctag`dtextx#Returns the client's origin vector.¢ctaglparam:clientdtextx5Returns the client's origin vector. 
 Player's index.¢ctagiparam:vecdtextxmReturns the client's origin vector. 
 Player's index. Destination vector to store the client's origin vector.¢ctageerrordtextx™Returns the client's origin vector. 
 Player's index. Destination vector to store the client's origin vector. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypehfloat[3]dnamecvecddecllfloat vec[3]ˇødnamenGetClientArmorhdocStart[XfdocEnd\)ddocs¢ebriefxReturns the client's armor.dtagsÑ¢ctag`dtextxReturns the client's armor.¢ctaglparam:clientdtextx-Returns the client's armor. 
 Player's index.¢ctagfreturndtextx:Returns the client's armor. 
 Player's index. Armor value.¢ctageerrordtextxwReturns the client's armor. 
 Player's index. Armor value. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnameoGetClientDeathshdocStart\UfdocEnd],ddocs¢ebriefx!Returns the client's death count.dtagsÑ¢ctag`dtextx!Returns the client's death count.¢ctaglparam:clientdtextx3Returns the client's death count. 
 Player's index.¢ctagfreturndtextx@Returns the client's death count. 
 Player's index. Death count.¢ctageerrordtextx}Returns the client's death count. 
 Player's index. Death count. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamenGetClientFragshdocStart]YfdocEnd^.ddocs¢ebriefx Returns the client's frag count.dtagsÑ¢ctag`dtextx Returns the client's frag count.¢ctaglparam:clientdtextx2Returns the client's frag count. 
 Player's index.¢ctagfreturndtextx>Returns the client's frag count. 
 Player's index. Frag count.¢ctageerrordtextx{Returns the client's frag count. 
 Player's index. Frag count. Invalid client index, client not in game, or no mod support.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnameqGetClientDataRatehdocStart^ZfdocEnd_>ddocs¢ebriefx1Returns the client's send data rate in bytes/sec.dtagsÑ¢ctag`dtextx1Returns the client's send data rate in bytes/sec.¢ctaglparam:clientdtextxCReturns the client's send data rate in bytes/sec. 
 Player's index.¢ctagfreturndtextxNReturns the client's send data rate in bytes/sec. 
 Player's index. Data rate.¢ctageerrordtextxäReturns the client's send data rate in bytes/sec. 
 Player's index. Data rate. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnameqIsClientTimingOuthdocStart_mfdocEnd`eddocs¢ebriefx!Returns if a client is timing outdtagsÑ¢ctag`dtextx!Returns if a client is timing out¢ctaglparam:clientdtextx3Returns if a client is timing out 
 Player's index.¢ctagfreturndtextxbReturns if a client is timing out 
 Player's index. True if client is timing out, false otherwise.¢ctageerrordtextxûReturns if a client is timing out 
 Player's index. True if client is timing out, false otherwise. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamemGetClientTimehdocStart`ïfdocEnda~ddocs¢ebriefx0Returns the client's connection time in seconds.dtagsÑ¢ctag`dtextx0Returns the client's connection time in seconds.¢ctaglparam:clientdtextxBReturns the client's connection time in seconds. 
 Player's index.¢ctagfreturndtextxSReturns the client's connection time in seconds. 
 Player's index. Connection time.¢ctageerrordtextxèReturns the client's connection time in seconds. 
 Player's index. Connection time. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamepGetClientLatencyhdocStarta´fdocEndcddocs¢ebriefx[Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.dtagsÖ¢ctag`dtextx[Returns the client's current latency (RTT), more accurate than GetAvgLatency but jittering.¢ctaglparam:clientdtextxmReturns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. 
 Player's index.¢ctagjparam:flowdtextxàReturns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. 
 Player's index. Traffic flowing direction.¢ctagfreturndtextxπReturns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. 
 Player's index. Traffic flowing direction. Latency, or -1 if network info is not available.¢ctageerrordtextxıReturns the client's current latency (RTT), more accurate than GetAvgLatency but jittering. 
 Player's index. Traffic flowing direction. Latency, or -1 if network info is not available. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnamesGetClientAvgLatencyhdocStartcQfdocEnddïddocs¢ebriefx7Returns the client's average packet latency in seconds.dtagsÖ¢ctag`dtextx7Returns the client's average packet latency in seconds.¢ctaglparam:clientdtextxIReturns the client's average packet latency in seconds. 
 Player's index.¢ctagjparam:flowdtextxdReturns the client's average packet latency in seconds. 
 Player's index. Traffic flowing direction.¢ctagfreturndtextxïReturns the client's average packet latency in seconds. 
 Player's index. Traffic flowing direction. Latency, or -1 if network info is not available.¢ctageerrordtextx—Returns the client's average packet latency in seconds. 
 Player's index. Traffic flowing direction. Latency, or -1 if network info is not available. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnamepGetClientAvgLosshdocStartd÷fdocEndfAddocs¢ebriefxRReturns the client's average packet loss, values go from 0 to 1 (for percentages).dtagsÖ¢ctag`dtextxRReturns the client's average packet loss, values go from 0 to 1 (for percentages).¢ctaglparam:clientdtextxdReturns the client's average packet loss, values go from 0 to 1 (for percentages). 
 Player's index.¢ctagjparam:flowdtextxReturns the client's average packet loss, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction.¢ctagfreturndtextxºReturns the client's average packet loss, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available.¢ctageerrordtextx¯Returns the client's average packet loss, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnameqGetClientAvgChokehdocStartffdocEndgÎddocs¢ebriefxSReturns the client's average packet choke, values go from 0 to 1 (for percentages).dtagsÖ¢ctag`dtextxSReturns the client's average packet choke, values go from 0 to 1 (for percentages).¢ctaglparam:clientdtextxeReturns the client's average packet choke, values go from 0 to 1 (for percentages). 
 Player's index.¢ctagjparam:flowdtextxÄReturns the client's average packet choke, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction.¢ctagfreturndtextxΩReturns the client's average packet choke, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available.¢ctageerrordtextx˘Returns the client's average packet choke, values go from 0 to 1 (for percentages). 
 Player's index. Traffic flowing direction. Average packet loss, or -1 if network info is not available. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnamepGetClientAvgDatahdocStarth*fdocEndi=ddocs¢ebriefx,Returns the client's data flow in bytes/sec.dtagsÖ¢ctag`dtextx,Returns the client's data flow in bytes/sec.¢ctaglparam:clientdtextx>Returns the client's data flow in bytes/sec. 
 Player's index.¢ctagjparam:flowdtextxYReturns the client's data flow in bytes/sec. 
 Player's index. Traffic flowing direction.¢ctagfreturndtextxdReturns the client's data flow in bytes/sec. 
 Player's index. Traffic flowing direction. Data flow.¢ctageerrordtextx†Returns the client's data flow in bytes/sec. 
 Player's index. Traffic flowing direction. Data flow. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnamesGetClientAvgPacketshdocStarti{fdocEndj¶ddocs¢ebriefx=Returns the client's average packet frequency in packets/sec.dtagsÖ¢ctag`dtextx=Returns the client's average packet frequency in packets/sec.¢ctaglparam:clientdtextxOReturns the client's average packet frequency in packets/sec. 
 Player's index.¢ctagjparam:flowdtextxjReturns the client's average packet frequency in packets/sec. 
 Player's index. Traffic flowing direction.¢ctagfreturndtextx|Returns the client's average packet frequency in packets/sec. 
 Player's index. Traffic flowing direction. Packet frequency.¢ctageerrordtextx∏Returns the client's average packet frequency in packets/sec. 
 Player's index. Traffic flowing direction. Packet frequency. Invalid client index, client not connected, or fake client.dkindfnativejreturnTypeefloatiargumentsÇ£dtypecintdnamefclientddecljint client£dtypegNetFlowdnamedflowddecllNetFlow flowˇødnameqGetClientOfUserIdhdocStartjÁfdocEndk∞ddocs¢ebriefx4Translates an userid index to the real player index.dtagsÑ¢ctag`dtextx4Translates an userid index to the real player index.¢ctaglparam:useriddtextxDTranslates an userid index to the real player index. 
 Userid value.¢ctagfreturndtextxRTranslates an userid index to the real player index. 
 Userid value. Client value.¢ctageerrordtextxoTranslates an userid index to the real player index. 
 Userid value. Client value. Returns 0 if invalid userid.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefuseridddecljint useridˇødnamejKickClienthdocStartkﬂfdocEndoKddocs¢ebriefyﬂDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs.dtagsÖ¢ctag`dtextyﬂDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs.¢ctaglparam:clientdtextyÔDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs. 
 Client index.¢ctaglparam:formatdtextyjDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine.¢ctagiparam:...dtextyêDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters.¢ctageerrordtextyøDisconnects a client from the server as soon as the next frame starts. 
 Note: Originally, KickClient() was immediate.  The delay was introduced because despite warnings, plugins were using it in ways that would crash. The new safe version can break cases that rely on immediate disconnects, but ensures that plugins do not accidentally cause crashes. 
 If you need immediate disconnects, use KickClientEx(). 
 Note: IsClientInKickQueue() will return true before the kick occurs. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters. Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamelKickClientExhdocStartoïfdocEndqËddocs¢ebriefx◊Immediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame.dtagsÖ¢ctag`dtextx◊Immediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame.¢ctaglparam:clientdtextxÁImmediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. 
 Client index.¢ctaglparam:formatdtextybImmediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine.¢ctagiparam:...dtextyàImmediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters.¢ctageerrordtexty∑Immediately disconnects a client from the server. 
 Kicking clients from certain events or callbacks may cause crashes.  If in doubt, create a short (0.1 second) timer to kick the client in the next available frame. 
 Client index. Optional formatting rules for disconnect reason. Note that a period is automatically appended to the string by the engine. Variable number of format parameters. Invalid client index, or client not connected.dkindfnativejreturnTypedvoidiargumentsÉ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamepChangeClientTeamhdocStartr4fdocEndsÜddocs¢ebriefxmChanges a client's team through the mod's generic team changing function. On CS:S, this will kill the player.dtagsÑ¢ctag`dtextxmChanges a client's team through the mod's generic team changing function. On CS:S, this will kill the player.¢ctaglparam:clientdtextx}Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player. 
 Client index.¢ctagjparam:teamdtextxñChanges a client's team through the mod's generic team changing function. On CS:S, this will kill the player. 
 Client index. Mod-specific team index.¢ctageerrordtextx⁄Changes a client's team through the mod's generic team changing function. On CS:S, this will kill the player. 
 Client index. Mod-specific team index. Invalid client index, client not connected, or lack of mod support.dkindfnativejreturnTypedvoidiargumentsÇ£dtypecintdnamefclientddecljint client£dtypecintdnamedteamddeclhint teamˇødnameoGetClientSerialhdocStartsøfdocEndtîddocs¢ebriefx-Returns the clients unique serial identifier.dtagsÑ¢ctag`dtextx-Returns the clients unique serial identifier.¢ctaglparam:clientdtextx=Returns the clients unique serial identifier. 
 Client index.¢ctagfreturndtextxLReturns the clients unique serial identifier. 
 Client index. Serial number.¢ctageerrordtextx{Returns the clients unique serial identifier. 
 Client index. Serial number. Invalid client index, or client not connected.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefclientddecljint clientˇødnamesGetClientFromSerialhdocStartt¡fdocEnduhddocs¢ebriefx.Returns the client index by its serial number.dtagsÉ¢ctag`dtextx.Returns the client index by its serial number.¢ctaglparam:serialdtextx?Returns the client index by its serial number. 
 Serial number.¢ctagfreturndtextxfReturns the client index by its serial number. 
 Serial number. Client index, or 0 for invalid serial.dkindfnativejreturnTypecintiargumentsÅ£dtypecintdnamefserialddecljint serialˇjmethodmapsÄiconstantsÄeenumsÇødnamegNetFlowhdocStarthfdocEndçddocs¢ebriefxNetwork flow directions.dtagsÅ¢ctag`dtextxNetwork flow directions.gentriesÉødnamepNetFlow_OutgoinghdocStartπfdocEnd—ddocsˆˇødnamepNetFlow_IncominghdocStartÏfdocEndddocsˆˇødnamelNetFlow_BothhdocStartfdocEndAddocsˆˇˇødnamejAuthIdTypehdocStartIfdocEndoddocs¢ebriefyAuth string types. 
 Note that for the Steam2 and Steam3 types, the following ids are also valid values: "STEAM_ID_PENDING" - Authentication is pending. "STEAM_ID_LAN" - Authentication is disabled because of being on a LAN server. "BOT" - The client is a bot.dtagsÅ¢ctag`dtextyAuth string types. 
 Note that for the Steam2 and Steam3 types, the following ids are also valid values: "STEAM_ID_PENDING" - Authentication is pending. "STEAM_ID_LAN" - Authentication is disabled because of being on a LAN server. "BOT" - The client is a bot.gentriesÑødnamemAuthId_EnginehdocStartùfdocEndﬁddocsˆˇødnamemAuthId_Steam2hdocStart‰fdocEnd	3ddocsˆˇødnamemAuthId_Steam3hdocStart	ùfdocEnd	œddocsˆˇødnamepAuthId_SteamID64hdocStart	ÈfdocEnd
)ddocsˆˇˇhtypesetsÄhtypedefsÄ