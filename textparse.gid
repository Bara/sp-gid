{"functions":[{"name":"SMC_CreateParser","docStart":7458,"docEnd":7611,"docs":{"brief":"Creates a new SMC file format parser.  This is used to set parse hooks.","tags":[{"tag":"","text":"Creates a new SMC file format parser.  This is used to set parse hooks."},{"tag":"return","text":"Creates a new SMC file format parser.  This is used to set parse hooks.\nA new Handle to an SMC Parse structure."}]},"kind":"native","returnType":"SMCParser","arguments":[]},{"name":"SMC_ParseFile","docStart":7653,"docEnd":8096,"docs":{"brief":"Parses an SMC file.","tags":[{"tag":"","text":"Parses an SMC file."},{"tag":"param:smc","text":"Parses an SMC file.\nA Handle to an SMC Parse structure."},{"tag":"param:file","text":"Parses an SMC file.\nA Handle to an SMC Parse structure.A string containing the file path."},{"tag":"param:line","text":"Parses an SMC file.\nA Handle to an SMC Parse structure.A string containing the file path.An optional by reference cell to store the last line number read."},{"tag":"param:col","text":"Parses an SMC file.\nA Handle to an SMC Parse structure.A string containing the file path.An optional by reference cell to store the last line number read.An optional by reference cell to store the last column number read."},{"tag":"return","text":"Parses an SMC file.\nA Handle to an SMC Parse structure.A string containing the file path.An optional by reference cell to store the last line number read.An optional by reference cell to store the last column number read.An SMCParseError result."},{"tag":"error","text":"Parses an SMC file.\nA Handle to an SMC Parse structure.A string containing the file path.An optional by reference cell to store the last line number read.An optional by reference cell to store the last column number read.An SMCParseError result.Invalid or corrupt Handle."}]},"kind":"native","returnType":"SMCError","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc"},{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"int&","name":"line","decl":"int& line"},{"type":"int&","name":"col","decl":"int& col"}]},{"name":"SMC_GetErrorString","docStart":8188,"docEnd":8623,"docs":{"brief":"Gets an error string for an SMCError code.","tags":[{"tag":"","text":"Gets an error string for an SMCError code."},{"tag":"note","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false."},{"tag":"note","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false.SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false."},{"tag":"param:error","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false.SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.\nThe SMCParseError code."},{"tag":"param:buffer","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false.SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure)."},{"tag":"param:buf_max","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false.SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure).The maximum size of the buffer."},{"tag":"return","text":"Gets an error string for an SMCError code.\nSMCError_Okay returns false.SMCError_Custom (which is thrown on SMCParse_HaltFail) returns false.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure).The maximum size of the buffer.True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"SMCError","name":"error","decl":"SMCError error"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"buf_max","decl":"int buf_max"}]},{"name":"SMC_SetParseStart","docStart":8704,"docEnd":8923,"docs":{"brief":"Sets the SMC_ParseStart function of a parse Handle.","tags":[{"tag":"","text":"Sets the SMC_ParseStart function of a parse Handle."},{"tag":"param:smc","text":"Sets the SMC_ParseStart function of a parse Handle.\nHandle to an SMC Parse."},{"tag":"param:func","text":"Sets the SMC_ParseStart function of a parse Handle.\nHandle to an SMC Parse.SMC_ParseStart function."},{"tag":"error","text":"Sets the SMC_ParseStart function of a parse Handle.\nHandle to an SMC Parse.SMC_ParseStart function.Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc"},{"type":"SMC_ParseStart","name":"func","decl":"SMC_ParseStart func"}]},{"name":"SMC_SetParseEnd","docStart":8992,"docEnd":9198,"docs":{"brief":"Sets the SMC_ParseEnd of a parse handle.","tags":[{"tag":"","text":"Sets the SMC_ParseEnd of a parse handle."},{"tag":"param:smc","text":"Sets the SMC_ParseEnd of a parse handle.\nHandle to an SMC Parse."},{"tag":"param:func","text":"Sets the SMC_ParseEnd of a parse handle.\nHandle to an SMC Parse.SMC_ParseEnd function."},{"tag":"error","text":"Sets the SMC_ParseEnd of a parse handle.\nHandle to an SMC Parse.SMC_ParseEnd function.Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc"},{"type":"SMC_ParseEnd","name":"func","decl":"SMC_ParseEnd func"}]},{"name":"SMC_SetReaders","docStart":9263,"docEnd":9544,"docs":{"brief":"Sets the three main reader functions.","tags":[{"tag":"","text":"Sets the three main reader functions."},{"tag":"param:smc","text":"Sets the three main reader functions.\nAn SMC parse Handle."},{"tag":"param:ns","text":"Sets the three main reader functions.\nAn SMC parse Handle.An SMC_NewSection function pointer."},{"tag":"param:kv","text":"Sets the three main reader functions.\nAn SMC parse Handle.An SMC_NewSection function pointer.An SMC_KeyValue function pointer."},{"tag":"param:es","text":"Sets the three main reader functions.\nAn SMC parse Handle.An SMC_NewSection function pointer.An SMC_KeyValue function pointer.An SMC_EndSection function pointer."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc"},{"type":"SMC_NewSection","name":"ns","decl":"SMC_NewSection ns"},{"type":"SMC_KeyValue","name":"kv","decl":"SMC_KeyValue kv"},{"type":"SMC_EndSection","name":"es","decl":"SMC_EndSection es"}]},{"name":"SMC_SetRawLine","docStart":9644,"docEnd":9804,"docs":{"brief":"Sets a raw line reader on an SMC parser Handle.","tags":[{"tag":"","text":"Sets a raw line reader on an SMC parser Handle."},{"tag":"param:smc","text":"Sets a raw line reader on an SMC parser Handle.\nHandle to an SMC Parse."},{"tag":"param:func","text":"Sets a raw line reader on an SMC parser Handle.\nHandle to an SMC Parse.SMC_RawLine function."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"smc","decl":"Handle smc"},{"type":"SMC_RawLine","name":"func","decl":"SMC_RawLine func"}]}],"methodmaps":[{"name":"SMCParser","docStart":5364,"docEnd":5681,"docs":{"brief":"An SMCParser is a callback-driven parser for SourceMod configuration files.SMC files are similar to Valve KeyValues format, with two key differences:(1) SMC cannot handle single-item entries (that is, a key with no value).(2) SMC files can have multi-line comment blocks, whereas KeyValues cannot","tags":[{"tag":"","text":"An SMCParser is a callback-driven parser for SourceMod configuration files.SMC files are similar to Valve KeyValues format, with two key differences:(1) SMC cannot handle single-item entries (that is, a key with no value).(2) SMC files can have multi-line comment blocks, whereas KeyValues cannot"}]},"methods":[{"name":"SMCParser","docStart":5717,"docEnd":5756,"docs":{"brief":"Create a new SMC file format parser","tags":[{"tag":"","text":"Create a new SMC file format parser"}]},"kind":null,"returnType":"SMCParser","arguments":[]},{"name":"ParseFile","docStart":5790,"docEnd":6097,"docs":{"brief":"Parses an SMC file.","tags":[{"tag":"","text":"Parses an SMC file."},{"tag":"param:file","text":"Parses an SMC file.\nA string containing the file path."},{"tag":"param:line","text":"Parses an SMC file.\nA string containing the file path.An optional variable to store the last line number read."},{"tag":"param:col","text":"Parses an SMC file.\nA string containing the file path.An optional variable to store the last line number read.An optional variable to store the last column number read."},{"tag":"return","text":"Parses an SMC file.\nA string containing the file path.An optional variable to store the last line number read.An optional variable to store the last column number read.An SMCParseError result"}]},"kind":null,"returnType":"SMCError","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"int&","name":"line","decl":"int& line"},{"type":"int&","name":"col","decl":"int& col"}]},{"name":"GetErrorString","docStart":7052,"docEnd":7369,"docs":{"brief":"Gets an error string for an SMCError code.","tags":[{"tag":"","text":"Gets an error string for an SMCError code."},{"tag":"param:error","text":"Gets an error string for an SMCError code.\nThe SMCParseError code."},{"tag":"param:buffer","text":"Gets an error string for an SMCError code.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure)."},{"tag":"param:buf_max","text":"Gets an error string for an SMCError code.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure).The maximum size of the buffer."},{"tag":"return","text":"Gets an error string for an SMCError code.\nThe SMCParseError code.A string buffer for the error (contents undefined on failure).The maximum size of the buffer.The number of characters written to buffer"}]},"kind":null,"returnType":"void","arguments":[{"type":"SMCError","name":"error","decl":"SMCError error"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"buf_max","decl":"int buf_max"}]}],"properties":[{"name":"OnStart","docStart":6186,"docEnd":6243,"docs":{"brief":"Sets the callback for receiving SMC_ParseStart events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_ParseStart events"}]},"type":"SMC_ParseStart","getter":false,"setter":true},{"name":"OnEnd","docStart":6331,"docEnd":6386,"docs":{"brief":"Sets the callback for receiving SMC_ParseEnd events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_ParseEnd events"}]},"type":"SMC_ParseEnd","getter":false,"setter":true},{"name":"OnEnterSection","docStart":6468,"docEnd":6525,"docs":{"brief":"Sets the callback for receiving SMC_NewSection events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_NewSection events"}]},"type":"SMC_NewSection","getter":false,"setter":true},{"name":"OnLeaveSection","docStart":6620,"docEnd":6677,"docs":{"brief":"Sets the callback for receiving SMC_EndSection events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_EndSection events"}]},"type":"SMC_EndSection","getter":false,"setter":true},{"name":"OnKeyValue","docStart":6772,"docEnd":6827,"docs":{"brief":"Sets the callback for receiving SMC_KeyValue events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_KeyValue events"}]},"type":"SMC_KeyValue","getter":false,"setter":true},{"name":"OnRawLine","docStart":6914,"docEnd":6968,"docs":{"brief":"Sets the callback for receiving SMC_RawLine events","tags":[{"tag":"","text":"Sets the callback for receiving SMC_RawLine events"}]},"type":"SMC_RawLine","getter":false,"setter":true}]}],"constants":[],"enums":[{"name":"SMCResult","docStart":1974,"docEnd":2010,"docs":{"brief":"Parse result directive.","tags":[{"tag":"","text":"Parse result directive."}]},"entries":[{"name":"SMCParse_Continue","docStart":2060,"docEnd":2084,"docs":null},{"name":"SMCParse_Halt","docStart":2115,"docEnd":2140,"docs":null},{"name":"SMCParse_HaltFail","docStart":2171,"docEnd":2210,"docs":null}]},{"name":"SMCError","docStart":2218,"docEnd":2249,"docs":{"brief":"Parse error codes.","tags":[{"tag":"","text":"Parse error codes."}]},"entries":[{"name":"SMCError_Okay","docStart":2298,"docEnd":2314,"docs":null},{"name":"SMCError_StreamOpen","docStart":2345,"docEnd":2374,"docs":null},{"name":"SMCError_StreamError","docStart":2405,"docEnd":2439,"docs":null},{"name":"SMCError_Custom","docStart":2470,"docEnd":2509,"docs":null},{"name":"SMCError_InvalidSection1","docStart":2540,"docEnd":2607,"docs":null},{"name":"SMCError_InvalidSection2","docStart":2638,"docEnd":2687,"docs":null},{"name":"SMCError_InvalidSection3","docStart":2718,"docEnd":2784,"docs":null},{"name":"SMCError_InvalidSection4","docStart":2815,"docEnd":2865,"docs":null},{"name":"SMCError_InvalidSection5","docStart":2896,"docEnd":2946,"docs":null},{"name":"SMCError_InvalidTokens","docStart":2977,"docEnd":3039,"docs":null},{"name":"SMCError_TokenOverflow","docStart":3070,"docEnd":3105,"docs":null},{"name":"SMCError_InvalidProperty1","docStart":3136,"docEnd":3190,"docs":null}]}],"typesets":[],"typedefs":[{"name":"SMC_ParseStart","docStart":3198,"docEnd":3293,"docs":{"brief":"Called when parsing is started.","tags":[{"tag":"","text":"Called when parsing is started."},{"tag":"param:smc","text":"Called when parsing is started.\nThe SMC Parse Handle."}]},"type":"function void(SMCParser smc)"},{"name":"SMC_NewSection","docStart":3354,"docEnd":3721,"docs":{"brief":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped.","tags":[{"tag":"","text":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped."},{"tag":"param:smc","text":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped.\nThe SMC Parser."},{"tag":"param:name","text":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped.\nThe SMC Parser.String containing section name."},{"tag":"param:opt_quotes","text":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped.\nThe SMC Parser.String containing section name.True if the section name was quote-enclosed in the file."},{"tag":"return","text":"Called when the parser is entering a new section or sub-section.\nNote: Enclosing quotes are always stripped.\nThe SMC Parser.String containing section name.True if the section name was quote-enclosed in the file.An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] name, bool opt_quotes)"},{"name":"SMC_KeyValue","docStart":3823,"docEnd":4290,"docs":{"brief":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.","tags":[{"tag":"","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped."},{"tag":"param:smc","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser."},{"tag":"param:key","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser.String containing key name."},{"tag":"param:value","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser.String containing key name.String containing value name."},{"tag":"param:key_quotes","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser.String containing key name.String containing value name.Whether or not the key was enclosed in quotes."},{"tag":"param:value_quotes","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser.String containing key name.String containing value name.Whether or not the key was enclosed in quotes.Whether or not the value was enclosed in quotes."},{"tag":"return","text":"Called when the parser finds a new key/value pair.\nNote: Enclosing quotes are always stripped.\nThe SMCParser.String containing key name.String containing value name.Whether or not the key was enclosed in quotes.Whether or not the value was enclosed in quotes.An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] key, const char[] value, bool key_quotes, bool value_quotes)"},{"name":"SMC_EndSection","docStart":4428,"docEnd":4595,"docs":{"brief":"Called when the parser finds the end of the current section.","tags":[{"tag":"","text":"Called when the parser finds the end of the current section."},{"tag":"param:smc","text":"Called when the parser finds the end of the current section.\nThe SMCParser."},{"tag":"return","text":"Called when the parser finds the end of the current section.\nThe SMCParser.An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc)"},{"name":"SMC_ParseEnd","docStart":4661,"docEnd":4883,"docs":{"brief":"Called when parsing is halted.","tags":[{"tag":"","text":"Called when parsing is halted."},{"tag":"param:smc","text":"Called when parsing is halted.\nThe SMCParser."},{"tag":"param:halted","text":"Called when parsing is halted.\nThe SMCParser.True if abnormally halted, false otherwise."},{"tag":"param:failed","text":"Called when parsing is halted.\nThe SMCParser.True if abnormally halted, false otherwise.True if parsing failed, false otherwise."}]},"type":"function void(SMCParser smc, bool halted, bool failed)"},{"name":"SMC_RawLine","docStart":4968,"docEnd":5270,"docs":{"brief":"Callback for whenever a new line of text is about to be parsed.","tags":[{"tag":"","text":"Callback for whenever a new line of text is about to be parsed."},{"tag":"param:smc","text":"Callback for whenever a new line of text is about to be parsed.\nThe SMCParser."},{"tag":"param:line","text":"Callback for whenever a new line of text is about to be parsed.\nThe SMCParser.A string containing the raw line from the file."},{"tag":"param:lineno","text":"Callback for whenever a new line of text is about to be parsed.\nThe SMCParser.A string containing the raw line from the file.The line number it occurs on."},{"tag":"return","text":"Callback for whenever a new line of text is about to be parsed.\nThe SMCParser.A string containing the raw line from the file.The line number it occurs on.An SMCResult action to take."}]},"type":"function SMCResult(SMCParser smc, const char[] line, int lineno)"}]}