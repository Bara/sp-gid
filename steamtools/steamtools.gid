{"functions":[{"name":"Steam_FullyLoaded","docStart":111,"docEnd":242,"docs":{"brief":"Called after SteamTools has completely finished loading.\nNo features are available before this point.\n","tags":[{"tag":"","text":"Called after SteamTools has completely finished loading.\nNo features are available before this point.\n"}]},"kind":"forward","returnType":"void","arguments":[]},{"name":"Steam_Shutdown","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[]},{"name":"Steam_IsVACEnabled","docStart":310,"docEnd":424,"docs":{"brief":"Gets the current status of VAC on the server.","tags":[{"tag":"","text":"Gets the current status of VAC on the server."},{"tag":"return","text":"A bool representing the current VAC status."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Steam_GetPublicIP","docStart":460,"docEnd":654,"docs":{"brief":"Gets the server's external IP address, as reported by Steam.","tags":[{"tag":"","text":"Gets the server's external IP address, as reported by Steam."},{"tag":"param:octets","text":"Reference to an array to be filled with the octets of\nthe IP address.\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"int[4]","name":"octets","decl":"int octets[4]"}]},{"name":"Steam_RestartRequested","docStart":703,"docEnd":917,"docs":{"brief":"Is fired when the Steam master servers report that your server is\noutdated","tags":[{"tag":"","text":"Is fired when the Steam master servers report that your server is\noutdated"},{"tag":"return","text":"Plugin_Continue to continue normal operation or Plugin_Handled\nto block the regular console message."}]},"kind":"forward","returnType":"Action","arguments":[]},{"name":"Steam_RequestGroupStatus","docStart":961,"docEnd":1262,"docs":{"brief":"Requests a client's status in a Steam group.\nResponse is returned in Steam_GroupStatusResult forward.","tags":[{"tag":"","text":"Requests a client's status in a Steam group.\nResponse is returned in Steam_GroupStatusResult forward."},{"tag":"param:client","text":"Client index."},{"tag":"param:groupAccountID","text":"32-bit account ID of group."},{"tag":"return","text":"A bool representing whether or not the request was sent to\nSteam."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"groupAccountID","decl":"int groupAccountID"}]},{"name":"Steam_GroupStatusResult","docStart":1334,"docEnd":1914,"docs":{"brief":"Called when a response to a group status request is recieved.\nThis is called for all responses recieved, not just ones requested by\nyour plugin.","tags":[{"tag":"","text":"Called when a response to a group status request is recieved.\nThis is called for all responses recieved, not just ones requested by\nyour plugin."},{"tag":"param:client","text":"Client index."},{"tag":"param:groupAccountID","text":"32-bit account ID of group. Make sure to check\nthis agaist the ID you are expecting."},{"tag":"param:groupMember","text":"Whether or not the client is a member in the\nspecified group."},{"tag":"param:groupMember","text":"Whether or not the client is an officer in the\nspecified group.\n"}]},"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"groupAccountID","decl":"int groupAccountID"},{"type":"bool","name":"groupMember","decl":"bool groupMember"},{"type":"bool","name":"groupOfficer","decl":"bool groupOfficer"}]},{"name":"Steam_RequestGameplayStats","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[]},{"name":"Steam_GameplayStats","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"rank","decl":"int rank"},{"type":"int","name":"totalConnects","decl":"int totalConnects"},{"type":"int","name":"totalMinutesPlayed","decl":"int totalMinutesPlayed"}]},{"name":"Steam_RequestServerReputation","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[]},{"name":"Steam_Reputation","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"reputationScore","decl":"int reputationScore"},{"type":"bool","name":"banned","decl":"bool banned"},{"type":"int","name":"bannedIP","decl":"int bannedIP"},{"type":"int","name":"bannedPort","decl":"int bannedPort"},{"type":"int","name":"bannedGameID","decl":"int bannedGameID"},{"type":"int","name":"banExpires","decl":"int banExpires"}]},{"name":"Steam_IsConnected","docStart":2411,"docEnd":2550,"docs":{"brief":"Gets the current Steam connection state, the forwards below fire\nwhenever this changes.","tags":[{"tag":"","text":"Gets the current Steam connection state, the forwards below fire\nwhenever this changes."},{"tag":"return","text":"Steam connection state."}]},"kind":"native","returnType":"bool","arguments":[]},{"name":"Steam_SteamServersConnected","docStart":2585,"docEnd":2699,"docs":{"brief":"Fired upon a successfull connection to Steam.\nIs also fired for late-loaded plugins.\n","tags":[{"tag":"","text":"Fired upon a successfull connection to Steam.\nIs also fired for late-loaded plugins.\n"}]},"kind":"forward","returnType":"void","arguments":[]},{"name":"Steam_SteamServersDisconnected","docStart":2745,"docEnd":3048,"docs":{"brief":"Fired upon disconnection from Steam.\nIs also fired for late-loaded plugins.\n\nFor plugins loaded with the server, this will normally be fired right\nafter Steam_FullyLoaded, closly followed by Steam_SteamServersConnected\nif a successfull connection is established.\n","tags":[{"tag":"","text":"Fired upon disconnection from Steam.\nIs also fired for late-loaded plugins.\n\nFor plugins loaded with the server, this will normally be fired right\nafter Steam_FullyLoaded, closly followed by Steam_SteamServersConnected\nif a successfull connection is established.\n"}]},"kind":"forward","returnType":"void","arguments":[]},{"name":"Steam_SetRule","docStart":3097,"docEnd":3491,"docs":{"brief":"Sets an entry in the server's list of rules. This list is used to\nbuild the response to the A2S_RULES query and is generally known as\nthe list of public convars.","tags":[{"tag":"","text":"Sets an entry in the server's list of rules. This list is used to\nbuild the response to the A2S_RULES query and is generally known as\nthe list of public convars."},{"tag":"param:key","text":"Name of the key to set, is created if it does not already\nexist."},{"tag":"param:value","text":"Value of the key to set, the named key is removed if this\nis blank.\n"}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"key","decl":"const char[] key"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"Steam_ClearRules","docStart":3558,"docEnd":3742,"docs":{"brief":"Clears the server's list of rules. This list is used to build the\nresponse to the A2S_RULES query and is generally known as the list of\npublic convars.\n","tags":[{"tag":"","text":"Clears the server's list of rules. This list is used to build the\nresponse to the A2S_RULES query and is generally known as the list of\npublic convars.\n"}]},"kind":"native","returnType":"void","arguments":[]},{"name":"Steam_ForceHeartbeat","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[]},{"name":"Steam_AddMasterServer","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"serverAddress","decl":"const char[] serverAddress"}]},{"name":"Steam_RemoveMasterServer","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"serverAddress","decl":"const char[] serverAddress"}]},{"name":"Steam_GetNumMasterServers","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[]},{"name":"Steam_GetMasterServerAddress","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"int","name":"server","decl":"int server"},{"type":"char[]","name":"serverAddress","decl":"char[] serverAddress"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_SetGameDescription","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"gameDescription","decl":"char[] gameDescription"}]},{"name":"Steam_RequestStats","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Steam_StatsReceived","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Steam_StatsUnloaded","docStart":0,"docEnd":0,"docs":null,"kind":"forward","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Steam_GetStat","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"statName","decl":"const char[] statName"}]},{"name":"Steam_GetStatFloat","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"statName","decl":"const char[] statName"}]},{"name":"Steam_IsAchieved","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"achievementName","decl":"const char[] achievementName"}]},{"name":"Steam_GetNumClientSubscriptions","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Steam_GetClientSubscription","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"index","decl":"int index"}]},{"name":"Steam_GetNumClientDLCs","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"}]},{"name":"Steam_GetClientDLC","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"index","decl":"int index"}]},{"name":"Steam_CheckClientSubscription","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"subid","decl":"int subid"}]},{"name":"Steam_CheckClientDLC","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"appid","decl":"int appid"}]},{"name":"Steam_GetCSteamIDForClient","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"char[]","name":"steamID","decl":"char[] steamID"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_SetCustomSteamID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"renderedID","decl":"const char[] renderedID"}]},{"name":"Steam_GetCustomSteamID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"char[]","name":"renderedID","decl":"char[] renderedID"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_RenderedIDToCSteamID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"renderedID","decl":"const char[] renderedID"},{"type":"char[]","name":"steamID","decl":"char[] steamID"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_CSteamIDToRenderedID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"steamID","decl":"const char[] steamID"},{"type":"char[]","name":"renderedID","decl":"char[] renderedID"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_GroupIDToCSteamID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"int","name":"groupID","decl":"int groupID"},{"type":"char[]","name":"steamID","decl":"char[] steamID"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"Steam_CSteamIDToGroupID","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"steamID","decl":"const char[] steamID"}]},{"name":"Steam_CreateHTTPRequest","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"HTTPRequestHandle","arguments":[{"type":"HTTPMethod","name":"HTTPRequestMethod","decl":"HTTPMethod HTTPRequestMethod"},{"type":"const char[]","name":"absoluteURL","decl":"const char[] absoluteURL"}]},{"name":"Steam_SetHTTPRequestNetworkActivityTimeout","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"int","name":"timeoutSeconds","decl":"int timeoutSeconds"}]},{"name":"Steam_SetHTTPRequestHeaderValue","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"headerName","decl":"const char[] headerName"},{"type":"const char[]","name":"headerValue","decl":"const char[] headerValue"}]},{"name":"Steam_SetHTTPRequestGetOrPostParameter","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"paramName","decl":"const char[] paramName"},{"type":"const char[]","name":"paramValue","decl":"const char[] paramValue"}]},{"name":"Steam_SendHTTPRequest","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"HTTPRequestComplete","name":"callbackFunction","decl":"HTTPRequestComplete callbackFunction"},{"type":"any","name":"contextData","decl":"any contextData"}]},{"name":"Steam_DeferHTTPRequest","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"}]},{"name":"Steam_PrioritizeHTTPRequest","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"}]},{"name":"Steam_GetHTTPResponseHeaderSize","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"headerName","decl":"const char[] headerName"}]},{"name":"Steam_GetHTTPResponseHeaderValue","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"headerName","decl":"const char[] headerName"},{"type":"char[]","name":"headerValueBuffer","decl":"char[] headerValueBuffer"},{"type":"int","name":"bufferSize","decl":"int bufferSize"}]},{"name":"Steam_GetHTTPResponseBodySize","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"int","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"}]},{"name":"Steam_GetHTTPResponseBodyData","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"char[]","name":"bodyDataBuffer","decl":"char[] bodyDataBuffer"},{"type":"int","name":"bufferSize","decl":"int bufferSize"}]},{"name":"Steam_WriteHTTPResponseBody","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"filePath","decl":"const char[] filePath"}]},{"name":"Steam_ReleaseHTTPRequest","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"}]},{"name":"Steam_GetHTTPDownloadProgressPercent","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"float","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"}]},{"name":"Steam_SetHTTPRequestRawPostBody","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"data","decl":"const char[] data"},{"type":"int","name":"dataLength","decl":"int dataLength"},{"type":"const char[]","name":"contentType","decl":"const char[] contentType"}]},{"name":"Steam_SetHTTPRequestRawPostBodyFile","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"HTTPRequestHandle","name":"HTTPRequest","decl":"HTTPRequestHandle HTTPRequest"},{"type":"const char[]","name":"filePath","decl":"const char[] filePath"},{"type":"const char[]","name":"contentType","decl":"const char[] contentType"}]}],"methodmaps":[],"constants":[],"enums":[{"name":"HTTPRequestHandle","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"INVALID_HTTP_HANDLE","docStart":0,"docEnd":0,"docs":null}]},{"name":"HTTPMethod","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HTTPMethod_Invalid","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPMethod_GET","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPMethod_HEAD","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPMethod_POST","docStart":0,"docEnd":0,"docs":null}]},{"name":"HTTPStatusCode","docStart":0,"docEnd":0,"docs":null,"entries":[{"name":"HTTPStatusCode_Invalid","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Continue","docStart":6125,"docEnd":6147,"docs":{"brief":"Informational codes","tags":[{"tag":"","text":"Informational codes"}]}},{"name":"HTTPStatusCode_SwitchingProtocols","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_OK","docStart":6232,"docEnd":6248,"docs":{"brief":"Success codes","tags":[{"tag":"","text":"Success codes"}]}},{"name":"HTTPStatusCode_Created","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Accepted","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_NonAuthoritative","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_NoContent","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_ResetContent","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_PartialContent","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_MultipleChoices","docStart":6520,"docEnd":6540,"docs":{"brief":"Redirection codes","tags":[{"tag":"","text":"Redirection codes"}]}},{"name":"HTTPStatusCode_MovedPermanently","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Found","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_SeeOther","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_NotModified","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_UseProxy","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_TemporaryRedirect","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_BadRequest","docStart":6820,"docEnd":6834,"docs":{"brief":"Error codes","tags":[{"tag":"","text":"Error codes"}]}},{"name":"HTTPStatusCode_Unauthorized","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_PaymentRequired","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Forbidden","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_NotFound","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_MethodNotAllowed","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_NotAcceptable","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_ProxyAuthRequired","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_RequestTimeout","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Conflict","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_Gone","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_LengthRequired","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_PreconditionFailed","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_RequestEntityTooLarge","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_RequestURITooLong","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_UnsupportedMediaType","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_RequestedRangeNotSatisfiable","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_ExpectationFailed","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_InternalServerError","docStart":7594,"docEnd":7615,"docs":{"brief":"Server error codes","tags":[{"tag":"","text":"Server error codes"}]}},{"name":"HTTPStatusCode_NotImplemented","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_BadGateway","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_ServiceUnavailable","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_GatewayTimeout","docStart":0,"docEnd":0,"docs":null},{"name":"HTTPStatusCode_HTTPVersionNotSupported","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[{"name":"HTTPRequestComplete","docStart":0,"docEnd":0,"docs":null,"types":[{"type":"function void(HTTPRequestHandle HTTPRequest, bool requestSuccessful, HTTPStatusCode statusCode)","docStart":0,"docEnd":0,"docs":null},{"type":"function void(HTTPRequestHandle HTTPRequest, bool requestSuccessful, HTTPStatusCode statusCode, any contextData)","docStart":0,"docEnd":0,"docs":null}]}],"typedefs":[]}