¶ifunctionsàødnamejLogMessagehdocStartmfdocEndFddocs¢ebriefxqLogs a plugin message to the SourceMod logs.  The log message will be prefixed by the plugin's logtag (filename).dtagsÉ¢ctag`dtextxqLogs a plugin message to the SourceMod logs.  The log message will be prefixed by the plugin's logtag (filename).¢ctaglparam:formatdtextxÇLogs a plugin message to the SourceMod logs.  The log message will be prefixed by the plugin's logtag (filename). 
 String format.¢ctagiparam:...dtextxîLogs a plugin message to the SourceMod logs.  The log message will be prefixed by the plugin's logtag (filename). 
 String format. Format arguments.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameiLogToFilehdocStartÅfdocEnd’ddocs¢ebriefxvLogs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended.dtagsÖ¢ctag`dtextxvLogs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended.¢ctagjparam:filedtextxöLogs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended. 
 File to write the log message in.¢ctaglparam:formatdtextx©Logs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended. 
 File to write the log message in. String format.¢ctagiparam:...dtextxªLogs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended. 
 File to write the log message in. String format. Format arguments.¢ctageerrordtextx›Logs a message to any file.  The log message will be in the normal SourceMod format, with the plugin logtag prepended. 
 File to write the log message in. String format. Format arguments. File could not be opened/written.dkindfnativejreturnTypedvoidiargumentsÉ£dtypelconst char[]dnamedfileddeclqconst char[] file£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamekLogToFileExhdocStart	"fdocEnd
6ddocs¢ebriefx:Same as LogToFile(), except no plugin logtag is prepended.dtagsÖ¢ctag`dtextx:Same as LogToFile(), except no plugin logtag is prepended.¢ctagjparam:filedtextx^Same as LogToFile(), except no plugin logtag is prepended. 
 File to write the log message in.¢ctaglparam:formatdtextxmSame as LogToFile(), except no plugin logtag is prepended. 
 File to write the log message in. String format.¢ctagiparam:...dtextxSame as LogToFile(), except no plugin logtag is prepended. 
 File to write the log message in. String format. Format arguments.¢ctageerrordtextx°Same as LogToFile(), except no plugin logtag is prepended. 
 File to write the log message in. String format. Format arguments. File could not be opened/written.dkindfnativejreturnTypedvoidiargumentsÉ£dtypelconst char[]dnamedfileddeclqconst char[] file£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnameiLogActionhdocStart
ÖfdocEndRddocs¢ebriefxñLogs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity().dtagsÖ¢ctag`dtextxñLogs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity().¢ctaglparam:clientdtextx›Logs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity(). 
 Client performing the action, 0 for server, or -1 if not applicable.¢ctaglparam:targetdtextyLogs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity(). 
 Client performing the action, 0 for server, or -1 if not applicable. Client being targetted, or -1 if not applicable.¢ctagmparam:messagedtextyLogs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity(). 
 Client performing the action, 0 for server, or -1 if not applicable. Client being targetted, or -1 if not applicable. Message format.¢ctagiparam:...dtexty=Logs an action from a command or event whereby interception and routing may be important.  This is intended to be a logging version of ShowActivity(). 
 Client performing the action, 0 for server, or -1 if not applicable. Client being targetted, or -1 if not applicable. Message format. Message formatting parameters.dkindfnativejreturnTypedvoidiargumentsÑ£dtypecintdnamefclientddecljint client£dtypecintdnameftargetddecljint target£dtypelconst char[]dnamegmessageddecltconst char[] message£dtypefany...dnamec...ddecljany... ...ˇødnamehLogErrorhdocStart•fdocEnd;ddocs¢ebriefx2Logs a plugin error message to the SourceMod logs.dtagsÉ¢ctag`dtextx2Logs a plugin error message to the SourceMod logs.¢ctaglparam:formatdtextxCLogs a plugin error message to the SourceMod logs. 
 String format.¢ctagiparam:...dtextxULogs a plugin error message to the SourceMod logs. 
 String format. Format arguments.dkindfnativejreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamekOnLogActionhdocStarttfdocEndßddocs¢ebriefx,Called when an action is going to be logged.dtagsá¢ctag`dtextx,Called when an action is going to be logged.¢ctaglparam:sourcedtextxàCalled when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action.¢ctagkparam:identdtextx¬Called when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action. Type of object logging the action (plugin, ext, or core).¢ctaglparam:clientdtextyCalled when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action. Type of object logging the action (plugin, ext, or core). Client the action is from; 0 for server, -1 if not applicable.¢ctaglparam:targetdtexty;Called when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action. Type of object logging the action (plugin, ext, or core). Client the action is from; 0 for server, -1 if not applicable. Client the action is targetting, or -1 if not applicable.¢ctagmparam:messagedtextyYCalled when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action. Type of object logging the action (plugin, ext, or core). Client the action is from; 0 for server, -1 if not applicable. Client the action is targetting, or -1 if not applicable. Message that is being logged.¢ctagfreturndtexty*Called when an action is going to be logged. 
 Handle to the object logging the action, or INVALID_HANDLE if Core is logging the action. Type of object logging the action (plugin, ext, or core). Client the action is from; 0 for server, -1 if not applicable. Client the action is targetting, or -1 if not applicable. Message that is being logged. Plugin_Continue will perform the default logging behavior. Plugin_Handled will stop Core from logging the message. Plugin_Stop is the same as Handled, but prevents any other plugins from handling the message.dkindgforwardjreturnTypefActioniargumentsÖ£dtypefHandlednamefsourceddeclmHandle source£dtypehIdentitydnameeidentddeclnIdentity ident£dtypecintdnamefclientddecljint client£dtypecintdnameftargetddecljint target£dtypelconst char[]dnamegmessageddecltconst char[] messageˇødnamenAddGameLogHookhdocStartùfdocEndÎddocs¢ebriefuAdds a game log hook.dtagsÇ¢ctag`dtextuAdds a game log hook.¢ctagjparam:hookdtextx&Adds a game log hook. 
 Hook function.dkindfnativejreturnTypedvoidiargumentsÅ£dtypekGameLogHookdnamedhookddeclpGameLogHook hookˇødnameqRemoveGameLogHookhdocStartfdocEndoddocs¢ebriefxRemoves a game log hook.dtagsÇ¢ctag`dtextxRemoves a game log hook.¢ctagjparam:hookdtextx)Removes a game log hook. 
 Hook function.dkindfnativejreturnTypedvoidiargumentsÅ£dtypekGameLogHookdnamedhookddeclpGameLogHook hookˇjmethodmapsÄiconstantsÄeenumsÄhtypesetsÄhtypedefsÅødnamekGameLogHookhdocStart=fdocEndZddocs¢ebriefy@Called when a game log message is received. 
 Any Log*() functions called within this callback will not recursively pass through.  That is, they will log directly, bypassing this callback. 
 Note that this does not capture log messages from the engine.  It only captures log messages being sent from the game/mod itself.dtagsÉ¢ctag`dtexty@Called when a game log message is received. 
 Any Log*() functions called within this callback will not recursively pass through.  That is, they will log directly, bypassing this callback. 
 Note that this does not capture log messages from the engine.  It only captures log messages being sent from the game/mod itself.¢ctagmparam:messagedtextyTCalled when a game log message is received. 
 Any Log*() functions called within this callback will not recursively pass through.  That is, they will log directly, bypassing this callback. 
 Note that this does not capture log messages from the engine.  It only captures log messages being sent from the game/mod itself. 
 Message contents.¢ctagfreturndtextyØCalled when a game log message is received. 
 Any Log*() functions called within this callback will not recursively pass through.  That is, they will log directly, bypassing this callback. 
 Note that this does not capture log messages from the engine.  It only captures log messages being sent from the game/mod itself. 
 Message contents. Plugin_Handled or Plugin_Stop will prevent the message from being written to the log file.dtypex%function Action(const char[] message)ˇ