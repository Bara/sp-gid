{"functions":[{"name":"LogMessage","docStart":1645,"docEnd":1862,"docs":{"brief":"Logs a plugin message to the SourceMod logs.  The log message will beprefixed by the plugin's logtag (filename).","tags":[{"tag":"","text":"Logs a plugin message to the SourceMod logs.  The log message will beprefixed by the plugin's logtag (filename)."},{"tag":"param:format","text":"Logs a plugin message to the SourceMod logs.  The log message will beprefixed by the plugin's logtag (filename).\nString format."},{"tag":"param:...","text":"Logs a plugin message to the SourceMod logs.  The log message will beprefixed by the plugin's logtag (filename).\nString format.Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"LogToFile","docStart":1921,"docEnd":2261,"docs":{"brief":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended.","tags":[{"tag":"","text":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended."},{"tag":"param:file","text":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended.\nFile to write the log message in."},{"tag":"param:format","text":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended.\nFile to write the log message in.String format."},{"tag":"param:...","text":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended.\nFile to write the log message in.String format.Format arguments."},{"tag":"error","text":"Logs a message to any file.  The log message will be in the normalSourceMod format, with the plugin logtag prepended.\nFile to write the log message in.String format.Format arguments.File could not be opened/written."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"LogToFileEx","docStart":2338,"docEnd":2614,"docs":{"brief":"Same as LogToFile(), except no plugin logtag is prepended.","tags":[{"tag":"","text":"Same as LogToFile(), except no plugin logtag is prepended."},{"tag":"param:file","text":"Same as LogToFile(), except no plugin logtag is prepended.\nFile to write the log message in."},{"tag":"param:format","text":"Same as LogToFile(), except no plugin logtag is prepended.\nFile to write the log message in.String format."},{"tag":"param:...","text":"Same as LogToFile(), except no plugin logtag is prepended.\nFile to write the log message in.String format.Format arguments."},{"tag":"error","text":"Same as LogToFile(), except no plugin logtag is prepended.\nFile to write the log message in.String format.Format arguments.File could not be opened/written."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"file","decl":"const char[] file"},{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"LogAction","docStart":2693,"docEnd":3154,"docs":{"brief":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity().","tags":[{"tag":"","text":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity()."},{"tag":"param:client","text":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity().\nClient performing the action, 0 for server, or -1 if notapplicable."},{"tag":"param:target","text":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity().\nClient performing the action, 0 for server, or -1 if notapplicable.Client being targetted, or -1 if not applicable."},{"tag":"param:message","text":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity().\nClient performing the action, 0 for server, or -1 if notapplicable.Client being targetted, or -1 if not applicable.Message format."},{"tag":"param:...","text":"Logs an action from a command or event whereby interception and routing maybe important.  This is intended to be a logging version of ShowActivity().\nClient performing the action, 0 for server, or -1 if notapplicable.Client being targetted, or -1 if not applicable.Message format.Message formatting parameters."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"target","decl":"int target"},{"type":"const char[]","name":"message","decl":"const char[] message"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"LogError","docStart":3237,"docEnd":3387,"docs":{"brief":"Logs a plugin error message to the SourceMod logs.","tags":[{"tag":"","text":"Logs a plugin error message to the SourceMod logs."},{"tag":"param:format","text":"Logs a plugin error message to the SourceMod logs.\nString format."},{"tag":"param:...","text":"Logs a plugin error message to the SourceMod logs.\nString format.Format arguments."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"format","decl":"const char[] format"},{"type":"any...","name":"...","decl":"any... ..."}]},{"name":"OnLogAction","docStart":3444,"docEnd":4263,"docs":{"brief":"Called when an action is going to be logged.","tags":[{"tag":"","text":"Called when an action is going to be logged."},{"tag":"param:source","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action."},{"tag":"param:ident","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action.Type of object logging the action (plugin, ext, or core)."},{"tag":"param:client","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action.Type of object logging the action (plugin, ext, or core).Client the action is from; 0 for server, -1 if not applicable."},{"tag":"param:target","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action.Type of object logging the action (plugin, ext, or core).Client the action is from; 0 for server, -1 if not applicable.Client the action is targetting, or -1 if not applicable."},{"tag":"param:message","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action.Type of object logging the action (plugin, ext, or core).Client the action is from; 0 for server, -1 if not applicable.Client the action is targetting, or -1 if not applicable.Message that is being logged."},{"tag":"return","text":"Called when an action is going to be logged.\nHandle to the object logging the action, or INVALID_HANDLEif Core is logging the action.Type of object logging the action (plugin, ext, or core).Client the action is from; 0 for server, -1 if not applicable.Client the action is targetting, or -1 if not applicable.Message that is being logged.Plugin_Continue will perform the default logging behavior.Plugin_Handled will stop Core from logging the message.Plugin_Stop is the same as Handled, but prevents any otherplugins from handling the message."}]},"kind":"forward","returnType":"Action","arguments":[{"type":"Handle","name":"source","decl":"Handle source"},{"type":"Identity","name":"ident","decl":"Identity ident"},{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"target","decl":"int target"},{"type":"const char[]","name":"message","decl":"const char[] message"}]},{"name":"AddGameLogHook","docStart":5021,"docEnd":5099,"docs":{"brief":"Adds a game log hook.","tags":[{"tag":"","text":"Adds a game log hook."},{"tag":"param:hook","text":"Adds a game log hook.\nHook function."}]},"kind":"native","returnType":"void","arguments":[{"type":"GameLogHook","name":"hook","decl":"GameLogHook hook"}]},{"name":"RemoveGameLogHook","docStart":5150,"docEnd":5231,"docs":{"brief":"Removes a game log hook.","tags":[{"tag":"","text":"Removes a game log hook."},{"tag":"param:hook","text":"Removes a game log hook.\nHook function."}]},"kind":"native","returnType":"void","arguments":[{"type":"GameLogHook","name":"hook","decl":"GameLogHook hook"}]}],"methodmaps":[],"constants":[],"enums":[],"typesets":[],"typedefs":[{"name":"GameLogHook","docStart":4413,"docEnd":4954,"docs":{"brief":"Called when a game log message is received.\nAny Log*() functions called within this callback will not recursivelypass through.  That is, they will log directly, bypassing this callback.\nNote that this does not capture log messages from the engine.  It onlycaptures log messages being sent from the game/mod itself.","tags":[{"tag":"","text":"Called when a game log message is received.\nAny Log*() functions called within this callback will not recursivelypass through.  That is, they will log directly, bypassing this callback.\nNote that this does not capture log messages from the engine.  It onlycaptures log messages being sent from the game/mod itself."},{"tag":"param:message","text":"Called when a game log message is received.\nAny Log*() functions called within this callback will not recursivelypass through.  That is, they will log directly, bypassing this callback.\nNote that this does not capture log messages from the engine.  It onlycaptures log messages being sent from the game/mod itself.\nMessage contents."},{"tag":"return","text":"Called when a game log message is received.\nAny Log*() functions called within this callback will not recursivelypass through.  That is, they will log directly, bypassing this callback.\nNote that this does not capture log messages from the engine.  It onlycaptures log messages being sent from the game/mod itself.\nMessage contents.Plugin_Handled or Plugin_Stop will prevent the messagefrom being written to the log file."}]},"type":"function Action(const char[] message)"}]}