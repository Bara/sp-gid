¶ifunctionsòødnameiBuildPathhdocStart'
fdocEnd) ddocs¢ebriefx¨Builds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout.dtagsá¢ctag`dtextx¨Builds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout.¢ctagjparam:typedtextx—Builds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base.¢ctaglparam:bufferdtextxÎBuilds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base. Buffer to store the path.¢ctagoparam:maxlengthdtextyBuilds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base. Buffer to store the path. Maximum length of buffer.¢ctagiparam:fmtdtextyBuilds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base. Buffer to store the path. Maximum length of buffer. Format string.¢ctagiparam:...dtexty&Builds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base. Buffer to store the path. Maximum length of buffer. Format string. Format arguments.¢ctagfreturndtextyiBuilds a path relative to the SourceMod folder.  This should be used instead of directly referencing addons/sourcemod, in case users change the name of their folder layout. 
 Type of path to build as the base. Buffer to store the path. Maximum length of buffer. Format string. Format arguments. Number of bytes written to buffer (not including null terminator).dkindfnativejreturnTypecintiargumentsÖ£dtypehPathTypednamedtypeddeclmPathType type£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnamemOpenDirectoryhdocStart)ÉfdocEnd,dddocs¢ebriefx2Opens a directory/folder for contents enumeration.dtagsà¢ctag`dtextx2Opens a directory/folder for contents enumeration.¢ctagdnotedtextxiOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete.¢ctagdnotedtextxåOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned.¢ctagdnotedtextxΩOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned. OpenDirectory() supports the "file://" notation.¢ctagjparam:pathdtextxÕOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned. OpenDirectory() supports the "file://" notation. 
 Path to open.¢ctagrparam:use_valve_fsdtextyáOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned. OpenDirectory() supports the "file://" notation. 
 Path to open. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtextyŸOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned. OpenDirectory() supports the "file://" notation. 
 Path to open. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextyOpens a directory/folder for contents enumeration. 
 Directories are closed with CloseHandle() or delete. Directories Handles can be cloned. OpenDirectory() supports the "file://" notation. 
 Path to open. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. A Handle to the directory, null on error.dkindfnativejreturnTypepDirectoryListingiargumentsÉ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamelReadDirEntryhdocStart,ﬂfdocEnd/`ddocs¢ebriefxSReads the current directory entry as a local filename, then moves to the next file.dtagsâ¢ctag`dtextxSReads the current directory entry as a local filename, then moves to the next file.¢ctagdnotedtextxçReads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false.¢ctagdnotedtextxËReads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux.¢ctagiparam:dirdtextyReads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory.¢ctaglparam:bufferdtexty'Reads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory. String buffer to hold directory name.¢ctagoparam:maxlengthdtextyFReads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory. String buffer to hold directory name. Maximum size of string buffer.¢ctagjparam:typedtextypReads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory. String buffer to hold directory name. Maximum size of string buffer. Optional variable to store the file type.¢ctagfreturndtexty´Reads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory. String buffer to hold directory name. Maximum size of string buffer. Optional variable to store the file type. True on success, false if there are no more files to read.¢ctageerrordtexty∆Reads the current directory entry as a local filename, then moves to the next file. 
 Contents of buffers are undefined when returning false. Both the '.' and '..' automatic directory entries will be retrieved for Windows and Linux. 
 Handle to a directory. String buffer to hold directory name. Maximum size of string buffer. Optional variable to store the file type. True on success, false if there are no more files to read. Invalid or corrupt Handle.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednamecdirddecljHandle dir£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypeiFileType&dnamedtypeddeclnFileType& typeˇødnamehOpenFilehdocStart/ fdocEnd7ddocs¢ebriefyùOpens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending.dtagsÜ¢ctag`dtextyùOpens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending.¢ctagjparam:filedtexty≠Opens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending. 
 File to open.¢ctagjparam:modedtexty∏Opens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending. 
 File to open. Open mode.¢ctagrparam:use_valve_fsdtextygOpens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending. 
 File to open. Open mode. If true, the Valve file system will be used instead. This can be used to find files existing in valve search paths, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtextyπOpens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending. 
 File to open. Open mode. If true, the Valve file system will be used instead. This can be used to find files existing in valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextyÒOpens or creates a file, returning a File handle on success. File handles should be closed with delete or CloseHandle(). 
 The open mode may be one of the following strings: "r": Open an existing file for reading. "w": Create a file for writing, or truncate (delete the contents of) an existing file and then open it for writing. "a": Create a file for writing, or open an existing file such that writes will be appended to the end. "r+": Open an existing file for both reading and writing. "w+": Create a file for reading and writing, or truncate an existing file and then open it for reading and writing. "a+": Create a file for both reading and writing, or open an existing file such that writes will be appended to the end. 
 The open mode may also contain an additional character after "r", "w", or "a", but before any "+" sign. This character may be "b" (indicating binary mode) or "t" (indicating text mode). By default, "text" mode is implied. On Linux and Mac, this has no distinction from binary mode. On Windows, it causes the '\n' character (0xA) to be written as "\r\n" (0xD, 0xA). 
 Example: "rb" opens a binary file for reading; "at" opens a text file for appending. 
 File to open. Open mode. If true, the Valve file system will be used instead. This can be used to find files existing in valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. A File handle, or null if the file could not be opened.dkindfnativejreturnTypedFileiargumentsÑ£dtypelconst char[]dnamedfileddeclqconst char[] file£dtypelconst char[]dnamedmodeddeclqconst char[] mode£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamejDeleteFilehdocStart7ãfdocEnd9¬ddocs¢ebriefoDeletes a file.dtagsÖ¢ctag`dtextoDeletes a file.¢ctagjparam:pathdtextx-Deletes a file. 
 Path of the file to delete.¢ctagrparam:use_valve_fsdtextx·Deletes a file. 
 Path of the file to delete. If true, the Valve file system will be used instead. This can be used to delete files existing in the Valve search path, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtexty3Deletes a file. 
 Path of the file to delete. If true, the Valve file system will be used instead. This can be used to delete files existing in the Valve search path, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextyyDeletes a file. 
 Path of the file to delete. If true, the Valve file system will be used instead. This can be used to delete files existing in the Valve search path, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. True on success, false on failure or if file not immediately removed.dkindfnativejreturnTypedbooliargumentsÉ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamelReadFileLinehdocStart:<fdocEnd;Dddocs¢ebriefxReads a line from a text file.dtagsÖ¢ctag`dtextxReads a line from a text file.¢ctagjparam:hndldtextx4Reads a line from a text file. 
 Handle to the file.¢ctaglparam:bufferdtextxTReads a line from a text file. 
 Handle to the file. String buffer to hold the line.¢ctagoparam:maxlengthdtextxsReads a line from a text file. 
 Handle to the file. String buffer to hold the line. Maximum size of string buffer.¢ctagfreturndtextxïReads a line from a text file. 
 Handle to the file. String buffer to hold the line. Maximum size of string buffer. True on success, false otherwise.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamehReadFilehdocStart;éfdocEnd=ddocs¢ebriefxReads binary data from a file.dtagsÜ¢ctag`dtextxReads binary data from a file.¢ctagjparam:hndldtextx4Reads binary data from a file. 
 Handle to the file.¢ctagkparam:itemsdtextxSReads binary data from a file. 
 Handle to the file. Array to store each item read.¢ctagoparam:num_itemsdtextx{Reads binary data from a file. 
 Handle to the file. Array to store each item read. Number of items to read into the array.¢ctagjparam:sizedtextx√Reads binary data from a file. 
 Handle to the file. Array to store each item read. Number of items to read into the array. Size of each element, in bytes, to be read. Valid sizes are 1, 2, or 4.¢ctagfreturndtextxÏReads binary data from a file. 
 Handle to the file. Array to store each item read. Number of items to read into the array. Size of each element, in bytes, to be read. Valid sizes are 1, 2, or 4. Number of elements read, or -1 on error.dkindfnativejreturnTypecintiargumentsÑ£dtypefHandlednamedhndlddeclkHandle hndl£dtypeeint[]dnameeitemsddeclkint[] items£dtypecintdnameinum_itemsddeclmint num_items£dtypecintdnamedsizeddeclhint sizeˇødnamenReadFileStringhdocStart=lfdocEnd@Üddocs¢ebriefx(Reads a UTF8 or ANSI string from a file.dtagsá¢ctag`dtextx(Reads a UTF8 or ANSI string from a file.¢ctagjparam:hndldtextx>Reads a UTF8 or ANSI string from a file. 
 Handle to the file.¢ctaglparam:bufferdtextxZReads a UTF8 or ANSI string from a file. 
 Handle to the file. Buffer to store the string.¢ctagnparam:max_sizedtextx}Reads a UTF8 or ANSI string from a file. 
 Handle to the file. Buffer to store the string. Maximum size of the string buffer.¢ctagpparam:read_countdtextyReads a UTF8 or ANSI string from a file. 
 Handle to the file. Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file.¢ctagfreturndtextyŒReads a UTF8 or ANSI string from a file. 
 Handle to the file. Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file. Number of characters written to the buffer, or -1 if an error was encountered.¢ctageerrordtexty¯Reads a UTF8 or ANSI string from a file. 
 Handle to the file. Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file. Number of characters written to the buffer, or -1 if an error was encountered. Invalid Handle, or read_count > max_size.dkindfnativejreturnTypecintiargumentsÑ£dtypefHandlednamedhndlddeclkHandle hndl£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamehmax_sizeddecllint max_size£dtypecintdnamejread_countddeclnint read_countˇødnameiWriteFilehdocStart@„fdocEndCÉddocs¢ebriefxWrites binary data to a file.dtagsá¢ctag`dtextxWrites binary data to a file.¢ctagjparam:hndldtextx3Writes binary data to a file. 
 Handle to the file.¢ctagkparam:itemsdtextyWrites binary data to a file. 
 Handle to the file. Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number.¢ctagoparam:num_itemsdtexty!Writes binary data to a file. 
 Handle to the file. Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array.¢ctagjparam:sizedtextyfWrites binary data to a file. 
 Handle to the file. Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array. Size of each item in the array in bytes. Valid sizes are 1, 2, or 4.¢ctagfreturndtextyáWrites binary data to a file. 
 Handle to the file. Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array. Size of each item in the array in bytes. Valid sizes are 1, 2, or 4. True on success, false on error.¢ctageerrordtextyóWrites binary data to a file. 
 Handle to the file. Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array. Size of each item in the array in bytes. Valid sizes are 1, 2, or 4. True on success, false on error. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednamedhndlddeclkHandle hndl£dtypekconst int[]dnameeitemsddeclqconst int[] items£dtypecintdnameinum_itemsddeclmint num_items£dtypecintdnamedsizeddeclhint sizeˇødnameoWriteFileStringhdocStartCÿfdocEndEddocs¢ebriefx!Writes a binary string to a file.dtagsÜ¢ctag`dtextx!Writes a binary string to a file.¢ctagjparam:hndldtextx7Writes a binary string to a file. 
 Handle to the file.¢ctaglparam:bufferdtextxHWrites a binary string to a file. 
 Handle to the file. String to write.¢ctagjparam:termdtextxxWrites a binary string to a file. 
 Handle to the file. String to write. True to append NUL terminator, false otherwise.¢ctagfreturndtextxôWrites a binary string to a file. 
 Handle to the file. String to write. True to append NUL terminator, false otherwise. True on success, false on error.¢ctageerrordtextx©Writes a binary string to a file. 
 Handle to the file. String to write. True to append NUL terminator, false otherwise. True on success, false on error. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypelconst char[]dnamefbufferddeclsconst char[] buffer£dtypedbooldnamedtermddeclibool termˇødnamemWriteFileLinehdocStartE\fdocEndF≥ddocs¢ebriefxKWrites a line of text to a text file.  A newline is automatically appended.dtagsÜ¢ctag`dtextxKWrites a line of text to a text file.  A newline is automatically appended.¢ctagjparam:hndldtextxaWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file.¢ctaglparam:formatdtextxsWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules.¢ctagiparam:...dtextxôWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules. Variable number of format parameters.¢ctagfreturndtextxªWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules. Variable number of format parameters. True on success, false otherwise.¢ctageerrordtextxÀWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules. Variable number of format parameters. True on success, false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamelReadFileCellhdocStartF˛fdocEndHàddocs¢ebriefx'Reads a single binary cell from a file.dtagsÜ¢ctag`dtextx'Reads a single binary cell from a file.¢ctagjparam:hndldtextx=Reads a single binary cell from a file. 
 Handle to the file.¢ctagjparam:datadtextx^Reads a single binary cell from a file. 
 Handle to the file. Variable to store the data read.¢ctagjparam:sizedtextx§Reads a single binary cell from a file. 
 Handle to the file. Variable to store the data read. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.¢ctagfreturndtextx’Reads a single binary cell from a file. 
 Handle to the file. Variable to store the data read. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes. Number of elements read (max 1), or -1 on error.¢ctageerrordtextxÂReads a single binary cell from a file. 
 Handle to the file. Variable to store the data read. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes. Number of elements read (max 1), or -1 on error. Invalid Handle.dkindestockjreturnTypecintiargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypedint&dnameddataddecliint& data£dtypecintdnamedsizeddeclhint sizeˇødnamemWriteFileCellhdocStartIHfdocEndKddocs¢ebriefx&Writes a single binary cell to a file.dtagsÜ¢ctag`dtextx&Writes a single binary cell to a file.¢ctagjparam:hndldtextx<Writes a single binary cell to a file. 
 Handle to the file.¢ctagjparam:datadtextxWWrites a single binary cell to a file. 
 Handle to the file. Cell to write to the file.¢ctagjparam:sizedtextyWrites a single binary cell to a file. 
 Handle to the file. Cell to write to the file. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.  If the size is less than 4 bytes, the data is truncated rather than casted.  That is, only the lower bits will be read.¢ctagfreturndtexty7Writes a single binary cell to a file. 
 Handle to the file. Cell to write to the file. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.  If the size is less than 4 bytes, the data is truncated rather than casted.  That is, only the lower bits will be read. True on success, false on error.¢ctageerrordtextyGWrites a single binary cell to a file. 
 Handle to the file. Cell to write to the file. Size of the data to read in bytes.  Valid sizes are 1, 2, or 4 bytes.  If the size is less than 4 bytes, the data is truncated rather than casted.  That is, only the lower bits will be read. True on success, false on error. Invalid Handle.dkindestockjreturnTypedbooliargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypecintdnameddataddeclhint data£dtypecintdnamedsizeddeclhint sizeˇødnamekIsEndOfFilehdocStartLfdocEndLÙddocs¢ebriefx*Tests if the end of file has been reached.dtagsÑ¢ctag`dtextx*Tests if the end of file has been reached.¢ctagjparam:filedtextx@Tests if the end of file has been reached. 
 Handle to the file.¢ctagfreturndtextxwTests if the end of file has been reached. 
 Handle to the file. True if end of file has been reached, false otherwise.¢ctageerrordtextxáTests if the end of file has been reached. 
 Handle to the file. True if end of file has been reached, false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednamedfileddeclkHandle fileˇødnamehFileSeekhdocStartMfdocEndNqddocs¢ebriefx!Sets the file position indicator.dtagsÜ¢ctag`dtextx!Sets the file position indicator.¢ctagjparam:filedtextx7Sets the file position indicator. 
 Handle to the file.¢ctagnparam:positiondtextxiSets the file position indicator. 
 Handle to the file. Position relative to what is specified in whence.¢ctagkparam:wheredtextxîSets the file position indicator. 
 Handle to the file. Position relative to what is specified in whence. SEEK_ constant value of where to see from.¢ctagfreturndtextx∂Sets the file position indicator. 
 Handle to the file. Position relative to what is specified in whence. SEEK_ constant value of where to see from. True on success, false otherwise.¢ctageerrordtextx∆Sets the file position indicator. 
 Handle to the file. Position relative to what is specified in whence. SEEK_ constant value of where to see from. True on success, false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamedfileddeclkHandle file£dtypecintdnamehpositionddecllint position£dtypecintdnameewhereddecliint whereˇødnamelFilePositionhdocStartN≤fdocEndOzddocs¢ebriefx!Get current position in the file.dtagsÑ¢ctag`dtextx!Get current position in the file.¢ctagjparam:filedtextx7Get current position in the file. 
 Handle to the file.¢ctagfreturndtextx^Get current position in the file. 
 Handle to the file. Value for the file position indicator.¢ctageerrordtextxnGet current position in the file. 
 Handle to the file. Value for the file position indicator. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamedfileddeclkHandle fileˇødnamejFileExistshdocStartO•fdocEndQ≈ddocs¢ebriefxChecks if a file exists.dtagsÖ¢ctag`dtextxChecks if a file exists.¢ctagjparam:pathdtextx,Checks if a file exists. 
 Path to the file.¢ctagrparam:use_valve_fsdtextxÊChecks if a file exists. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtexty8Checks if a file exists. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextybChecks if a file exists. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. True if the file exists, false otherwise.dkindfnativejreturnTypedbooliargumentsÉ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamejRenameFilehdocStartR1fdocEndT\ddocs¢ebriefoRenames a file.dtagsÜ¢ctag`dtextoRenames a file.¢ctagmparam:newpathdtextx'Renames a file. 
 New path to the file.¢ctagmparam:oldpathdtextxBRenames a file. 
 New path to the file. Path to the existing file.¢ctagrparam:use_valve_fsdtextxﬂRenames a file. 
 New path to the file. Path to the existing file. If true, the Valve file system will be used instead. This can be used to rename files in the game's Valve search paths, rather than directly in the gamedir.¢ctagsparam:valve_path_iddtexty1Renames a file. 
 New path to the file. Path to the existing file. If true, the Valve file system will be used instead. This can be used to rename files in the game's Valve search paths, rather than directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextymRenames a file. 
 New path to the file. Path to the existing file. If true, the Valve file system will be used instead. This can be used to rename files in the game's Valve search paths, rather than directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. True on success or use_valve_fs specified, false otherwise.dkindfnativejreturnTypedbooliargumentsÑ£dtypelconst char[]dnamegnewpathddecltconst char[] newpath£dtypelconst char[]dnamegoldpathddecltconst char[] oldpath£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnameiDirExistshdocStartTÔfdocEndWddocs¢ebriefxChecks if a directory exists.dtagsÖ¢ctag`dtextxChecks if a directory exists.¢ctagjparam:pathdtextx6Checks if a directory exists. 
 Path to the directory.¢ctagrparam:use_valve_fsdtextxChecks if a directory exists. 
 Path to the directory. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtextyBChecks if a directory exists. 
 Path to the directory. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextyqChecks if a directory exists. 
 Path to the directory. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. True if the directory exists, false otherwise.dkindfnativejreturnTypedbooliargumentsÉ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamehFileSizehdocStartWâfdocEndY¨ddocs¢ebriefxGet the file size in bytes.dtagsÖ¢ctag`dtextxGet the file size in bytes.¢ctagjparam:pathdtextx/Get the file size in bytes. 
 Path to the file.¢ctagrparam:use_valve_fsdtextxÈGet the file size in bytes. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir.¢ctagsparam:valve_path_iddtexty;Get the file size in bytes. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths.¢ctagfreturndtextyeGet the file size in bytes. 
 Path to the file. If true, the Valve file system will be used instead. This can be used to find files existing in any of the Valve search paths, rather than solely files existing directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for all search paths. File size in bytes, -1 if file not found.dkindfnativejreturnTypecintiargumentsÉ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnameiFlushFilehdocStartZfdocEnd[7ddocs¢ebriefxYFlushes a file's buffered output; any buffered output is immediately written to the file.dtagsÉ¢ctag`dtextxYFlushes a file's buffered output; any buffered output is immediately written to the file.¢ctagjparam:filedtextxoFlushes a file's buffered output; any buffered output is immediately written to the file. 
 Handle to the file.¢ctagfreturndtextxƒFlushes a file's buffered output; any buffered output is immediately written to the file. 
 Handle to the file. True on success or use_valve_fs specified with OpenFile, otherwise false on failure.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednamedfileddeclkHandle fileˇødnameiRemoveDirhdocStart[`fdocEnd\Mddocs¢ebrieftRemoves a directory.dtagsÑ¢ctag`dtexttRemoves a directory.¢ctagdnotedtextxgRemoves a directory. On most Operating Systems you cannot remove a directory which has files inside it.¢ctagjparam:pathdtextxÄRemoves a directory. On most Operating Systems you cannot remove a directory which has files inside it. 
 Path to the directory.¢ctagfreturndtextx¢Removes a directory. On most Operating Systems you cannot remove a directory which has files inside it. 
 Path to the directory. True on success, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypelconst char[]dnamedpathddeclqconst char[] pathˇødnameoCreateDirectoryhdocStart^îfdocEndaZddocs¢ebrieftCreates a directory.dtagsÜ¢ctag`dtexttCreates a directory.¢ctagjparam:pathdtextx&Creates a directory. 
 Path to create.¢ctagjparam:modedtextx≠Creates a directory. 
 Path to create. Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have the execute bit set on Linux.  On Windows, the mode is ignored.¢ctagrparam:use_valve_fsdtextyLCreates a directory. 
 Path to create. Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have the execute bit set on Linux.  On Windows, the mode is ignored. If true, the Valve file system will be used instead. This can be used to create folders in the game's Valve search paths, rather than directly in the gamedir.¢ctagsparam:valve_path_iddtexty¥Creates a directory. 
 Path to create. Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have the execute bit set on Linux.  On Windows, the mode is ignored. If true, the Valve file system will be used instead. This can be used to create folders in the game's Valve search paths, rather than directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for default. In this case, mode is ignored.¢ctagfreturndtexty÷Creates a directory. 
 Path to create. Permissions (default is o=rx,g=rx,u=rwx).  Note that folders must have the execute bit set on Linux.  On Windows, the mode is ignored. If true, the Valve file system will be used instead. This can be used to create folders in the game's Valve search paths, rather than directly in the gamedir. If use_valve_fs, a search path from gameinfo or NULL_STRING for default. In this case, mode is ignored. True on success, false otherwise.dkindfnativejreturnTypedbooliargumentsÑ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypecintdnamedmodeddeclhint mode£dtypedbooldnameluse_valve_fsddeclqbool use_valve_fs£dtypelconst char[]dnamemvalve_path_idddeclxconst char[] valve_path_idˇødnamerSetFilePermissionshdocStarta„fdocEndb±ddocs¢ebriefx*Changes a file or directories permissions.dtagsÑ¢ctag`dtextx*Changes a file or directories permissions.¢ctagjparam:pathdtextx>Changes a file or directories permissions. 
 Path to the file.¢ctagjparam:modedtextxRChanges a file or directories permissions. 
 Path to the file. Permissions to set.¢ctagfreturndtextxtChanges a file or directories permissions. 
 Path to the file. Permissions to set. True on success, false otherwise.dkindfnativejreturnTypedbooliargumentsÇ£dtypelconst char[]dnamedpathddeclqconst char[] path£dtypecintdnamedmodeddeclhint modeˇødnamekGetFileTimehdocStartbÛfdocEndc∞ddocs¢ebriefx-Returns a file timestamp as a unix timestamp.dtagsÑ¢ctag`dtextx-Returns a file timestamp as a unix timestamp.¢ctagjparam:filedtextx:Returns a file timestamp as a unix timestamp. 
 File name.¢ctagkparam:tmodedtextxEReturns a file timestamp as a unix timestamp. 
 File name. Time mode.¢ctagfreturndtextxcReturns a file timestamp as a unix timestamp. 
 File name. Time mode. Time value, or -1 on failure.dkindfnativejreturnTypecintiargumentsÇ£dtypelconst char[]dnamedfileddeclqconst char[] file£dtypelFileTimeModednameetmodeddeclrFileTimeMode tmodeˇødnamemLogToOpenFilehdocStartcÙfdocEnde"ddocs¢ebriefxfSame as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode.dtagsÖ¢ctag`dtextxfSame as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode.¢ctagjparam:hndldtextx|Same as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file.¢ctagmparam:messagedtextxåSame as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format.¢ctagiparam:...dtextxßSame as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format. Message format parameters.¢ctageerrordtextx∑Same as LogToFile(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format. Message format parameters. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypelconst char[]dnamegmessageddecltconst char[] message£dtypefany...dnamec...ddecljany... ...ˇødnameoLogToOpenFileExhdocStartenfdocEndfûddocs¢ebriefxhSame as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode.dtagsÖ¢ctag`dtextxhSame as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode.¢ctagjparam:hndldtextx~Same as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file.¢ctagmparam:messagedtextxéSame as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format.¢ctagiparam:...dtextx©Same as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format. Message format parameters.¢ctageerrordtextxπSame as LogToFileEx(), except uses an open file Handle.  The file must be opened in text appending mode. 
 Handle to the file. Message format. Message format parameters. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednamedhndlddeclkHandle hndl£dtypelconst char[]dnamegmessageddecltconst char[] message£dtypefany...dnamec...ddecljany... ...ˇjmethodmapsÇødnamepDirectoryListinghdocStartBfdocEnd¡ddocs¢ebriefxwA DirectoryListing iterates over the contents of a directory. To obtain a DirectoryListing handle, call OpenDirectory()dtagsÅ¢ctag`dtextxwA DirectoryListing iterates over the contents of a directory. To obtain a DirectoryListing handle, call OpenDirectory()gmethodsÅødnamegGetNexthdocStartÏfdocEndªddocs¢ebriefx†Reads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved.dtagsÖ¢ctag`dtextx†Reads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved.¢ctaglparam:bufferdtextx»Reads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved. 
 String buffer to hold directory name.¢ctagoparam:maxlengthdtextxÁReads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved. 
 String buffer to hold directory name. Maximum size of string buffer.¢ctagjparam:typedtextyReads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved. 
 String buffer to hold directory name. Maximum size of string buffer. Optional variable to store the file type.¢ctagfreturndtextyKReads the current directory entry as a local filename, then moves to the next file. 
 Note: Both the '.' and '..' automatic directory entries will be retrieved. 
 String buffer to hold directory name. Maximum size of string buffer. Optional variable to store the file type. True on success, false if there are no more files to readdkindˆjreturnTypedbooliargumentsÉ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypeiFileType&dnamedtypeddeclnFileType& typeˇjpropertiesÄˇødnamedFilehdocStart fdocEndÏddocs¢ebriefx¿A File object can be obtained by calling OpenFile(). File objects should be closed with delete or Close(). Note that, "delete file" does not actually delete the file, it just closes the handledtagsÅ¢ctag`dtextx¿A File object can be obtained by calling OpenFile(). File objects should be closed with delete or Close(). Note that, "delete file" does not actually delete the file, it just closes the handlegmethodsíødnameeClosehdocStartfdocEndWddocs¢ebriefxHClose the file handle. This is the same as using CloseHandle() or deletedtagsÅ¢ctag`dtextxHClose the file handle. This is the same as using CloseHandle() or deletedkindˆjreturnTypedvoidiargumentsÄˇødnamehReadLinehdocStartéfdocEndlddocs¢ebriefx!Reads a line of text from a file.dtagsÑ¢ctag`dtextx!Reads a line of text from a file.¢ctaglparam:bufferdtextxCReads a line of text from a file. 
 String buffer to hold the line.¢ctagoparam:maxlengthdtextxbReads a line of text from a file. 
 String buffer to hold the line. Maximum size of string buffer.¢ctagfreturndtextxÉReads a line of text from a file. 
 String buffer to hold the line. Maximum size of string buffer. True on success, false otherwisedkindˆjreturnTypedbooliargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamedReadhdocStartÆfdocEndddocs¢ebriefxReads binary data from a file.dtagsÖ¢ctag`dtextxReads binary data from a file.¢ctagkparam:itemsdtextx?Reads binary data from a file. 
 Array to store each item read.¢ctagoparam:num_itemsdtextxgReads binary data from a file. 
 Array to store each item read. Number of items to read into the array.¢ctagjparam:sizedtextxØReads binary data from a file. 
 Array to store each item read. Number of items to read into the array. Size of each element, in bytes, to be read. Valid sizes are 1, 2, or 4.¢ctagfreturndtextx◊Reads binary data from a file. 
 Array to store each item read. Number of items to read into the array. Size of each element, in bytes, to be read. Valid sizes are 1, 2, or 4. Number of elements read, or -1 on errordkindˆjreturnTypecintiargumentsÉ£dtypeeint[]dnameeitemsddeclkint[] items£dtypecintdnameinum_itemsddeclmint num_items£dtypecintdnamedsizeddeclhint sizeˇødnamejReadStringhdocStart]fdocEndLddocs¢ebriefx(Reads a UTF8 or ANSI string from a file.dtagsÜ¢ctag`dtextx(Reads a UTF8 or ANSI string from a file.¢ctaglparam:bufferdtextxFReads a UTF8 or ANSI string from a file. 
 Buffer to store the string.¢ctagnparam:max_sizedtextxiReads a UTF8 or ANSI string from a file. 
 Buffer to store the string. Maximum size of the string buffer.¢ctagpparam:read_countdtextykReads a UTF8 or ANSI string from a file. 
 Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file.¢ctagfreturndtexty∫Reads a UTF8 or ANSI string from a file. 
 Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file. Number of characters written to the buffer, or -1 if an error was encountered.¢ctageerrordtexty–Reads a UTF8 or ANSI string from a file. 
 Buffer to store the string. Maximum size of the string buffer. If -1, reads until a null terminator is encountered in the file.  Otherwise, read_count bytes are read into the buffer provided.  In this case the buffer is not explicitly null terminated, and the buffer will contain any null terminators read from the file. Number of characters written to the buffer, or -1 if an error was encountered. read_count > max_sizedkindˆjreturnTypecintiargumentsÉ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnamehmax_sizeddecllint max_size£dtypecintdnamejread_countddeclnint read_countˇødnameeWritehdocStart°fdocEnd˙ddocs¢ebriefxWrites binary data to a file.dtagsÖ¢ctag`dtextxWrites binary data to a file.¢ctagkparam:itemsdtextxÔWrites binary data to a file. 
 Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number.¢ctagoparam:num_itemsdtextyWrites binary data to a file. 
 Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array.¢ctagjparam:sizedtextyRWrites binary data to a file. 
 Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array. Size of each item in the array in bytes. Valid sizes are 1, 2, or 4.¢ctagfreturndtextyrWrites binary data to a file. 
 Array of items to write.  The data is read directly. That is, in 1 or 2-byte mode, the lower byte(s) in each cell are used directly, rather than performing any casts from a 4-byte number to a smaller number. Number of items in the array. Size of each item in the array in bytes. Valid sizes are 1, 2, or 4. True on success, false on errordkindˆjreturnTypedbooliargumentsÉ£dtypekconst int[]dnameeitemsddeclqconst int[] items£dtypecintdnameinum_itemsddeclmint num_items£dtypecintdnamedsizeddeclhint sizeˇødnamekWriteStringhdocStartGfdocEnd&ddocs¢ebriefx!Writes a binary string to a file.dtagsÑ¢ctag`dtextx!Writes a binary string to a file.¢ctaglparam:bufferdtextx4Writes a binary string to a file. 
 String to write.¢ctagjparam:termdtextxdWrites a binary string to a file. 
 String to write. True to append NUL terminator, false otherwise.¢ctagfreturndtextxÑWrites a binary string to a file. 
 String to write. True to append NUL terminator, false otherwise. True on success, false on errordkindˆjreturnTypedbooliargumentsÇ£dtypelconst char[]dnamefbufferddeclsconst char[] buffer£dtypedbooldnamedtermddeclibool termˇødnameiWriteLinehdocStartmfdocEndûddocs¢ebriefxKWrites a line of text to a text file.  A newline is automatically appended.dtagsÖ¢ctag`dtextxKWrites a line of text to a text file.  A newline is automatically appended.¢ctagjparam:hndldtextxaWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file.¢ctaglparam:formatdtextxsWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules.¢ctagiparam:...dtextxôWrites a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules. Variable number of format parameters.¢ctagfreturndtextx∫Writes a line of text to a text file.  A newline is automatically appended. 
 Handle to the file. Formatting rules. Variable number of format parameters. True on success, false otherwisedkindˆjreturnTypedbooliargumentsÇ£dtypelconst char[]dnamefformatddeclsconst char[] format£dtypefany...dnamec...ddecljany... ...ˇødnamehReadInt8hdocStart·fdocEnd√ddocs¢ebriefxYReads a single int8 (byte) from a file. The returned value is sign- extended to an int32.dtagsÉ¢ctag`dtextxYReads a single int8 (byte) from a file. The returned value is sign- extended to an int32.¢ctagjparam:datadtextx|Reads a single int8 (byte) from a file. The returned value is sign- extended to an int32. 
 Variable to store the data read.¢ctagfreturndtextxûReads a single int8 (byte) from a file. The returned value is sign- extended to an int32. 
 Variable to store the data read. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypedint&dnameddataddecliint& dataˇødnameiReadUint8hdocStartÚfdocEnd›ddocs¢ebriefxbReads a single uint8 (unsigned byte) from a file. The returned value is zero-extended to an int32.dtagsÉ¢ctag`dtextxbReads a single uint8 (unsigned byte) from a file. The returned value is zero-extended to an int32.¢ctagjparam:datadtextxÖReads a single uint8 (unsigned byte) from a file. The returned value is zero-extended to an int32. 
 Variable to store the data read.¢ctagfreturndtextxßReads a single uint8 (unsigned byte) from a file. The returned value is zero-extended to an int32. 
 Variable to store the data read. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypedint&dnameddataddecliint& dataˇødnameiReadInt16hdocStartfdocEndÁddocs¢ebriefxQReads a single int16 (short) from a file. The value is sign-extended to an int32.dtagsÉ¢ctag`dtextxQReads a single int16 (short) from a file. The value is sign-extended to an int32.¢ctagjparam:datadtextxtReads a single int16 (short) from a file. The value is sign-extended to an int32. 
 Variable to store the data read.¢ctagfreturndtextxñReads a single int16 (short) from a file. The value is sign-extended to an int32. 
 Variable to store the data read. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypedint&dnameddataddecliint& dataˇødnamejReadUint16hdocStartfdocEnd˚ddocs¢ebriefx[Reads a single unt16 (unsigned short) from a file. The value is zero- extended to an int32.dtagsÉ¢ctag`dtextx[Reads a single unt16 (unsigned short) from a file. The value is zero- extended to an int32.¢ctagjparam:datadtextx~Reads a single unt16 (unsigned short) from a file. The value is zero- extended to an int32. 
 Variable to store the data read.¢ctagfreturndtextx†Reads a single unt16 (unsigned short) from a file. The value is zero- extended to an int32. 
 Variable to store the data read. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypedint&dnameddataddecliint& dataˇødnameiReadInt32hdocStart ,fdocEnd ‹ddocs¢ebriefx,Reads a single int32 (int/cell) from a file.dtagsÉ¢ctag`dtextx,Reads a single int32 (int/cell) from a file.¢ctagjparam:datadtextxOReads a single int32 (int/cell) from a file. 
 Variable to store the data read.¢ctagfreturndtextxqReads a single int32 (int/cell) from a file. 
 Variable to store the data read. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypedint&dnameddataddecliint& dataˇødnameiWriteInt8hdocStart!fdocEnd!ªddocs¢ebriefx&Writes a single int8 (byte) to a file.dtagsÉ¢ctag`dtextx&Writes a single int8 (byte) to a file.¢ctagjparam:datadtextxNWrites a single int8 (byte) to a file. 
 Data to write (truncated to an int8).¢ctagfreturndtextxpWrites a single int8 (byte) to a file. 
 Data to write (truncated to an int8). True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypecintdnameddataddeclhint dataˇødnamejWriteInt16hdocStart!ÍfdocEnd"úddocs¢ebriefx(Writes a single int16 (short) to a file.dtagsÉ¢ctag`dtextx(Writes a single int16 (short) to a file.¢ctagjparam:datadtextxQWrites a single int16 (short) to a file. 
 Data to write (truncated to an int16).¢ctagfreturndtextxsWrites a single int16 (short) to a file. 
 Data to write (truncated to an int16). True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypecintdnameddataddeclhint dataˇødnamejWriteInt32hdocStart"ÃfdocEnd#iddocs¢ebriefx+Writes a single int32 (int/cell) to a file.dtagsÉ¢ctag`dtextx+Writes a single int32 (int/cell) to a file.¢ctagjparam:datadtextx<Writes a single int32 (int/cell) to a file. 
 Data to write.¢ctagfreturndtextx^Writes a single int32 (int/cell) to a file. 
 Data to write. True on success, false on failuredkindˆjreturnTypedbooliargumentsÅ£dtypecintdnameddataddeclhint dataˇødnameiEndOfFilehdocStart#ôfdocEnd$ddocs¢ebriefx*Tests if the end of file has been reached.dtagsÇ¢ctag`dtextx*Tests if the end of file has been reached.¢ctagfreturndtextxbTests if the end of file has been reached. 
 True if end of file has been reached, false otherwisedkindˆjreturnTypedbooliargumentsÄˇødnamedSeekhdocStart$EfdocEnd%Addocs¢ebriefx!Sets the file position indicator.dtagsÑ¢ctag`dtextx!Sets the file position indicator.¢ctagnparam:positiondtextxUSets the file position indicator. 
 Position relative to what is specified in whence.¢ctagkparam:wheredtextxÄSets the file position indicator. 
 Position relative to what is specified in whence. SEEK_ constant value of where to see from.¢ctagfreturndtextx°Sets the file position indicator. 
 Position relative to what is specified in whence. SEEK_ constant value of where to see from. True on success, false otherwisedkindˆjreturnTypedbooliargumentsÇ£dtypecintdnamehpositionddecllint position£dtypecintdnameewhereddecliint whereˇødnameeFlushhdocStart%zfdocEnd&jddocs¢ebriefxYFlushes a file's buffered output; any buffered output is immediately written to the file.dtagsÇ¢ctag`dtextxYFlushes a file's buffered output; any buffered output is immediately written to the file.¢ctagfreturndtextxØFlushes a file's buffered output; any buffered output is immediately written to the file. 
 True on success or use_valve_fs specified with OpenFile, otherwise false on failuredkindˆjreturnTypedbooliargumentsÄˇjpropertiesÅødnamehPositionhdocStart&éfdocEnd&Õddocs¢ebriefx;Get the current position in the file; returns -1 on failuredtagsÅ¢ctag`dtextx;Get the current position in the file; returns -1 on failuredtypecintfgetterıfsetterÙˇˇiconstantsÄeenumsÉødnamehFileTypehdocStart˘fdocEnd	ddocs¢ebriefqFile inode types.dtagsÅ¢ctag`dtextqFile inode types.gentriesÉødnamepFileType_UnknownhdocStart	DfdocEnd	kddocsˆˇødnamerFileType_DirectoryhdocStart	ÜfdocEnd	üddocsˆˇødnamemFileType_FilehdocStart	∫fdocEnd	ŒddocsˆˇˇødnamelFileTimeModehdocStart	÷fdocEnd	Ûddocs¢ebriefpFile time modes.dtagsÅ¢ctag`dtextpFile time modes.gentriesÉødnamesFileTime_LastAccesshdocStart
(fdocEnd
PddocsˆˇødnamepFileTime_CreatedhdocStart
ofdocEnd
îddocsˆˇødnamesFileTime_LastChangehdocStart
≥fdocEnd
 ddocsˆˇˇødnamehPathTypehdocStart‘fdocEndÏddocs¢ebriefkPath types.dtagsÅ¢ctag`dtextkPath types.gentriesÅødnamegPath_SMhdocStartfdocEnd:ddocsˆˇˇhtypesetsÄhtypedefsÄ