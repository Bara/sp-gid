{"functions":[{"name":"CompileRegex","docStart":8460,"docEnd":9076,"docs":{"brief":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches.","tags":[{"tag":"","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches."},{"tag":"param:pattern","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern."},{"tag":"param:flags","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern. General flags for the regular expression."},{"tag":"param:error","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable."},{"tag":"param:maxLen","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable. Maximum string length of the error buffer."},{"tag":"param:errcode","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable. Maximum string length of the error buffer. Regex type error code encountered, if applicable."},{"tag":"return","text":"Precompile a regular expression.  Use this if you intend on using the same expression multiple times.  Pass the regex handle returned here to MatchRegex to check for matches. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable. Maximum string length of the error buffer. Regex type error code encountered, if applicable. Valid regex handle on success, INVALID_HANDLE on failure."}]},"kind":"native","returnType":"Regex","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"int","name":"flags","decl":"int flags"},{"type":"char[]","name":"error","decl":"char[] error"},{"type":"int","name":"maxLen","decl":"int maxLen"},{"type":"RegexError&","name":"errcode","decl":"RegexError& errcode"}]},{"name":"MatchRegex","docStart":9218,"docEnd":9640,"docs":{"brief":"Matches a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a pre-compiled regular expression pattern."},{"tag":"param:regex","text":"Matches a string against a pre-compiled regular expression pattern. \n Regex Handle from CompileRegex()"},{"tag":"param:str","text":"Matches a string against a pre-compiled regular expression pattern. \n Regex Handle from CompileRegex() The string to check."},{"tag":"param:ret","text":"Matches a string against a pre-compiled regular expression pattern. \n Regex Handle from CompileRegex() The string to check. Error code, if applicable."},{"tag":"return","text":"Matches a string against a pre-compiled regular expression pattern. \n Regex Handle from CompileRegex() The string to check. Error code, if applicable. Number of captures found or -1 on failure."},{"tag":"note","text":"Matches a string against a pre-compiled regular expression pattern. \n Regex Handle from CompileRegex() The string to check. Error code, if applicable. Number of captures found or -1 on failure. \n Use the regex handle passed to this function to extract matches with GetRegexSubString()."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"regex","decl":"Handle regex"},{"type":"const char[]","name":"str","decl":"const char[] str"},{"type":"RegexError&","name":"ret","decl":"RegexError& ret"}]},{"name":"GetRegexSubString","docStart":9736,"docEnd":10387,"docs":{"brief":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex.","tags":[{"tag":"","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex."},{"tag":"param:regex","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from."},{"tag":"param:str_id","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from. The index of the expression to get - starts at 0, and ends at captures - 1."},{"tag":"param:buffer","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from. The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring."},{"tag":"param:maxlen","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from. The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer."},{"tag":"return","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from. The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer. True if a substring was found, False on fail/error"},{"tag":"note","text":"Returns a matched substring from a regex handle. Substring ids start at 0 and end at captures-1, where captures is the number returned by MatchRegex. \n The regex handle to extract data from. The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer. True if a substring was found, False on fail/error \n str_id = 0 is the full captured string, anything else is the capture group index. \n"}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"regex","decl":"Handle regex"},{"type":"int","name":"str_id","decl":"int str_id"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"}]},{"name":"SimpleRegexMatch","docStart":10476,"docEnd":11121,"docs":{"brief":"Matches a string against a regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a regular expression pattern."},{"tag":"note","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time."},{"tag":"param:str","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check."},{"tag":"param:pattern","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check. The regular expression pattern."},{"tag":"param:flags","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check. The regular expression pattern. General flags for the regular expression."},{"tag":"param:error","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check. The regular expression pattern. General flags for the regular expression. Error message, if applicable."},{"tag":"param:maxLen","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check. The regular expression pattern. General flags for the regular expression. Error message, if applicable. Maximum length of the error buffer."},{"tag":"return","text":"Matches a string against a regular expression pattern. \n If you intend on using the same regular expression pattern multiple times, consider using CompileRegex and MatchRegex instead of making this function reparse the expression each time. \n The string to check. The regular expression pattern. General flags for the regular expression. Error message, if applicable. Maximum length of the error buffer. Number of substrings found or -1 on failure."}]},"kind":"stock","returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str"},{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"int","name":"flags","decl":"int flags"},{"type":"char[]","name":"error","decl":"char[] error"},{"type":"int","name":"maxLen","decl":"int maxLen"}]},{"name":"__ext_regex_SetNTVOptional","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"void","arguments":[]}],"methodmaps":[{"name":"Regex","docStart":5141,"docEnd":5232,"docs":{"brief":"Regular expression objects are used to match or decompose strings based on patterns","tags":[{"tag":"","text":"Regular expression objects are used to match or decompose strings based on patterns"}]},"methods":[{"name":"Regex","docStart":5264,"docEnd":5640,"docs":{"brief":"Compile a regular expression.","tags":[{"tag":"","text":"Compile a regular expression."},{"tag":"param:pattern","text":"Compile a regular expression. \n The regular expression pattern."},{"tag":"param:flags","text":"Compile a regular expression. \n The regular expression pattern. General flags for the regular expression."},{"tag":"param:error","text":"Compile a regular expression. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable."},{"tag":"param:maxLen","text":"Compile a regular expression. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable. Maximum string length of the error buffer."},{"tag":"param:errcode","text":"Compile a regular expression. \n The regular expression pattern. General flags for the regular expression. Error message encountered, if applicable. Maximum string length of the error buffer. Regex type error code encountered, if applicable"}]},"kind":null,"returnType":"Regex","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"int","name":"flags","decl":"int flags"},{"type":"char[]","name":"error","decl":"char[] error"},{"type":"int","name":"maxLen","decl":"int maxLen"},{"type":"RegexError&","name":"errcode","decl":"RegexError& errcode"}]},{"name":"Match","docStart":5778,"docEnd":6251,"docs":{"brief":"Matches a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Matches a string against a pre-compiled regular expression pattern."},{"tag":"param:str","text":"Matches a string against a pre-compiled regular expression pattern. \n The string to check."},{"tag":"param:ret","text":"Matches a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable."},{"tag":"param:offset","text":"Matches a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable. Offset in the string to start searching from. MatchOffset returns the offset of the match."},{"tag":"return","text":"Matches a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable. Offset in the string to start searching from. MatchOffset returns the offset of the match. Number of captures found or -1 on failure."},{"tag":"note","text":"Matches a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable. Offset in the string to start searching from. MatchOffset returns the offset of the match. Number of captures found or -1 on failure. \n Use the regex handle passed to this function to extract matches with GetSubString()"}]},"kind":null,"returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str"},{"type":"RegexError&","name":"ret","decl":"RegexError& ret"},{"type":"int","name":"offset","decl":"int offset"}]},{"name":"MatchAll","docStart":6353,"docEnd":6682,"docs":{"brief":"Gets all matches from a string against a pre-compiled regular expression pattern.","tags":[{"tag":"","text":"Gets all matches from a string against a pre-compiled regular expression pattern."},{"tag":"param:str","text":"Gets all matches from a string against a pre-compiled regular expression pattern. \n The string to check."},{"tag":"param:ret","text":"Gets all matches from a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable."},{"tag":"return","text":"Gets all matches from a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable. Number of matches found or -1 on failure."},{"tag":"note","text":"Gets all matches from a string against a pre-compiled regular expression pattern. \n The string to check. Error code, if applicable. Number of matches found or -1 on failure. \n Use GetSubString() and loop from 0 -> totalmatches - 1"}]},"kind":null,"returnType":"int","arguments":[{"type":"const char[]","name":"str","decl":"const char[] str"},{"type":"RegexError&","name":"ret","decl":"RegexError& ret"}]},{"name":"GetSubString","docStart":6771,"docEnd":7534,"docs":{"brief":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount.","tags":[{"tag":"","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount."},{"tag":"param:str_id","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1."},{"tag":"param:buffer","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring."},{"tag":"param:maxlen","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer."},{"tag":"param:match","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer. Match to get the captures for - starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer. Match to get the captures for - starts at 0, and ends at MatchCount() -1 True if a substring was found, False on fail/error"},{"tag":"note","text":"Returns a matched substring from a regex handle. \n Substring ids start at 0 and end at captures-1, where captures is the number returned by Regex.Match or Regex.CaptureCount. \n The index of the expression to get - starts at 0, and ends at captures - 1. The buffer to set to the matching substring. The maximum string length of the buffer. Match to get the captures for - starts at 0, and ends at MatchCount() -1 True if a substring was found, False on fail/error \n str_id = 0 is the full captured string, anything else is the capture group index. if Regex.Match is used match can only be"}]},"kind":null,"returnType":"bool","arguments":[{"type":"int","name":"str_id","decl":"int str_id"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlen","decl":"int maxlen"},{"type":"int","name":"match","decl":"int match"}]},{"name":"MatchCount","docStart":7628,"docEnd":7788,"docs":{"brief":"Returns number of matches \n When using Match this is always 1 or 0 (unless an error occured)","tags":[{"tag":"","text":"Returns number of matches \n When using Match this is always 1 or 0 (unless an error occured)"},{"tag":"return","text":"Returns number of matches \n When using Match this is always 1 or 0 (unless an error occured) Total number of matches found"}]},"kind":null,"returnType":"int","arguments":[]},{"name":"CaptureCount","docStart":7827,"docEnd":8143,"docs":{"brief":"Returns number of captures for a match","tags":[{"tag":"","text":"Returns number of captures for a match"},{"tag":"param:match","text":"Returns number of captures for a match \n Match to get the number of captures for. Match starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"Returns number of captures for a match \n Match to get the number of captures for. Match starts at 0, and ends at MatchCount() -1 Number of captures in the match."},{"tag":"note","text":"Returns number of captures for a match \n Match to get the number of captures for. Match starts at 0, and ends at MatchCount() -1 Number of captures in the match. \n Use GetSubString() and loop from 1 -> captures -1 for str_id to get all capture"}]},"kind":null,"returnType":"int","arguments":[{"type":"int","name":"match","decl":"int match"}]},{"name":"MatchOffset","docStart":8197,"docEnd":8404,"docs":{"brief":"Returns the string offset of a match.","tags":[{"tag":"","text":"Returns the string offset of a match."},{"tag":"param:match","text":"Returns the string offset of a match. \n Match to get the offset of. Match starts at 0, and ends at MatchCount() -1"},{"tag":"return","text":"Returns the string offset of a match. \n Match to get the offset of. Match starts at 0, and ends at MatchCount() -1 Offset of the match in the string"}]},"kind":null,"returnType":"int","arguments":[{"type":"int","name":"match","decl":"int match"}]}],"properties":[]}],"constants":[],"enums":[{"name":"RegexError","docStart":2903,"docEnd":2945,"docs":{"brief":"Regex expression error codes.","tags":[{"tag":"","text":"Regex expression error codes."}]},"entries":[{"name":"REGEX_ERROR_NONE","docStart":3004,"docEnd":3018,"docs":null},{"name":"REGEX_ERROR_ASSERT","docStart":3059,"docEnd":3081,"docs":null},{"name":"REGEX_ERROR_BADBR","docStart":3120,"docEnd":3153,"docs":null},{"name":"REGEX_ERROR_BADPAT","docStart":3192,"docEnd":3211,"docs":null},{"name":"REGEX_ERROR_BADRPT","docStart":3250,"docEnd":3269,"docs":null},{"name":"REGEX_ERROR_EBRACE","docStart":3308,"docEnd":3327,"docs":null},{"name":"REGEX_ERROR_EBRACK","docStart":3366,"docEnd":3385,"docs":null},{"name":"REGEX_ERROR_ECOLLATE","docStart":3424,"docEnd":3460,"docs":null},{"name":"REGEX_ERROR_ECTYPE","docStart":3499,"docEnd":3514,"docs":null},{"name":"REGEX_ERROR_EESCAPE","docStart":3553,"docEnd":3578,"docs":null},{"name":"REGEX_ERROR_EMPTY","docStart":3617,"docEnd":3639,"docs":null},{"name":"REGEX_ERROR_EPAREN","docStart":3678,"docEnd":3697,"docs":null},{"name":"REGEX_ERROR_ERANGE","docStart":3736,"docEnd":3761,"docs":null},{"name":"REGEX_ERROR_ESIZE","docStart":3800,"docEnd":3824,"docs":null},{"name":"REGEX_ERROR_ESPACE","docStart":3863,"docEnd":3889,"docs":null},{"name":"REGEX_ERROR_ESUBREG","docStart":3928,"docEnd":3952,"docs":null},{"name":"REGEX_ERROR_INVARG","docStart":3991,"docEnd":4009,"docs":null},{"name":"REGEX_ERROR_NOMATCH","docStart":4050,"docEnd":4074,"docs":null},{"name":"REGEX_ERROR_NULL","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADOPTION","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADMAGIC","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_UNKNOWN_OPCODE","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_NOMEMORY","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_NOSUBSTRING","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_MATCHLIMIT","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_CALLOUT","docStart":4324,"docEnd":4355,"docs":null},{"name":"REGEX_ERROR_BADUTF8","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADUTF8_OFFSET","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_PARTIAL","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADPARTIAL","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_INTERNAL","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADCOUNT","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_UITEM","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_UCOND","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_UMLIMIT","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_WSSIZE","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_RECURSE","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_RECURSIONLIMIT","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_NULLWSLIMIT","docStart":4776,"docEnd":4805,"docs":null},{"name":"REGEX_ERROR_BADNEWLINE","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADOFFSET","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_SHORTUTF8","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_RECURSELOOP","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_JIT_STACKLIMIT","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADMODE","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADENDIANNESS","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_DFA_BADRESTART","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_JIT_BADOPTION","docStart":0,"docEnd":0,"docs":null},{"name":"REGEX_ERROR_BADLENGTH","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[],"typedefs":[]}