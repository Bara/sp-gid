¶ifunctionsò4ødnamejCreateMenuhdocStartI"fdocEndJÊddocs¢ebriefx2Creates a new, empty menu using the default style.dtagsÑ¢ctag`dtextx2Creates a new, empty menu using the default style.¢ctagmparam:handlerdtextx^Creates a new, empty menu using the default style. 
 Function which will receive menu actions.¢ctagmparam:actionsdtextyCreates a new, empty menu using the default style. 
 Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions.¢ctagfreturndtextyCreates a new, empty menu using the default style. 
 Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions. A new menu Handle.dkindfnativejreturnTypedMenuiargumentsÇ£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handler£dtypejMenuActiondnamegactionsddeclrMenuAction actionsˇødnamekDisplayMenuhdocStartKAfdocEndLyddocs¢ebriefxDisplays a menu to a client.dtagsÜ¢ctag`dtextxDisplays a menu to a client.¢ctagjparam:menudtextx+Displays a menu to a client. 
 Menu Handle.¢ctaglparam:clientdtextx9Displays a menu to a client. 
 Menu Handle. Client index.¢ctagjparam:timedtextxcDisplays a menu to a client. 
 Menu Handle. Client index. Maximum time to leave menu on the screen.¢ctagfreturndtextxÜDisplays a menu to a client. 
 Menu Handle. Client index. Maximum time to leave menu on the screen. True on success, false on failure.¢ctageerrordtextx¨Displays a menu to a client. 
 Menu Handle. Client index. Maximum time to leave menu on the screen. True on success, false on failure. Invalid Handle or client not in game.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamefclientddecljint client£dtypecintdnamedtimeddeclhint timeˇødnameqDisplayMenuAtItemhdocStartL∫fdocEndNKddocs¢ebriefx:Displays a menu to a client, starting from the given item.dtagsá¢ctag`dtextx:Displays a menu to a client, starting from the given item.¢ctagjparam:menudtextxIDisplays a menu to a client, starting from the given item. 
 Menu Handle.¢ctaglparam:clientdtextxWDisplays a menu to a client, starting from the given item. 
 Menu Handle. Client index.¢ctagpparam:first_itemdtextxyDisplays a menu to a client, starting from the given item. 
 Menu Handle. Client index. First item to begin drawing from.¢ctagjparam:timedtextx£Displays a menu to a client, starting from the given item. 
 Menu Handle. Client index. First item to begin drawing from. Maximum time to leave menu on the screen.¢ctagfreturndtextx∆Displays a menu to a client, starting from the given item. 
 Menu Handle. Client index. First item to begin drawing from. Maximum time to leave menu on the screen. True on success, false on failure.¢ctageerrordtextxÏDisplays a menu to a client, starting from the given item. 
 Menu Handle. Client index. First item to begin drawing from. Maximum time to leave menu on the screen. True on success, false on failure. Invalid Handle or client not in game.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamefclientddecljint client£dtypecintdnamejfirst_itemddeclnint first_item£dtypecintdnamedtimeddeclhint timeˇødnamekAddMenuItemhdocStartN¢fdocEndPÄddocs¢ebriefx(Appends a new item to the end of a menu.dtagsá¢ctag`dtextx(Appends a new item to the end of a menu.¢ctagjparam:menudtextx7Appends a new item to the end of a menu. 
 Menu Handle.¢ctagjparam:infodtextxPAppends a new item to the end of a menu. 
 Menu Handle. Item information string.¢ctagmparam:displaydtextxmAppends a new item to the end of a menu. 
 Menu Handle. Item information string. Default item display string.¢ctagkparam:styledtextx◊Appends a new item to the end of a menu. 
 Menu Handle. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.¢ctagfreturndtextx˙Appends a new item to the end of a menu. 
 Menu Handle. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure.¢ctageerrordtexty Appends a new item to the end of a menu. 
 Menu Handle. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure. Invalid Handle or item limit reached.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednamedmenuddeclkHandle menu£dtypelconst char[]dnamedinfoddeclqconst char[] info£dtypelconst char[]dnamegdisplayddecltconst char[] display£dtypecintdnameestyleddecliint styleˇødnamenInsertMenuItemhdocStartQfdocEndStddocs¢ebriefxÜInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward.dtagsà¢ctag`dtextxÜInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward.¢ctagjparam:menudtextxïInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle.¢ctagnparam:positiondtextx∞Inserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0.¢ctagjparam:infodtextx…Inserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0. Item information string.¢ctagmparam:displaydtextxÊInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0. Item information string. Default item display string.¢ctagkparam:styledtextyPInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.¢ctagfreturndtextysInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure.¢ctageerrordtextyîInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Menu Handle. Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure. Invalid Handle or menu position.dkindfnativejreturnTypedbooliargumentsÖ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamehpositionddecllint position£dtypelconst char[]dnamedinfoddeclqconst char[] info£dtypelconst char[]dnamegdisplayddecltconst char[] display£dtypecintdnameestyleddecliint styleˇødnamenRemoveMenuItemhdocStartTfdocEndUddocs¢ebriefxRemoves an item from the menu.dtagsÖ¢ctag`dtextxRemoves an item from the menu.¢ctagjparam:menudtextx-Removes an item from the menu. 
 Menu Handle.¢ctagnparam:positiondtextxHRemoves an item from the menu. 
 Menu Handle. Position, starting from 0.¢ctagfreturndtextxkRemoves an item from the menu. 
 Menu Handle. Position, starting from 0. True on success, false on failure.¢ctageerrordtextxåRemoves an item from the menu. 
 Menu Handle. Position, starting from 0. True on success, false on failure. Invalid Handle or menu position.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamehpositionddecllint positionˇødnamerRemoveAllMenuItemshdocStartUHfdocEndU◊ddocs¢ebriefxRemoves all items from a menu.dtagsÉ¢ctag`dtextxRemoves all items from a menu.¢ctagjparam:menudtextx-Removes all items from a menu. 
 Menu Handle.¢ctageerrordtextxNRemoves all items from a menu. 
 Menu Handle. Invalid Handle or menu position.dkindfnativejreturnTypedvoidiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamekGetMenuItemhdocStartV	fdocEndXddocs¢ebriefx(Retrieves information about a menu item.dtagsä¢ctag`dtextx(Retrieves information about a menu item.¢ctagjparam:menudtextx7Retrieves information about a menu item. 
 Menu Handle.¢ctagnparam:positiondtextxRRetrieves information about a menu item. 
 Menu Handle. Position, starting from 0.¢ctagmparam:infoBufdtextx_Retrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer.¢ctagpparam:infoBufLendtextxÇRetrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer.¢ctagkparam:styledtextx∞Retrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags.¢ctagmparam:dispBufdtextx¿Retrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer.¢ctagpparam:dispBufLendtextxÊRetrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer. Maximum length of the display buffer.¢ctagfreturndtextyRetrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer. Maximum length of the display buffer. True on success, false if position is invalid.¢ctageerrordtexty%Retrieves information about a menu item. 
 Menu Handle. Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer. Maximum length of the display buffer. True on success, false if position is invalid. Invalid Handle.dkindfnativejreturnTypedbooliargumentsá£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamehpositionddecllint position£dtypefchar[]dnameginfoBufddeclnchar[] infoBuf£dtypecintdnamejinfoBufLenddeclnint infoBufLen£dtypedint&dnameestyleddecljint& style£dtypefchar[]dnamegdispBufddeclnchar[] dispBuf£dtypecintdnamejdispBufLenddeclnint dispBufLenˇødnamexGetMenuSelectionPositionhdocStartX‘fdocEndZºddocs¢ebriefxzReturns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callback.dtagsÉ¢ctag`dtextxzReturns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callback.¢ctagfreturndtexty!Returns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callback. 
 First item number on the page the client was viewing before selecting the item in the callback.  This can be used to re-display the menu from the original position.¢ctageerrordtextyVReturns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callback. 
 First item number on the page the client was viewing before selecting the item in the callback.  This can be used to re-display the menu from the original position. Not called from inside a MenuAction_Select callback.dkindfnativejreturnTypecintiargumentsÄˇødnamepGetMenuItemCounthdocStartZËfdocEnd[§ddocs¢ebriefx&Returns the number of items in a menu.dtagsÑ¢ctag`dtextx&Returns the number of items in a menu.¢ctagjparam:menudtextx5Returns the number of items in a menu. 
 Menu Handle.¢ctagfreturndtextxRReturns the number of items in a menu. 
 Menu Handle. Number of items in the menu.¢ctageerrordtextxbReturns the number of items in a menu. 
 Menu Handle. Number of items in the menu. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnameqSetMenuPaginationhdocStart[”fdocEnd]ºddocs¢ebriefx√Sets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired.dtagsÖ¢ctag`dtextx√Sets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired.¢ctagjparam:menudtextxŸSets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired. 
 Handle to the menu.¢ctagrparam:itemsPerPagedtexty
Sets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired. 
 Handle to the menu. Number of items per page, or MENU_NO_PAGINATION.¢ctagfreturndtextyCSets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired. 
 Handle to the menu. Number of items per page, or MENU_NO_PAGINATION. True on success, false if pagination is too high or low.¢ctageerrordtextySSets whether the menu should be paginated or not. 
 If itemsPerPage is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed.  It can be re-applied if desired. 
 Handle to the menu. Number of items per page, or MENU_NO_PAGINATION. True on success, false if pagination is too high or low. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamelitemsPerPageddeclpint itemsPerPageˇødnameqGetMenuPaginationhdocStart]ˇfdocEnd^∑ddocs¢ebriefx$Returns a menu's pagination setting.dtagsÑ¢ctag`dtextx$Returns a menu's pagination setting.¢ctagjparam:menudtextx:Returns a menu's pagination setting. 
 Handle to the menu.¢ctagfreturndtextxNReturns a menu's pagination setting. 
 Handle to the menu. Pagination setting.¢ctageerrordtextx^Returns a menu's pagination setting. 
 Handle to the menu. Pagination setting. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamelGetMenuStylehdocStart^ÁfdocEnd_Ÿddocs¢ebriefxMReturns a menu's MenuStyle Handle.  The Handle is global and cannot be freed.dtagsÑ¢ctag`dtextxMReturns a menu's MenuStyle Handle.  The Handle is global and cannot be freed.¢ctagjparam:menudtextxcReturns a menu's MenuStyle Handle.  The Handle is global and cannot be freed. 
 Handle to the menu.¢ctagfreturndtextxÑReturns a menu's MenuStyle Handle.  The Handle is global and cannot be freed. 
 Handle to the menu. Handle to the menu's draw style.¢ctageerrordtextxîReturns a menu's MenuStyle Handle.  The Handle is global and cannot be freed. 
 Handle to the menu. Handle to the menu's draw style. Invalid Handle.dkindfnativejreturnTypefHandleiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamelSetMenuTitlehdocStart`fdocEnd`˚ddocs¢ebriefx2Sets the menu's default title/instruction message.dtagsÖ¢ctag`dtextx2Sets the menu's default title/instruction message.¢ctagjparam:menudtextxASets the menu's default title/instruction message. 
 Menu Handle.¢ctagiparam:fmtdtextxWSets the menu's default title/instruction message. 
 Menu Handle. Message string format¢ctagiparam:...dtextxqSets the menu's default title/instruction message. 
 Menu Handle. Message string format Message string arguments.¢ctageerrordtextxÅSets the menu's default title/instruction message. 
 Menu Handle. Message string format Message string arguments. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednamedmenuddeclkHandle menu£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnamelGetMenuTitlehdocStartaBfdocEndb^ddocs¢ebriefx#Returns the text of a menu's title.dtagsÜ¢ctag`dtextx#Returns the text of a menu's title.¢ctagjparam:menudtextx2Returns the text of a menu's title. 
 Menu Handle.¢ctaglparam:bufferdtextxIReturns the text of a menu's title. 
 Menu Handle. Buffer to store title.¢ctagoparam:maxlengthdtextxgReturns the text of a menu's title. 
 Menu Handle. Buffer to store title. Maximum length of the buffer.¢ctagfreturndtextxÄReturns the text of a menu's title. 
 Menu Handle. Buffer to store title. Maximum length of the buffer. Number of bytes written.¢ctageerrordtextxêReturns the text of a menu's title. 
 Menu Handle. Buffer to store title. Maximum length of the buffer. Number of bytes written. Invalid Handle/dkindfnativejreturnTypecintiargumentsÉ£dtypefHandlednamedmenuddeclkHandle menu£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamesCreatePanelFromMenuhdocStartbßfdocEndcúddocs¢ebriefx`Creates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle().dtagsÑ¢ctag`dtextx`Creates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle().¢ctagjparam:menudtextxoCreates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle(). 
 Menu Handle.¢ctagfreturndtextxáCreates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle(). 
 Menu Handle. A new MenuPanel Handle.¢ctageerrordtextxóCreates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle(). 
 Menu Handle. A new MenuPanel Handle. Invalid Handle.dkindfnativejreturnTypeePaneliargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnameqGetMenuExitButtonhdocStartc–fdocEndd›ddocs¢ebriefxZReturns whether or not the menu has an exit button. By default, menus have an exit button.dtagsÑ¢ctag`dtextxZReturns whether or not the menu has an exit button. By default, menus have an exit button.¢ctagjparam:menudtextxiReturns whether or not the menu has an exit button. By default, menus have an exit button. 
 Menu Handle.¢ctagfreturndtextxüReturns whether or not the menu has an exit button. By default, menus have an exit button. 
 Menu Handle. True if the menu has an exit button; false otherwise.¢ctageerrordtextxØReturns whether or not the menu has an exit button. By default, menus have an exit button. 
 Menu Handle. True if the menu has an exit button; false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnameqSetMenuExitButtonhdocStartefdocEndgïddocs¢ebriefyáSets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed.dtagsÖ¢ctag`dtextyáSets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed.¢ctagjparam:menudtextyñSets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed. 
 Menu Handle.¢ctaglparam:buttondtexty≈Sets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed. 
 Menu Handle. True to enable the button, false to remove it.¢ctagfreturndtextyËSets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed. 
 Menu Handle. True to enable the button, false to remove it. True if allowed; false on failure.¢ctageerrordtexty¯Sets whether or not the menu has an exit button.  By default, paginated menus have an exit button. 
 If a menu's pagination is changed to MENU_NO_PAGINATION, and the pagination was previously a different value, then the Exit button status is changed to false.  It must be explicitly re-enabled afterwards. 
 If a non-paginated menu has an exit button, then at most 9 items will be displayed. 
 Menu Handle. True to enable the button, false to remove it. True if allowed; false on failure. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypedbooldnamefbuttonddeclkbool buttonˇødnameuGetMenuExitBackButtonhdocStartg”fdocEndiÖddocs¢ebriefxReturns whether or not the menu has an "exit back" button.  By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack.dtagsÑ¢ctag`dtextxReturns whether or not the menu has an "exit back" button.  By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack.¢ctagjparam:menudtextxˇReturns whether or not the menu has an "exit back" button.  By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle.¢ctagfreturndtexty:Returns whether or not the menu has an "exit back" button.  By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle. True if the menu has an exit back button; false otherwise.¢ctageerrordtextyJReturns whether or not the menu has an "exit back" button.  By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle. True if the menu has an exit back button; false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnameuSetMenuExitBackButtonhdocStarti∫fdocEndk\ddocs¢ebriefxÏSets whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack.dtagsÑ¢ctag`dtextxÏSets whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack.¢ctagjparam:menudtextx˚Sets whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle.¢ctaglparam:buttondtexty*Sets whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle. True to enable the button, false to remove it.¢ctageerrordtexty:Sets whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBack. 
 Menu Handle. True to enable the button, false to remove it. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypedbooldnamefbuttonddeclkbool buttonˇødnamesSetMenuNoVoteButtonhdocStartkûfdocEndlÙddocs¢ebriefxnSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button.dtagsÖ¢ctag`dtextxnSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button.¢ctagjparam:menudtextx}Sets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button. 
 Menu Handle.¢ctaglparam:buttondtextx¨Sets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button. 
 Menu Handle. True to enable the button, false to remove it.¢ctagfreturndtextxœSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button. 
 Menu Handle. True to enable the button, false to remove it. True if allowed; false on failure.¢ctageerrordtextxﬂSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote button. 
 Menu Handle. True to enable the button, false to remove it. True if allowed; false on failure. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypedbooldnamefbuttonddeclkbool buttonˇødnamejCancelMenuhdocStartm4fdocEndnˆddocs¢ebriefyJCancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelled.dtagsÉ¢ctag`dtextyJCancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelled.¢ctagjparam:menudtextyYCancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelled. 
 Menu Handle.¢ctageerrordtextyiCancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelled. 
 Menu Handle. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamerGetMenuOptionFlagshdocStarto fdocEndo◊ddocs¢ebriefx Retrieves a menu's option flags.dtagsÑ¢ctag`dtextx Retrieves a menu's option flags.¢ctagjparam:menudtextx/Retrieves a menu's option flags. 
 Menu Handle.¢ctagfreturndtextxMRetrieves a menu's option flags. 
 Menu Handle. A bitstring of MENUFLAG bits.¢ctageerrordtextx]Retrieves a menu's option flags. 
 Menu Handle. A bitstring of MENUFLAG bits. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamerSetMenuOptionFlagshdocStartpfdocEndqíddocs¢ebriefx·Sets a menu's option flags. 
 If a certain bit is not supported, it will be stripped before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() for information on Exit Back buttons.dtagsÑ¢ctag`dtextx·Sets a menu's option flags. 
 If a certain bit is not supported, it will be stripped before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() for information on Exit Back buttons.¢ctagjparam:menudtextxSets a menu's option flags. 
 If a certain bit is not supported, it will be stripped before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() for information on Exit Back buttons. 
 Menu Handle.¢ctagkparam:flagsdtextySets a menu's option flags. 
 If a certain bit is not supported, it will be stripped before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() for information on Exit Back buttons. 
 Menu Handle. A new bitstring of MENUFLAG bits.¢ctageerrordtexty"Sets a menu's option flags. 
 If a certain bit is not supported, it will be stripped before being set. See SetMenuExitButton() for information on Exit buttons. See SetMenuExitBackButton() for information on Exit Back buttons. 
 Menu Handle. A new bitstring of MENUFLAG bits. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnameeflagsddecliint flagsˇødnamepIsVoteInProgresshdocStartqœfdocEndrÑddocs¢ebriefx&Returns whether a vote is in progress.dtagsÉ¢ctag`dtextx&Returns whether a vote is in progress.¢ctagjparam:menudtextxDReturns whether a vote is in progress. 
 Deprecated; no longer used.¢ctagfreturndtextxtReturns whether a vote is in progress. 
 Deprecated; no longer used. True if a vote is in progress, false otherwise.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednamedmenuddeclkHandle menuˇødnamejCancelVotehdocStartr√fdocEnds%ddocs¢ebriefxCancels the vote in progress.dtagsÇ¢ctag`dtextxCancels the vote in progress.¢ctageerrordtextx:Cancels the vote in progress. 
 If no vote is in progress.dkindfnativejreturnTypedvoidiargumentsÄˇødnamehVoteMenuhdocStartsDfdocEndv`ddocs¢ebriefy#Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled.dtagsà¢ctag`dtexty#Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled.¢ctagjparam:menudtexty2Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle.¢ctagmparam:clientsdtextyTBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to.¢ctagpparam:numClientsdtextytBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to. Number of clients in the array.¢ctagjparam:timedtextyûBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen.¢ctagkparam:flagsdtextyµBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags.¢ctagfreturndtextyBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress.¢ctageerrordtexty3Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Menu Handle. Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress. Invalid Handle, or a vote is already in progress.dkindfnativejreturnTypedbooliargumentsÖ£dtypefHandlednamedmenuddeclkHandle menu£dtypeeint[]dnamegclientsddeclmint[] clients£dtypecintdnamejnumClientsddeclnint numClients£dtypecintdnamedtimeddeclhint time£dtypecintdnameeflagsddecliint flagsˇødnamemVoteMenuToAllhdocStartvæfdocEndxVddocs¢ebriefxGSends a vote menu to all clients.  See VoteMenu() for more information.dtagsÜ¢ctag`dtextxGSends a vote menu to all clients.  See VoteMenu() for more information.¢ctagjparam:menudtextxVSends a vote menu to all clients.  See VoteMenu() for more information. 
 Menu Handle.¢ctagjparam:timedtextxÄSends a vote menu to all clients.  See VoteMenu() for more information. 
 Menu Handle. Maximum time to leave menu on the screen.¢ctagkparam:flagsdtextxóSends a vote menu to all clients.  See VoteMenu() for more information. 
 Menu Handle. Maximum time to leave menu on the screen. Optional voting flags.¢ctagfreturndtextx„Sends a vote menu to all clients.  See VoteMenu() for more information. 
 Menu Handle. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress.¢ctageerrordtextxÛSends a vote menu to all clients.  See VoteMenu() for more information. 
 Menu Handle. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress. Invalid Handle.dkindestockjreturnTypedbooliargumentsÉ£dtypefHandlednamedmenuddeclkHandle menu£dtypecintdnamedtimeddeclhint time£dtypecintdnameeflagsddecliint flagsˇødnameuSetVoteResultCallbackhdocStart|ˆfdocEnd}˚ddocs¢ebriefxiSets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd will not be called.dtagsÑ¢ctag`dtextxiSets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd will not be called.¢ctagjparam:menudtextxxSets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd will not be called. 
 Menu Handle.¢ctagnparam:callbackdtextxãSets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd will not be called. 
 Menu Handle. Callback function.¢ctageerrordtextxßSets an advanced vote handling callback.  If this callback is set, MenuAction_VoteEnd will not be called. 
 Menu Handle. Callback function. Invalid Handle or callback.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednamedmenuddeclkHandle menu£dtypekVoteHandlerdnamehcallbackddecltVoteHandler callbackˇødnamenCheckVoteDelayhdocStart~FfdocEndDddocs¢ebriefx¢Returns the number of seconds you should "wait" before displaying a publicly invocable menu.  This number is the time remaining until (last_vote + sm_vote_delay).dtagsÇ¢ctag`dtextx¢Returns the number of seconds you should "wait" before displaying a publicly invocable menu.  This number is the time remaining until (last_vote + sm_vote_delay).¢ctagfreturndtextxŒReturns the number of seconds you should "wait" before displaying a publicly invocable menu.  This number is the time remaining until (last_vote + sm_vote_delay). 
 Number of seconds to wait, or 0 for none.dkindfnativejreturnTypecintiargumentsÄˇødnamerIsClientInVotePoolhdocStartffdocEndÄ›ddocs¢ebriefxõReturns whether a client is in the pool of clients allowed to participate in the current vote.  This is determined by the client list passed to VoteMenu().dtagsÑ¢ctag`dtextxõReturns whether a client is in the pool of clients allowed to participate in the current vote.  This is determined by the client list passed to VoteMenu().¢ctaglparam:clientdtextx´Returns whether a client is in the pool of clients allowed to participate in the current vote.  This is determined by the client list passed to VoteMenu(). 
 Client index.¢ctagfreturndtextxﬂReturns whether a client is in the pool of clients allowed to participate in the current vote.  This is determined by the client list passed to VoteMenu(). 
 Client index. True if client is allowed to vote, false otherwise.¢ctageerrordtextyReturns whether a client is in the pool of clients allowed to participate in the current vote.  This is determined by the client list passed to VoteMenu(). 
 Client index. True if client is allowed to vote, false otherwise. If no vote is in progress or client index is invalid.dkindfnativejreturnTypedbooliargumentsÅ£dtypecintdnamefclientddecljint clientˇødnametRedrawClientVoteMenuhdocStartÅfdocEndÇœddocs¢ebriefx=Redraws the current vote menu to a client in the voting pool.dtagsÖ¢ctag`dtextx=Redraws the current vote menu to a client in the voting pool.¢ctaglparam:clientdtextxMRedraws the current vote menu to a client in the voting pool. 
 Client index.¢ctagmparam:revotesdtextxuRedraws the current vote menu to a client in the voting pool. 
 Client index. True to allow revotes, false otherwise.¢ctagfreturndtextx≈Redraws the current vote menu to a client in the voting pool. 
 Client index. True to allow revotes, false otherwise. True on success, false if the client is in the vote pool but cannot vote again.¢ctageerrordtextyRedraws the current vote menu to a client in the voting pool. 
 Client index. True to allow revotes, false otherwise. True on success, false if the client is in the vote pool but cannot vote again. No vote in progress, int client is not in the voting pool, or client index is invalid.dkindfnativejreturnTypedbooliargumentsÇ£dtypecintdnamefclientddecljint client£dtypedbooldnamegrevotesddecllbool revotesˇødnamerGetMenuStyleHandlehdocStartÉfdocEndÉ∫ddocs¢ebriefx Returns a style's global Handle.dtagsÉ¢ctag`dtextx Returns a style's global Handle.¢ctagkparam:styledtextx.Returns a style's global Handle. 
 Menu Style.¢ctagfreturndtextxdReturns a style's global Handle. 
 Menu Style. A Handle, or INVALID_HANDLE if not found or unusable.dkindfnativejreturnTypefHandleiargumentsÅ£dtypeiMenuStylednameestyleddecloMenuStyle styleˇødnamekCreatePanelhdocStartÉÚfdocEndÖuddocs¢ebriefxüCreates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without any extra helper functions.  The Handle must be closed with CloseHandle().dtagsÑ¢ctag`dtextxüCreates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without any extra helper functions.  The Handle must be closed with CloseHandle().¢ctaglparam:hStyledtextxﬂCreates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without any extra helper functions.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style.¢ctagfreturndtextx˜Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without any extra helper functions.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. A new MenuPanel Handle.¢ctageerrordtexty!Creates a MenuPanel from a MenuStyle.  Panels are used for drawing raw menus without any extra helper functions.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. A new MenuPanel Handle. Invalid Handle other than INVALID_HANDLE.dkindfnativejreturnTypeePaneliargumentsÅ£dtypefHandlednamefhStyleddeclmHandle hStyleˇødnamelCreateMenuExhdocStartÖ≤fdocEndà1ddocs¢ebriefxOCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle().dtagsÜ¢ctag`dtextxOCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle().¢ctaglparam:hStyledtextxèCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style.¢ctagmparam:handlerdtextxπCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Function which will receive menu actions.¢ctagmparam:actionsdtextygCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions.¢ctagfreturndtextyzCreates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions. A new menu Handle.¢ctageerrordtexty§Creates a Menu from a MenuStyle.  The Handle must be closed with CloseHandle(). 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actions. A new menu Handle. Invalid Handle other than INVALID_HANDLE.dkindfnativejreturnTypedMenuiargumentsÉ£dtypefHandlednamefhStyleddeclmHandle hStyle£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handler£dtypejMenuActiondnamegactionsddeclrMenuAction actionsˇødnamemGetClientMenuhdocStartà¨fdocEndâÃddocs¢ebriefx+Returns whether a client is viewing a menu.dtagsÖ¢ctag`dtextx+Returns whether a client is viewing a menu.¢ctaglparam:clientdtextx;Returns whether a client is viewing a menu. 
 Client index.¢ctaglparam:hStyledtextxyReturns whether a client is viewing a menu. 
 Client index. MenuStyle Handle, or INVALID_HANDLE to use the default style.¢ctagfreturndtextxçReturns whether a client is viewing a menu. 
 Client index. MenuStyle Handle, or INVALID_HANDLE to use the default style. A MenuSource value.¢ctageerrordtextx≠Returns whether a client is viewing a menu. 
 Client index. MenuStyle Handle, or INVALID_HANDLE to use the default style. A MenuSource value. Invalid Handle other than null.dkindfnativejreturnTypejMenuSourceiargumentsÇ£dtypecintdnamefclientddecljint client£dtypefHandlednamefhStyleddeclmHandle hStyleˇødnamepCancelClientMenuhdocStartäfdocEndã≤ddocs¢ebriefxFCancels a menu on a client.  This will only affect non-external menus.dtagsÖ¢ctag`dtextxFCancels a menu on a client.  This will only affect non-external menus.¢ctaglparam:clientdtextxVCancels a menu on a client.  This will only affect non-external menus. 
 Client index.¢ctagpparam:autoIgnoredtextxßCancels a menu on a client.  This will only affect non-external menus. 
 Client index. If true, no menus can be re-drawn on the client during the cancellation process.¢ctaglparam:hStyledtextxÂCancels a menu on a client.  This will only affect non-external menus. 
 Client index. If true, no menus can be re-drawn on the client during the cancellation process. MenuStyle Handle, or INVALID_HANDLE to use the default style.¢ctagfreturndtextyCancels a menu on a client.  This will only affect non-external menus. 
 Client index. If true, no menus can be re-drawn on the client during the cancellation process. MenuStyle Handle, or INVALID_HANDLE to use the default style. True if a menu was cancelled, false otherwise.dkindfnativejreturnTypedbooliargumentsÉ£dtypecintdnamefclientddecljint client£dtypedbooldnamejautoIgnoreddeclobool autoIgnore£dtypefHandlednamefhStyleddeclmHandle hStyleˇødnameoGetMaxPageItemshdocStartåfdocEndçddocs¢ebriefx)Returns a style's maximum items per page.dtagsÑ¢ctag`dtextx)Returns a style's maximum items per page.¢ctaglparam:hStyledtextxiReturns a style's maximum items per page. 
 MenuStyle Handle, or INVALID_HANDLE to use the default style.¢ctagfreturndtextxÅReturns a style's maximum items per page. 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Maximum items per page.¢ctageerrordtextx´Returns a style's maximum items per page. 
 MenuStyle Handle, or INVALID_HANDLE to use the default style. Maximum items per page. Invalid Handle other than INVALID_HANDLE.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednamefhStyleddeclmHandle hStyleˇødnamemGetPanelStylehdocStartçZfdocEndé*ddocs¢ebriefx#Returns a MenuPanel's parent style.dtagsÑ¢ctag`dtextx#Returns a MenuPanel's parent style.¢ctagkparam:paneldtextx9Returns a MenuPanel's parent style. 
 A MenuPanel Handle.¢ctagfreturndtextxfReturns a MenuPanel's parent style. 
 A MenuPanel Handle. The MenuStyle Handle that created the panel.¢ctageerrordtextxvReturns a MenuPanel's parent style. 
 A MenuPanel Handle. The MenuStyle Handle that created the panel. Invalid Handle.dkindfnativejreturnTypefHandleiargumentsÅ£dtypefHandlednameepanelddecllHandle panelˇødnamemSetPanelTitlehdocStartéZfdocEndè\ddocs¢ebriefwSets the panel's title.dtagsÖ¢ctag`dtextwSets the panel's title.¢ctagkparam:paneldtextx-Sets the panel's title. 
 A MenuPanel Handle.¢ctagjparam:textdtextxGSets the panel's title. 
 A MenuPanel Handle. Text to set as the title.¢ctagqparam:onlyIfEmptydtextxSets the panel's title. 
 A MenuPanel Handle. Text to set as the title. If true, the title will only be set if no title is set.¢ctageerrordtextxèSets the panel's title. 
 A MenuPanel Handle. Text to set as the title. If true, the title will only be set if no title is set. Invalid Handle.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameepanelddecllHandle panel£dtypelconst char[]dnamedtextddeclqconst char[] text£dtypedbooldnamekonlyIfEmptyddeclpbool onlyIfEmptyˇødnamemDrawPanelItemhdocStartèµfdocEndë√ddocs¢ebriefxQDraws an item on a panel.  If the item takes up a slot, the position is returned.dtagsÜ¢ctag`dtextxQDraws an item on a panel.  If the item takes up a slot, the position is returned.¢ctagkparam:paneldtextxgDraws an item on a panel.  If the item takes up a slot, the position is returned. 
 A MenuPanel Handle.¢ctagjparam:textdtextx„Draws an item on a panel.  If the item takes up a slot, the position is returned. 
 A MenuPanel Handle. Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed.¢ctagkparam:styledtextx˘Draws an item on a panel.  If the item takes up a slot, the position is returned. 
 A MenuPanel Handle. Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed. ITEMDRAW style flags.¢ctagfreturndtexty<Draws an item on a panel.  If the item takes up a slot, the position is returned. 
 A MenuPanel Handle. Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed. ITEMDRAW style flags. A slot position, or 0 if item was a rawline or could not be drawn.¢ctageerrordtextyLDraws an item on a panel.  If the item takes up a slot, the position is returned. 
 A MenuPanel Handle. Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed. ITEMDRAW style flags. A slot position, or 0 if item was a rawline or could not be drawn. Invalid Handle.dkindfnativejreturnTypecintiargumentsÉ£dtypefHandlednameepanelddecllHandle panel£dtypelconst char[]dnamedtextddeclqconst char[] text£dtypecintdnameestyleddecliint styleˇødnamemDrawPanelTexthdocStartífdocEndì©ddocs¢ebriefxMDraws a raw line of text on a panel, without any markup other than a newline.dtagsÖ¢ctag`dtextxMDraws a raw line of text on a panel, without any markup other than a newline.¢ctagkparam:paneldtextx¢Draws a raw line of text on a panel, without any markup other than a newline. 
 A MenuPanel Handle, or INVALID_HANDLE if inside a MenuAction_DisplayItem callback.¢ctagjparam:textdtextx∑Draws a raw line of text on a panel, without any markup other than a newline. 
 A MenuPanel Handle, or INVALID_HANDLE if inside a MenuAction_DisplayItem callback. Display text to use.¢ctagfreturndtextxÓDraws a raw line of text on a panel, without any markup other than a newline. 
 A MenuPanel Handle, or INVALID_HANDLE if inside a MenuAction_DisplayItem callback. Display text to use. True on success, false if raw lines are not supported.¢ctageerrordtextx˛Draws a raw line of text on a panel, without any markup other than a newline. 
 A MenuPanel Handle, or INVALID_HANDLE if inside a MenuAction_DisplayItem callback. Display text to use. True on success, false if raw lines are not supported. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednameepanelddecllHandle panel£dtypelconst char[]dnamedtextddeclqconst char[] textˇødnameqCanPanelDrawFlagshdocStartìÍfdocEndïddocs¢ebriefxOReturns whether or not the given drawing flags are supported by the menu style.dtagsÖ¢ctag`dtextxOReturns whether or not the given drawing flags are supported by the menu style.¢ctagkparam:paneldtextxeReturns whether or not the given drawing flags are supported by the menu style. 
 A MenuPanel Handle.¢ctagkparam:styledtextx{Returns whether or not the given drawing flags are supported by the menu style. 
 A MenuPanel Handle. ITEMDRAW style flags.¢ctagfreturndtextx¶Returns whether or not the given drawing flags are supported by the menu style. 
 A MenuPanel Handle. ITEMDRAW style flags. True if item is drawable, false otherwise.¢ctageerrordtextx∂Returns whether or not the given drawing flags are supported by the menu style. 
 A MenuPanel Handle. ITEMDRAW style flags. True if item is drawable, false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednameepanelddecllHandle panel£dtypecintdnameestyleddecliint styleˇødnamelSetPanelKeyshdocStartïTfdocEndóddocs¢ebriefxqSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing).dtagsÑ¢ctag`dtextxqSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing).¢ctagkparam:paneldtextxáSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing). 
 A MenuPanel Handle.¢ctagjparam:keysdtextySets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing). 
 A MenuPanel Handle. An integer where each bit N allows key N+1 to be selected.  If no keys are selectable, then key 0 (bit 9) is automatically set.¢ctagfreturndtexty+Sets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing). 
 A MenuPanel Handle. An integer where each bit N allows key N+1 to be selected.  If no keys are selectable, then key 0 (bit 9) is automatically set. True if supported, false otherwise.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednameepanelddecllHandle panel£dtypecintdnamedkeysddeclhint keysˇødnameqSendPanelToClienthdocStartóFfdocEndöddocs¢ebriefy_Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called.dtagsá¢ctag`dtexty_Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called.¢ctagkparam:paneldtextyuSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle.¢ctaglparam:clientdtextyäSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle. A client to draw to.¢ctagmparam:handlerdtexty∫Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle. A client to draw to. The MenuHandler function to catch actions with.¢ctagjparam:timedtexty’Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle. A client to draw to. The MenuHandler function to catch actions with. Time to hold the menu for.¢ctagfreturndtexty¯Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle. A client to draw to. The MenuHandler function to catch actions with. Time to hold the menu for. True on success, false on failure.¢ctageerrordtextySends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have INVALID_HANDLE for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A MenuPanel Handle. A client to draw to. The MenuHandler function to catch actions with. Time to hold the menu for. True on success, false on failure. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednameepanelddecllHandle panel£dtypecintdnamefclientddecljint client£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handler£dtypecintdnamedtimeddeclhint timeˇødnameuGetPanelTextRemaininghdocStartölfdocEndúKddocs¢ebriefx‹Returns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning).dtagsÖ¢ctag`dtext`¢ctagebriefdtextx‹Returns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning).¢ctagkparam:paneldtextxÚReturns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning). 
 A MenuPanel Handle.¢ctagfreturndtextyGReturns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning). 
 A MenuPanel Handle. Number of characters that the menu can still hold, or -1 if there is no known limit.¢ctageerrordtextyWReturns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning). 
 A MenuPanel Handle. Number of characters that the menu can still hold, or -1 if there is no known limit. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednameepanelddecllHandle panelˇødnamerGetPanelCurrentKeyhdocStartúÄfdocEndùLddocs¢ebriefx!Returns the current key position.dtagsÖ¢ctag`dtext`¢ctagebriefdtextx!Returns the current key position.¢ctagkparam:paneldtextx7Returns the current key position. 
 A MenuPanel Handle.¢ctagfreturndtextx[Returns the current key position. 
 A MenuPanel Handle. Current key position starting at 1.¢ctageerrordtextxkReturns the current key position. 
 A MenuPanel Handle. Current key position starting at 1. Invalid Handle.dkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednameepanelddecllHandle panelˇødnamerSetPanelCurrentKeyhdocStartù~fdocEndû⁄ddocs¢ebriefxGSets the next key position.  This cannot be used to traverse backwards.dtagsÜ¢ctag`dtext`¢ctagebriefdtextxGSets the next key position.  This cannot be used to traverse backwards.¢ctagkparam:paneldtextx]Sets the next key position.  This cannot be used to traverse backwards. 
 A MenuPanel Handle.¢ctagiparam:keydtextxìSets the next key position.  This cannot be used to traverse backwards. 
 A MenuPanel Handle. Key that is greater or equal to GetPanelCurrentKey().¢ctagfreturndtextxµSets the next key position.  This cannot be used to traverse backwards. 
 A MenuPanel Handle. Key that is greater or equal to GetPanelCurrentKey(). True on success, false otherwise.¢ctageerrordtextx≈Sets the next key position.  This cannot be used to traverse backwards. 
 A MenuPanel Handle. Key that is greater or equal to GetPanelCurrentKey(). True on success, false otherwise. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÇ£dtypefHandlednameepanelddecllHandle panel£dtypecintdnameckeyddeclgint keyˇødnamenRedrawMenuItemhdocStartüfdocEndüÂddocs¢ebriefx@Redraws menu text from inside a MenuAction_DisplayItem callback.dtagsÑ¢ctag`dtext`¢ctagebriefdtextx@Redraws menu text from inside a MenuAction_DisplayItem callback.¢ctagjparam:textdtextxURedraws menu text from inside a MenuAction_DisplayItem callback. 
 Menu text to draw.¢ctagfreturndtextxáRedraws menu text from inside a MenuAction_DisplayItem callback. 
 Menu text to draw. Item position; must be returned via the callback.dkindfnativejreturnTypecintiargumentsÅ£dtypelconst char[]dnamedtextddeclqconst char[] textˇødnamepInternalShowMenuhdocStart†fdocEnd£îddocs¢ebriefyvThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally.dtagsà¢ctag`dtextyvThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally.¢ctaglparam:clientdtextyÜThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index.¢ctagiparam:strdtextyºThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network.¢ctagjparam:timedtexty◊This function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network. Time to hold the menu for.¢ctagjparam:keysdtextyÒThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network. Time to hold the menu for. Selectable key bitstring.¢ctagmparam:handlerdtexty8This function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network. Time to hold the menu for. Selectable key bitstring. Optional handler function, with the same rules as SendPanelToClient().¢ctagfreturndtexty[This function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network. Time to hold the menu for. Selectable key bitstring. Optional handler function, with the same rules as SendPanelToClient(). True on success, false on failure.¢ctageerrordtextyèThis function is provided for legacy code only.  Some older plugins may use network messages instead of the panel API.  This function wraps the panel API for eased portability into the SourceMod menu system. 
 This function is only usable with the Radio Menu style.  You do not need to split up your menu into multiple packets; SourceMod will break the string up internally. 
 Client index. Full menu string as would be passed over the network. Time to hold the menu for. Selectable key bitstring. Optional handler function, with the same rules as SendPanelToClient(). True on success, false on failure. Invalid client index, or radio menus not supported.dkindfnativejreturnTypedbooliargumentsÖ£dtypecintdnamefclientddecljint client£dtypelconst char[]dnamecstrddeclpconst char[] str£dtypecintdnamedtimeddeclhint time£dtypecintdnamedkeysddeclhint keys£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handlerˇødnameoGetMenuVoteInfohdocStart§fdocEnd•ddocs¢ebriefx5Retrieves voting information from MenuAction_VoteEnd.dtagsÑ¢ctag`dtextx5Retrieves voting information from MenuAction_VoteEnd.¢ctaglparam:param2dtextx_Retrieves voting information from MenuAction_VoteEnd. 
 Second parameter of MenuAction_VoteEnd.¢ctagrparam:winningVotesdtextxèRetrieves voting information from MenuAction_VoteEnd. 
 Second parameter of MenuAction_VoteEnd. Number of votes received by the winning option.¢ctagpparam:totalVotesdtextxØRetrieves voting information from MenuAction_VoteEnd. 
 Second parameter of MenuAction_VoteEnd. Number of votes received by the winning option. Number of total votes received.dkindestockjreturnTypedvoidiargumentsÉ£dtypecintdnamefparam2ddecljint param2£dtypedint&dnamelwinningVotesddeclqint& winningVotes£dtypedint&dnamejtotalVotesddecloint& totalVotesˇødnamepIsNewVoteAllowedhdocStart•∞fdocEndß
ddocs¢ebriefx∫Quick stock to determine whether voting is allowed.  This doesn't let you fine-tune a reason for not voting, so it's not recommended for lazily telling clients that voting isn't allowed.dtagsÇ¢ctag`dtextx∫Quick stock to determine whether voting is allowed.  This doesn't let you fine-tune a reason for not voting, so it's not recommended for lazily telling clients that voting isn't allowed.¢ctagfreturndtextyQuick stock to determine whether voting is allowed.  This doesn't let you fine-tune a reason for not voting, so it's not recommended for lazily telling clients that voting isn't allowed. 
 True if voting is allowed, false if voting is in progress or the cooldown is active.dkindestockjreturnTypedbooliargumentsÄˇjmethodmapsÇødnameePanelhdocStartﬂfdocEndcddocs¢ebriefx|Panels are used for drawing raw menus without any extra helper functions. Handles must be closed via delete or CloseHandle()dtagsÅ¢ctag`dtextx|Panels are used for drawing raw menus without any extra helper functions. Handles must be closed via delete or CloseHandle()gmethodsáødnameePanelhdocStartÉfdocEndıddocs¢ebriefxConstructor for a new Panel.dtagsÇ¢ctag`dtextxConstructor for a new Panel.¢ctaglparam:hStyledtextxQConstructor for a new Panel. 
 MenuStyle Handle, or null to use the default styledkindˆjreturnTypeePaneliargumentsÅ£dtypefHandlednamefhStyleddeclmHandle hStyleˇødnamehSetTitlehdocStart'fdocEndÃddocs¢ebriefwSets the panel's title.dtagsÉ¢ctag`dtextwSets the panel's title.¢ctagjparam:textdtextx3Sets the panel's title. 
 Text to set as the title.¢ctagqparam:onlyIfEmptydtextxjSets the panel's title. 
 Text to set as the title. If true, the title will only be set if no title is setdkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamedtextddeclqconst char[] text£dtypedbooldnamekonlyIfEmptyddeclpbool onlyIfEmptyˇødnamehDrawItemhdocStartfdocEnd –ddocs¢ebriefxQDraws an item on a panel.  If the item takes up a slot, the position is returned.dtagsÑ¢ctag`dtextxQDraws an item on a panel.  If the item takes up a slot, the position is returned.¢ctagjparam:textdtextxœDraws an item on a panel.  If the item takes up a slot, the position is returned. 
 Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed.¢ctagkparam:styledtextxÂDraws an item on a panel.  If the item takes up a slot, the position is returned. 
 Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed. ITEMDRAW style flags.¢ctagfreturndtexty'Draws an item on a panel.  If the item takes up a slot, the position is returned. 
 Display text to use.  If not a raw line, the style may automatically add color markup. No numbering or newlines are needed. ITEMDRAW style flags. A slot position, or 0 if item was a rawline or could not be drawndkindˆjreturnTypecintiargumentsÇ£dtypelconst char[]dnamedtextddeclqconst char[] text£dtypecintdnameestyleddecliint styleˇødnamehDrawTexthdocStart!"fdocEnd!¸ddocs¢ebriefxMDraws a raw line of text on a panel, without any markup other than a newline.dtagsÉ¢ctag`dtextxMDraws a raw line of text on a panel, without any markup other than a newline.¢ctagjparam:textdtextxdDraws a raw line of text on a panel, without any markup other than a newline. 
 Display text to use.¢ctagfreturndtextxöDraws a raw line of text on a panel, without any markup other than a newline. 
 Display text to use. True on success, false if raw lines are not supporteddkindˆjreturnTypedbooliargumentsÅ£dtypelconst char[]dnamedtextddeclqconst char[] textˇødnamelCanDrawFlagshdocStart"3fdocEnd#ddocs¢ebriefxOReturns whether or not the given drawing flags are supported by the menu style.dtagsÉ¢ctag`dtextxOReturns whether or not the given drawing flags are supported by the menu style.¢ctagkparam:styledtextxgReturns whether or not the given drawing flags are supported by the menu style. 
 ITEMDRAW style flags.¢ctagfreturndtextxëReturns whether or not the given drawing flags are supported by the menu style. 
 ITEMDRAW style flags. True if item is drawable, false otherwisedkindˆjreturnTypedbooliargumentsÅ£dtypecintdnameestyleddecliint styleˇødnamegSetKeyshdocStart#7fdocEnd$¡ddocs¢ebriefxqSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing).dtagsÉ¢ctag`dtextxqSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing).¢ctagjparam:keysdtextxÛSets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing). 
 An integer where each bit N allows key N+1 to be selected.  If no keys are selectable, then key 0 (bit 9) is automatically set.¢ctagfreturndtextySets the selectable key map of a panel.  This is not supported by all styles (only by Radio, as of this writing). 
 An integer where each bit N allows key N+1 to be selected.  If no keys are selectable, then key 0 (bit 9) is automatically set. True if supported, false otherwisedkindˆjreturnTypedbooliargumentsÅ£dtypecintdnamedkeysddeclhint keysˇødnamedSendhdocStart$ÓfdocEnd'Uddocs¢ebriefyUSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called.dtagsÖ¢ctag`dtextyUSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called.¢ctaglparam:clientdtextylSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A client to draw to.¢ctagmparam:handlerdtextyúSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A client to draw to. The MenuHandler function to catch actions with.¢ctagjparam:timedtexty∑Sends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A client to draw to. The MenuHandler function to catch actions with. Time to hold the menu for.¢ctagfreturndtextyŸSends a panel to a client.  Unlike full menus, the handler function will only receive the following actions, both of which will have null for a menu, and the client as param1. 
 MenuAction_Select (param2 will be the key pressed) MenuAction_Cancel (param2 will be the reason) 
 Also, if the menu fails to display, no callbacks will be called. 
 A client to draw to. The MenuHandler function to catch actions with. Time to hold the menu for. True on success, false on failuredkindˆjreturnTypedbooliargumentsÉ£dtypecintdnamefclientddecljint client£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handler£dtypecintdnamedtimeddeclhint timeˇjpropertiesÉødnamemTextRemaininghdocStart'†fdocEnd(ëddocs¢ebriefx€Returns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning)dtagsÅ¢ctag`dtextx€Returns the amount of text the menu can still hold.  If this is limit is reached or overflowed, the text is silently truncated. 
 Radio menus: Currently 511 characters (512 bytes). Valve menus: Currently -1 (no meaning)dtypecintfgetterıfsetterÙˇødnamejCurrentKeyhdocStart(—fdocEnd)<ddocs¢ebriefxbReturns or sets the current key position, starting at 1. This cannot be used to traverse backwardsdtagsÅ¢ctag`dtextxbReturns or sets the current key position, starting at 1. This cannot be used to traverse backwardsdtypecintfgetterıfsetterıˇødnameeStylehdocStart)òfdocEnd)‰ddocs¢ebriefxHReturns the panel's style. Style handles are global and cannot be closeddtagsÅ¢ctag`dtextxHReturns the panel's style. Style handles are global and cannot be closeddtypefHandlefgetterıfsetterÙˇˇødnamedMenuhdocStart*"fdocEnd*Zddocs¢ebriefx4A menu is a helper object for managing in-game menusdtagsÅ¢ctag`dtextx4A menu is a helper object for managing in-game menusgmethodséødnamedMenuhdocStart*yfdocEnd,ddocs¢ebriefx2Creates a new, empty menu using the default style.dtagsÉ¢ctag`dtextx2Creates a new, empty menu using the default style.¢ctagmparam:handlerdtextx^Creates a new, empty menu using the default style. 
 Function which will receive menu actions.¢ctagmparam:actionsdtextyCreates a new, empty menu using the default style. 
 Function which will receive menu actions. Optionally set which actions to receive.  Select, Cancel, and End will always be received regardless of whether they are set or not.  They are also the only default actionsdkindˆjreturnTypedMenuiargumentsÇ£dtypekMenuHandlerdnameghandlerddeclsMenuHandler handler£dtypejMenuActiondnamegactionsddeclrMenuAction actionsˇødnamegDisplayhdocStart,ffdocEnd-addocs¢ebriefxDisplays a menu to a client.dtagsÖ¢ctag`dtextxDisplays a menu to a client.¢ctaglparam:clientdtextx,Displays a menu to a client. 
 Client index.¢ctagjparam:timedtextxVDisplays a menu to a client. 
 Client index. Maximum time to leave menu on the screen.¢ctagfreturndtextxyDisplays a menu to a client. 
 Client index. Maximum time to leave menu on the screen. True on success, false on failure.¢ctageerrordtextxåDisplays a menu to a client. 
 Client index. Maximum time to leave menu on the screen. True on success, false on failure. Client not in gamedkindˆjreturnTypedbooliargumentsÇ£dtypecintdnamefclientddecljint client£dtypecintdnamedtimeddeclhint timeˇødnameiDisplayAthdocStart-öfdocEnd.ıddocs¢ebriefx:Displays a menu to a client, starting from the given item.dtagsÜ¢ctag`dtextx:Displays a menu to a client, starting from the given item.¢ctaglparam:clientdtextxJDisplays a menu to a client, starting from the given item. 
 Client index.¢ctagpparam:first_itemdtextxlDisplays a menu to a client, starting from the given item. 
 Client index. First item to begin drawing from.¢ctagjparam:timedtextxñDisplays a menu to a client, starting from the given item. 
 Client index. First item to begin drawing from. Maximum time to leave menu on the screen.¢ctagfreturndtextxπDisplays a menu to a client, starting from the given item. 
 Client index. First item to begin drawing from. Maximum time to leave menu on the screen. True on success, false on failure.¢ctageerrordtextxÕDisplays a menu to a client, starting from the given item. 
 Client index. First item to begin drawing from. Maximum time to leave menu on the screen. True on success, false on failure. Client not in game.dkindˆjreturnTypedbooliargumentsÉ£dtypecintdnamefclientddecljint client£dtypecintdnamejfirst_itemddeclnint first_item£dtypecintdnamedtimeddeclhint timeˇødnamegAddItemhdocStart/@fdocEnd0„ddocs¢ebriefx(Appends a new item to the end of a menu.dtagsÜ¢ctag`dtextx(Appends a new item to the end of a menu.¢ctagjparam:infodtextxCAppends a new item to the end of a menu. 
 Item information string.¢ctagmparam:displaydtextx`Appends a new item to the end of a menu. 
 Item information string. Default item display string.¢ctagkparam:styledtextx Appends a new item to the end of a menu. 
 Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.¢ctagfreturndtextxÌAppends a new item to the end of a menu. 
 Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure.¢ctageerrordtexty Appends a new item to the end of a menu. 
 Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure. Item limit reacheddkindˆjreturnTypedbooliargumentsÉ£dtypelconst char[]dnamedinfoddeclqconst char[] info£dtypelconst char[]dnamegdisplayddecltconst char[] display£dtypecintdnameestyleddecliint styleˇødnamejInsertItemhdocStart1KfdocEnd3âddocs¢ebriefxÜInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward.dtagsá¢ctag`dtextxÜInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward.¢ctagnparam:positiondtextx£Inserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0.¢ctagjparam:infodtextxºInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0. Item information string.¢ctagmparam:displaydtextxŸInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0. Item information string. Default item display string.¢ctagkparam:styledtextyCInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating.¢ctagfreturndtextyfInserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure.¢ctageerrordtexty|Inserts an item into the menu before a certain position; the new item will be at the given position and all next items pushed forward. 
 Position, starting from 0. Item information string. Default item display string. Drawing style flags.  Anything other than DEFAULT or DISABLED will be completely ignored when paginating. True on success, false on failure. Invalid menu positiondkindˆjreturnTypedbooliargumentsÑ£dtypecintdnamehpositionddecllint position£dtypelconst char[]dnamedinfoddeclqconst char[] info£dtypelconst char[]dnamegdisplayddecltconst char[] display£dtypecintdnameestyleddecliint styleˇødnamejRemoveItemhdocStart4"fdocEnd4Îddocs¢ebriefxRemoves an item from the menu.dtagsÑ¢ctag`dtextxRemoves an item from the menu.¢ctagnparam:positiondtextx;Removes an item from the menu. 
 Position, starting from 0.¢ctagfreturndtextx^Removes an item from the menu. 
 Position, starting from 0. True on success, false on failure.¢ctageerrordtextxtRemoves an item from the menu. 
 Position, starting from 0. True on success, false on failure. Invalid menu positiondkindˆjreturnTypedbooliargumentsÅ£dtypecintdnamehpositionddecllint positionˇødnamenRemoveAllItemshdocStart5fdocEnd5@ddocs¢ebriefxRemoves all items from a menudtagsÅ¢ctag`dtextxRemoves all items from a menudkindˆjreturnTypedvoidiargumentsÄˇødnamegGetItemhdocStart5lfdocEnd70ddocs¢ebriefx(Retrieves information about a menu item.dtagsà¢ctag`dtextx(Retrieves information about a menu item.¢ctagnparam:positiondtextxERetrieves information about a menu item. 
 Position, starting from 0.¢ctagmparam:infoBufdtextxRRetrieves information about a menu item. 
 Position, starting from 0. Info buffer.¢ctagpparam:infoBufLendtextxuRetrieves information about a menu item. 
 Position, starting from 0. Info buffer. Maximum length of the info buffer.¢ctagkparam:styledtextx£Retrieves information about a menu item. 
 Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags.¢ctagmparam:dispBufdtextx≥Retrieves information about a menu item. 
 Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer.¢ctagpparam:dispBufLendtextxŸRetrieves information about a menu item. 
 Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer. Maximum length of the display buffer.¢ctagfreturndtextyRetrieves information about a menu item. 
 Position, starting from 0. Info buffer. Maximum length of the info buffer. By-reference variable to store drawing flags. Display buffer. Maximum length of the display buffer. True on success, false if position is invaliddkindˆjreturnTypedbooliargumentsÜ£dtypecintdnamehpositionddecllint position£dtypefchar[]dnameginfoBufddeclnchar[] infoBuf£dtypecintdnamejinfoBufLenddeclnint infoBufLen£dtypedint&dnameestyleddecljint& style£dtypefchar[]dnamegdispBufddeclnchar[] dispBuf£dtypecintdnamejdispBufLenddeclnint dispBufLenˇødnamehSetTitlehdocStart7øfdocEnd8]ddocs¢ebriefx2Sets the menu's default title/instruction message.dtagsÉ¢ctag`dtextx2Sets the menu's default title/instruction message.¢ctagiparam:fmtdtextxJSets the menu's default title/instruction message. 
 Message string format¢ctagiparam:...dtextxcSets the menu's default title/instruction message. 
 Message string format Message string argumentsdkindˆjreturnTypedvoidiargumentsÇ£dtypelconst char[]dnamecfmtddeclpconst char[] fmt£dtypefany...dnamec...ddecljany... ...ˇødnamehGetTitlehdocStart8úfdocEnd9cddocs¢ebriefx#Returns the text of a menu's title.dtagsÑ¢ctag`dtextx#Returns the text of a menu's title.¢ctaglparam:bufferdtextx<Returns the text of a menu's title. 
 Buffer to store title.¢ctagoparam:maxlengthdtextxZReturns the text of a menu's title. 
 Buffer to store title. Maximum length of the buffer.¢ctagfreturndtextxrReturns the text of a menu's title. 
 Buffer to store title. Maximum length of the buffer. Number of bytes writtendkindˆjreturnTypedvoidiargumentsÇ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlengthˇødnamegToPanelhdocStart9•fdocEnd:Dddocs¢ebriefx`Creates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle().dtagsÇ¢ctag`dtextx`Creates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle().¢ctagfreturndtextxyCreates a raw MenuPanel based off the menu's style. The Handle must be freed with CloseHandle(). 
 A new MenuPanel HandledkindˆjreturnTypeePaneliargumentsÄˇødnamefCancelhdocStart:jfdocEnd;÷ddocs¢ebriefyICancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelleddtagsÅ¢ctag`dtextyICancels a menu from displaying on all clients.  While the cancellation is in progress, this menu cannot be re-displayed to any clients. 
 The menu may still exist on the client's screen after this command. This simply verifies that the menu is not being used anywhere. 
 If any vote is in progress on a menu, it will be cancelleddkindˆjreturnTypedvoidiargumentsÄˇødnamekDisplayVotehdocStart;˙fdocEnd>‡ddocs¢ebriefy#Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled.dtagsá¢ctag`dtexty#Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled.¢ctagmparam:clientsdtextyGBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to.¢ctagpparam:numClientsdtextygBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to. Number of clients in the array.¢ctagjparam:timedtextyëBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen.¢ctagkparam:flagsdtexty®Broadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags.¢ctagfreturndtextyÙBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress.¢ctageerrordtextyBroadcasts a menu to a list of clients.  The most selected item will be returned through MenuAction_End.  On a tie, a random item will be returned from a list of the tied items. 
 Note that MenuAction_VoteEnd and MenuAction_VoteStart are both default callbacks and do not need to be enabled. 
 Array of clients to broadcast to. Number of clients in the array. Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progress. A vote is already in progressdkindˆjreturnTypedbooliargumentsÑ£dtypeeint[]dnamegclientsddeclmint[] clients£dtypecintdnamejnumClientsddeclnint numClients£dtypecintdnamedtimeddeclhint time£dtypecintdnameeflagsddecliint flagsˇødnamepDisplayVoteToAllhdocStart?=fdocEnd@Åddocs¢ebriefxGSends a vote menu to all clients.  See VoteMenu() for more information.dtagsÑ¢ctag`dtextxGSends a vote menu to all clients.  See VoteMenu() for more information.¢ctagjparam:timedtextxsSends a vote menu to all clients.  See VoteMenu() for more information. 
 Maximum time to leave menu on the screen.¢ctagkparam:flagsdtextxäSends a vote menu to all clients.  See VoteMenu() for more information. 
 Maximum time to leave menu on the screen. Optional voting flags.¢ctagfreturndtextx’Sends a vote menu to all clients.  See VoteMenu() for more information. 
 Maximum time to leave menu on the screen. Optional voting flags. True on success, false if this menu already has a vote session in progressdkindˆjreturnTypedbooliargumentsÇ£dtypecintdnamedtimeddeclhint time£dtypecintdnameeflagsddecliint flagsˇjpropertiesâødnamejPaginationhdocStartA…fdocEndBâddocs¢ebriefxØGet or set the menu's pagination. 
 If pagination is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed. It can be re-applied if desireddtagsÅ¢ctag`dtextxØGet or set the menu's pagination. 
 If pagination is MENU_NO_PAGINATION, and the exit button flag is set, then the exit button flag is removed. It can be re-applied if desireddtypecintfgetterıfsetterıˇødnamekOptionFlagshdocStartBÁfdocEndC`ddocs¢ebriefxmGet or set the menu's option flags. 
 If a certain bit is not supported, it will be stripped before being setdtagsÅ¢ctag`dtextxmGet or set the menu's option flags. 
 If a certain bit is not supported, it will be stripped before being setdtypecintfgetterıfsetterıˇødnamejExitButtonhdocStartCøfdocEndD!ddocs¢ebriefxYReturns whether or not the menu has an exit button. By default, menus have an exit buttondtagsÅ¢ctag`dtextxYReturns whether or not the menu has an exit button. By default, menus have an exit buttondtypedboolfgetterıfsetterıˇødnamenExitBackButtonhdocStartDÅfdocEndEÜddocs¢ebriefxÔControls whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBackdtagsÅ¢ctag`dtextxÔControls whether or not the menu has an "exit back" button. By default, menus do not have an exit back button. 
 Exit Back buttons appear as "Back" on page 1 of paginated menus and have functionality defined by the user in MenuEnd_ExitBackdtypedboolfgetterıfsetterıˇødnamelNoVoteButtonhdocStartEÍfdocEndF`ddocs¢ebriefxmSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote buttondtagsÅ¢ctag`dtextxmSets whether or not the menu has a "no vote" button in slot 1. By default, menus do not have a no vote buttondtypedboolfgetterÙfsetterıˇødnamerVoteResultCallbackhdocStartF™fdocEndGddocs¢ebriefxgSets an advanced vote handling callback. If this callback is set, MenuAction_VoteEnd will not be calleddtagsÅ¢ctag`dtextxgSets an advanced vote handling callback. If this callback is set, MenuAction_VoteEnd will not be calleddtypekVoteHandlerfgetterÙfsetterıˇødnameiItemCounthdocStartGzfdocEndG£ddocs¢ebriefx%Returns the number of items in a menudtagsÅ¢ctag`dtextx%Returns the number of items in a menudtypecintfgetterıfsetterÙˇødnameeStylehdocStartGﬂfdocEndH$ddocs¢ebriefxAReturns the menu style. The Handle is global and cannot be closeddtagsÅ¢ctag`dtextxAReturns the menu style. The Handle is global and cannot be closeddtypefHandlefgetterıfsetterÙˇødnameiSelectionhdocStartH_fdocEndH‰ddocs¢ebriefxyReturns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callbackdtagsÅ¢ctag`dtextxyReturns the first item on the page of a currently selected menu. 
 This is only valid inside a MenuAction_Select callbackdtypecintfgetterıfsetterÙˇˇiconstantséødnamewMenuCancel_DisconnectedhdocStartefdocEndãddocs¢ebriefxClient dropped from the serverdtagsÅ¢ctag`dtextxClient dropped from the serverˇødnamevMenuCancel_InterruptedhdocStartÆfdocEndﬁddocs¢ebriefx(Client was interrupted with another menudtagsÅ¢ctag`dtextx(Client was interrupted with another menuˇødnameoMenuCancel_ExithdocStartfdocEnd!ddocs¢ebriefxClient exited via "exit"dtagsÅ¢ctag`dtextxClient exited via "exit"ˇødnametMenuCancel_NoDisplayhdocStartDfdocEnduddocs¢ebriefx)Menu could not be displayed to the clientdtagsÅ¢ctag`dtextx)Menu could not be displayed to the clientˇødnamerMenuCancel_TimeouthdocStartòfdocEndÆddocs¢ebriefnMenu timed outdtagsÅ¢ctag`dtextnMenu timed outˇødnamesMenuCancel_ExitBackhdocStart—fdocEndddocs¢ebriefx/Client selected "exit back" on a paginated menudtagsÅ¢ctag`dtextx/Client selected "exit back" on a paginated menuˇødnamerVoteCancel_GenerichdocStartÅfdocEnd®ddocs¢ebriefxVote was generically cancelled.dtagsÅ¢ctag`dtextxVote was generically cancelled.ˇødnamerVoteCancel_NoVoteshdocStartÀfdocEndÚddocs¢ebriefxVote did not receive any votes.dtagsÅ¢ctag`dtextxVote did not receive any votes.ˇødnamepMenuEnd_SelectedhdocStartYfdocEndwddocs¢ebriefvMenu item was selecteddtagsÅ¢ctag`dtextvMenu item was selectedˇødnamerMenuEnd_VotingDonehdocStartöfdocEnd±ddocs¢ebriefoVoting finisheddtagsÅ¢ctag`dtextoVoting finishedˇødnamewMenuEnd_VotingCancelledhdocStart‘fdocEndddocs¢ebrieftVoting was cancelleddtagsÅ¢ctag`dtexttVoting was cancelledˇødnameqMenuEnd_CancelledhdocStartfdocEnd@ddocs¢ebriefx%Menu was cancelled (reason in param2)dtagsÅ¢ctag`dtextx%Menu was cancelled (reason in param2)ˇødnamelMenuEnd_ExithdocStartcfdocEndçddocs¢ebriefx"Menu was cleanly exited via "exit"dtagsÅ¢ctag`dtextx"Menu was cleanly exited via "exit"ˇødnamepMenuEnd_ExitBackhdocStart∞fdocEnd⁄ddocs¢ebriefx"Menu was cleanly exited via "back"dtagsÅ¢ctag`dtextx"Menu was cleanly exited via "back"ˇeenumsÉødnameiMenuStylehdocStartsfdocEnd§ddocs¢ebriefx$Low-level drawing style of the menu.dtagsÅ¢ctag`dtextx$Low-level drawing style of the menu.gentriesÉødnameqMenuStyle_DefaulthdocStart÷fdocEndddocsˆˇødnameoMenuStyle_ValvehdocStart!fdocEndVddocsˆˇødnameoMenuStyle_RadiohdocStartufdocEnd©ddocsˆˇˇødnamejMenuActionhdocStart±fdocEndÏddocs¢ebriefx.Different actions for the menu "pump" callbackdtagsÅ¢ctag`dtextx.Different actions for the menu "pump" callbackgentriesäødnamepMenuAction_StarthdocStart#fdocEndSddocsˆˇødnamerMenuAction_DisplayhdocStartvfdocEnd∆ddocsˆˇødnameqMenuAction_SelecthdocStartÈfdocEnd	"ddocsˆˇødnameqMenuAction_CancelhdocStart	EfdocEnd	ÇddocsˆˇødnamenMenuAction_EndhdocStart fdocEnd ddocsˆˇødnamerMenuAction_VoteEndhdocStart	•fdocEnd
öddocsˆˇødnametMenuAction_VoteStarthdocStart
ΩfdocEnduddocsˆˇødnameuMenuAction_VoteCancelhdocStart¸fdocEndCddocsˆˇødnamesMenuAction_DrawItemhdocStartffdocEnd∑ddocsˆˇødnamevMenuAction_DisplayItemhdocStart fdocEnd ddocsˆˇˇødnamejMenuSourcehdocStart‚fdocEndddocs¢ebriefxDescribes a menu's sourcedtagsÅ¢ctag`dtextxDescribes a menu's sourcegentriesÑødnameoMenuSource_NonehdocStart?fdocEndaddocsˆˇødnamesMenuSource_ExternalhdocStartÑfdocEndôddocsˆˇødnameqMenuSource_NormalhdocStartºfdocEnd„ddocsˆˇødnamesMenuSource_RawPanelhdocStartfdocEnd?ddocsˆˇˇhtypesetsÅødnamekVoteHandlerhdocStartyófdocEnd{äddocs¢ebriefx=Callback for when a vote has ended and results are available.dtagsá¢ctag`dtextx=Callback for when a vote has ended and results are available.¢ctagjparam:menudtextxXCallback for when a vote has ended and results are available. 
 The menu being voted on.¢ctagoparam:num_votesdtextxzCallback for when a vote has ended and results are available. 
 The menu being voted on. Number of votes tallied in total.¢ctagqparam:num_clientsdtextxúCallback for when a vote has ended and results are available. 
 The menu being voted on. Number of votes tallied in total. Number of clients who could vote.¢ctagqparam:client_infodtextxÕCallback for when a vote has ended and results are available. 
 The menu being voted on. Number of votes tallied in total. Number of clients who could vote. Array of clients.  Use VOTEINFO_CLIENT_ defines.¢ctagoparam:num_itemsdtextx¯Callback for when a vote has ended and results are available. 
 The menu being voted on. Number of votes tallied in total. Number of clients who could vote. Array of clients.  Use VOTEINFO_CLIENT_ defines. Number of unique items that were selected.¢ctagoparam:item_infodtexty5Callback for when a vote has ended and results are available. 
 The menu being voted on. Number of votes tallied in total. Number of clients who could vote. Array of clients.  Use VOTEINFO_CLIENT_ defines. Number of unique items that were selected. Array of items, sorted by count.  Use VOTEINFO_ITEM defines.etypesÇødtypex}function void(Menu menu, int num_votes, int num_clients, const int client_info[][2], int num_items, const int item_info[][2])hdocStart{•fdocEnd{±ddocs¢ebriefhold styldtagsÅ¢ctag`dtexthold stylˇødtypex{function void(Menu menu, int num_votes, int num_clients, const int[][] client_info, int num_items, const int[][] item_info)hdocStart|MfdocEnd|Yddocs¢ebriefhnew styldtagsÅ¢ctag`dtexthnew stylˇˇhtypedefsÅødnamekMenuHandlerhdocStartGfdocEndddocs¢ebriefx'Called when a menu action is completed.dtagsÖ¢ctag`dtextx'Called when a menu action is completed.¢ctagjparam:menudtextxDCalled when a menu action is completed. 
 The menu being acted upon.¢ctaglparam:actiondtextx\Called when a menu action is completed. 
 The menu being acted upon. The action of the menu.¢ctaglparam:param1dtextxâCalled when a menu action is completed. 
 The menu being acted upon. The action of the menu. First action parameter (usually the client).¢ctaglparam:param2dtextxµCalled when a menu action is completed. 
 The menu being acted upon. The action of the menu. First action parameter (usually the client). Second action parameter (usually the item).dtypexBfunction int(Menu menu, MenuAction action, int param1, int param2)ˇ