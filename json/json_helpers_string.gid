{"functions":[{"name":"json_escape_string","docStart":1963,"docEnd":2101,"docs":{"brief":"Escapes a string in-place in a buffer.","tags":[{"tag":"","text":"Escapes a string in-place in a buffer."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},{"name":"json_unescape_string","docStart":2377,"docEnd":2517,"docs":{"brief":"Unescapes a string in-place in a buffer.","tags":[{"tag":"","text":"Unescapes a string in-place in a buffer."},{"tag":"param:buffer","text":"String buffer."},{"tag":"param:max_size","text":"Maximum size of string buffer."}]},"kind":"stock","returnType":"void","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer","default":null},{"type":"int","name":"max_size","decl":"int max_size","default":null}]},{"name":"json_string_startswith","docStart":2795,"docEnd":3104,"docs":{"brief":"Checks if a string starts with another string.","tags":[{"tag":"","text":"Checks if a string starts with another string."},{"tag":"param:haystack","text":"String to check that starts with needle."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack starts with."},{"tag":"returns","text":"True if haystack begins with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]},{"name":"json_string_endswith","docStart":3490,"docEnd":3791,"docs":{"brief":"Checks if a string ends with another string.","tags":[{"tag":"","text":"Checks if a string ends with another string."},{"tag":"param:haystack","text":"String to check that ends with needle."},{"tag":"param:max_size","text":"Maximum size of string buffer."},{"tag":"param:needle","text":"String to check that haystack ends with."},{"tag":"returns","text":"True if haystack ends with needle, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"const char[]","name":"haystack","decl":"const char[] haystack","default":null},{"type":"const char[]","name":"needle","decl":"const char[] needle","default":null}]}],"methodmaps":[],"constants":[],"enums":[],"typesets":[],"typedefs":[]}