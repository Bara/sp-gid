¶ifunctionsäødnamekCreateStackhdocStart˚fdocEndÊddocs¢ebriefyÕCreates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation.dtagsÉ¢ctag`dtextyÕCreates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation.¢ctagoparam:blocksizedtexty?Creates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation. 
 The number of cells each entry in the stack can hold.  For example, 32 cells is equivalent to: new Array[X][32]¢ctagfreturndtextyQCreates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation. 
 The number of cells each entry in the stack can hold.  For example, 32 cells is equivalent to: new Array[X][32] New stack Handle.dkindfnativejreturnTypejArrayStackiargumentsÅ£dtypecintdnameiblocksizeddeclmint blocksizeˇødnamemPushStackCellhdocStartfdocEndHddocs¢ebriefxâPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1.dtagsÑ¢ctag`dtextxâPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1.¢ctagkparam:stackdtextxôPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1. 
 Stack Handle.¢ctagkparam:valuedtextx®Pushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1. 
 Stack Handle. Value to push.¢ctageerrordtextx…Pushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1. 
 Stack Handle. Value to push. Invalid Handle or out of memory.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednameestackddecllHandle stack£dtypecanydnameevalueddecliany valueˇødnameoPushStackStringhdocStartÅfdocEndsddocs¢ebriefxRPushes a copy of a string onto the end of a stack, truncating it if it is too big.dtagsÑ¢ctag`dtextxRPushes a copy of a string onto the end of a stack, truncating it if it is too big.¢ctagkparam:stackdtextxbPushes a copy of a string onto the end of a stack, truncating it if it is too big. 
 Stack Handle.¢ctagkparam:valuedtextxrPushes a copy of a string onto the end of a stack, truncating it if it is too big. 
 Stack Handle. String to push.¢ctageerrordtextxìPushes a copy of a string onto the end of a stack, truncating it if it is too big. 
 Stack Handle. String to push. Invalid Handle or out of memory.dkindfnativejreturnTypedvoidiargumentsÇ£dtypefHandlednameestackddecllHandle stack£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnamenPushStackArrayhdocStart∑fdocEndddocs¢ebriefxπPushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.dtagsÖ¢ctag`dtextxπPushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.¢ctagkparam:stackdtextx…Pushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle.¢ctaglparam:valuesdtextx‚Pushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle. Block of values to copy.¢ctagjparam:sizedtextyPushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle. Block of values to copy. If not set, the number of elements copied from the array will be equal to the blocksize.  If set higher than the blocksize, the operation will be truncated.¢ctageerrordtexty†Pushes a copy of an array of cells onto the end of a stack.  The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle. Block of values to copy. If not set, the number of elements copied from the array will be equal to the blocksize.  If set higher than the blocksize, the operation will be truncated. Invalid Handle or out of memory.dkindfnativejreturnTypedvoidiargumentsÉ£dtypefHandlednameestackddecllHandle stack£dtypekconst any[]dnamefvaluesddeclrconst any[] values£dtypecintdnamedsizeddeclhint sizeˇødnamelPopStackCellhdocStartUfdocEndddocs¢ebriefxPops a cell value from a stack.dtagsá¢ctag`dtextxPops a cell value from a stack.¢ctagkparam:stackdtextx/Pops a cell value from a stack. 
 Stack Handle.¢ctagkparam:valuedtextxLPops a cell value from a stack. 
 Stack Handle. Variable to store the value.¢ctagkparam:blockdtextxóPops a cell value from a stack. 
 Stack Handle. Variable to store the value. Optionally specify which block to read from (useful if the blocksize > 0).¢ctaglparam:asChardtextxƒPops a cell value from a stack. 
 Stack Handle. Variable to store the value. Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell.¢ctagfreturndtextxÚPops a cell value from a stack. 
 Stack Handle. Variable to store the value. Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell. True on success, false if the stack is empty.¢ctageerrordtextyPops a cell value from a stack. 
 Stack Handle. Variable to store the value. Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell. True on success, false if the stack is empty. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednameestackddecllHandle stack£dtypedany&dnameevalueddecljany& value£dtypecintdnameeblockddecliint block£dtypedbooldnamefasCharddeclkbool asCharˇødnamenPopStackStringhdocStartnfdocEndùddocs¢ebriefx!Pops a string value from a stack.dtagsÜ¢ctag`dtextx!Pops a string value from a stack.¢ctagkparam:stackdtextx1Pops a string value from a stack. 
 Stack Handle.¢ctaglparam:bufferdtextxIPops a string value from a stack. 
 Stack Handle. Buffer to store string.¢ctagoparam:maxlengthdtextxePops a string value from a stack. 
 Stack Handle. Buffer to store string. Maximum size of the buffer.¢ctagfreturndtextxìPops a string value from a stack. 
 Stack Handle. Buffer to store string. Maximum size of the buffer. True on success, false if the stack is empty.¢ctageerrordtextx£Pops a string value from a stack. 
 Stack Handle. Buffer to store string. Maximum size of the buffer. True on success, false if the stack is empty. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÑ£dtypefHandlednameestackddecllHandle stack£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypedint&dnamegwrittenddecllint& writtenˇødnamemPopStackArrayhdocStart˙fdocEnd ìddocs¢ebriefx$Pops an array of cells from a stack.dtagsÜ¢ctag`dtextx$Pops an array of cells from a stack.¢ctagkparam:stackdtextx4Pops an array of cells from a stack. 
 Stack Handle.¢ctaglparam:bufferdtextxRPops an array of cells from a stack. 
 Stack Handle. Buffer to store the array in.¢ctagjparam:sizedtextx∂Pops an array of cells from a stack. 
 Stack Handle. Buffer to store the array in. If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used.¢ctagfreturndtextx‰Pops an array of cells from a stack. 
 Stack Handle. Buffer to store the array in. If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used. True on success, false if the stack is empty.¢ctageerrordtextxÙPops an array of cells from a stack. 
 Stack Handle. Buffer to store the array in. If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used. True on success, false if the stack is empty. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÉ£dtypefHandlednameestackddecllHandle stack£dtypeeany[]dnamefbufferddecllany[] buffer£dtypecintdnamedsizeddeclhint sizeˇødnamelIsStackEmptyhdocStart ‹fdocEnd!îddocs¢ebriefxChecks if a stack is empty.dtagsÑ¢ctag`dtextxChecks if a stack is empty.¢ctagkparam:stackdtextx+Checks if a stack is empty. 
 Stack Handle.¢ctagfreturndtextxNChecks if a stack is empty. 
 Stack Handle. True if empty, false if not empty.¢ctageerrordtextx^Checks if a stack is empty. 
 Stack Handle. True if empty, false if not empty. Invalid Handle.dkindfnativejreturnTypedbooliargumentsÅ£dtypefHandlednameestackddecllHandle stackˇødnamehPopStackhdocStart!¡fdocEnd"õddocs¢ebriefx1Pops a value off a stack, ignoring it completely.dtagsÑ¢ctag`dtextx1Pops a value off a stack, ignoring it completely.¢ctagkparam:stackdtextxAPops a value off a stack, ignoring it completely. 
 Stack Handle.¢ctagfreturndtextxpPops a value off a stack, ignoring it completely. 
 Stack Handle. True if something was popped, false otherwise.¢ctageerrordtextxÄPops a value off a stack, ignoring it completely. 
 Stack Handle. True if something was popped, false otherwise. Invalid Handle.dkindestockjreturnTypedbooliargumentsÅ£dtypefHandlednameestackddecllHandle stackˇødnameqGetStackBlockSizehdocStart"˙fdocEnd#¿ddocs¢ebriefx1Returns the blocksize the stack was created with.dtagsÑ¢ctag`dtextx1Returns the blocksize the stack was created with.¢ctagkparam:stackdtextxAReturns the blocksize the stack was created with. 
 Stack Handle.¢ctagfreturndtextx]Returns the blocksize the stack was created with. 
 Stack Handle. The blocksize of the stack.¢ctageerrordtextxlReturns the blocksize the stack was created with. 
 Stack Handle. The blocksize of the stack. Invalid HandledkindfnativejreturnTypecintiargumentsÅ£dtypefHandlednameestackddecllHandle stackˇjmethodmapsÅødnamejArrayStackhdocStart fdocEnd ddocsˆgmethodsáødnamejArrayStackhdocStart†fdocEnd	addocs¢ebriefyÕCreates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation.dtagsÇ¢ctag`dtextyÕCreates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation.¢ctagoparam:blocksizedtexty>Creates a stack structure.  A stack is a LIFO (last in, first out) vector (array) of items.  It has O(1) insertion and O(1) removal. 
 Stacks have two operations: Push (adding an item) and Pop (removes items in reverse-push order). 
 The contents of the stack are uniform; i.e. storing a string and then retrieving it as an integer is NOT the same as StringToInt()! 
 The "blocksize" determines how many cells each slot has; it cannot be changed after creation. 
 The number of cells each entry in the stack can hold.  For example, 32 cells is equivalent to: new Array[X][32dkindˆjreturnTypejArrayStackiargumentsÅ£dtypecintdnameiblocksizeddeclmint blocksizeˇødnamedPushhdocStart	ìfdocEnd
Yddocs¢ebriefxâPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1.dtagsÇ¢ctag`dtextxâPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1.¢ctagkparam:valuedtextxôPushes a value onto the end of the stack, adding a new index. 
 This may safely be used even if the stack has a blocksize greater than 1. 
 Value to pushdkindˆjreturnTypedvoidiargumentsÅ£dtypecanydnameevalueddecliany valueˇødnamejPushStringhdocStart
ÑfdocEndddocs¢ebriefxRPushes a copy of a string onto the end of a stack, truncating it if it is too big.dtagsÇ¢ctag`dtextxRPushes a copy of a string onto the end of a stack, truncating it if it is too big.¢ctagkparam:valuedtextxcPushes a copy of a string onto the end of a stack, truncating it if it is too big. 
 String to pushdkindˆjreturnTypedvoidiargumentsÅ£dtypelconst char[]dnameevalueddeclrconst char[] valueˇødnameiPushArrayhdocStartFfdocEndRddocs¢ebriefx∏Pushes a copy of an array of cells onto the end of a stack. The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.dtagsÑ¢ctag`dtextx∏Pushes a copy of an array of cells onto the end of a stack. The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually.¢ctagkparam:stackdtextx»Pushes a copy of an array of cells onto the end of a stack. The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle.¢ctaglparam:valuesdtextx·Pushes a copy of an array of cells onto the end of a stack. The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle. Block of values to copy.¢ctagjparam:sizedtexty}Pushes a copy of an array of cells onto the end of a stack. The cells are pushed as a block (i.e. the entire array takes up one stack slot), rather than pushing each cell individually. 
 Stack Handle. Block of values to copy. If not set, the number of elements copied from the array will be equal to the blocksize.  If set higher than the blocksize, the operation will be truncateddkindˆjreturnTypedvoidiargumentsÇ£dtypekconst any[]dnamefvaluesddeclrconst any[] values£dtypecintdnamedsizeddeclhint sizeˇødnamecPophdocStartòfdocEndÂddocs¢ebriefxPops a cell value from a stack.dtagsÖ¢ctag`dtextxPops a cell value from a stack.¢ctagkparam:blockdtextxlPops a cell value from a stack. 
 Optionally specify which block to read from (useful if the blocksize > 0).¢ctaglparam:asChardtextxôPops a cell value from a stack. 
 Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell.¢ctagfreturndtextx∂Pops a cell value from a stack. 
 Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell. Value popped from the stack.¢ctageerrordtextx…Pops a cell value from a stack. 
 Optionally specify which block to read from (useful if the blocksize > 0). Optionally read as a byte instead of a cell. Value popped from the stack. The stack is emptydkindˆjreturnTypecanyiargumentsÇ£dtypecintdnameeblockddecliint block£dtypedbooldnamefasCharddeclkbool asCharˇødnameiPopStringhdocStart#fdocEnd\ddocs¢ebriefx!Pops a string value from a stack.dtagsÖ¢ctag`dtextx!Pops a string value from a stack.¢ctaglparam:bufferdtextx;Pops a string value from a stack. 
 Buffer to store string.¢ctagoparam:maxlengthdtextxWPops a string value from a stack. 
 Buffer to store string. Maximum size of the buffer.¢ctagmparam:writtendtextx¢Pops a string value from a stack. 
 Buffer to store string. Maximum size of the buffer. Number of characters written to buffer, not including the null terminator.¢ctageerrordtextxµPops a string value from a stack. 
 Buffer to store string. Maximum size of the buffer. Number of characters written to buffer, not including the null terminator. The stack is emptydkindˆjreturnTypedvoidiargumentsÉ£dtypefchar[]dnamefbufferddeclmchar[] buffer£dtypecintdnameimaxlengthddeclmint maxlength£dtypedint&dnamegwrittenddecllint& writtenˇødnamehPopArrayhdocStart±fdocEnd◊ddocs¢ebriefx$Pops an array of cells from a stack.dtagsÑ¢ctag`dtextx$Pops an array of cells from a stack.¢ctaglparam:bufferdtextxDPops an array of cells from a stack. 
 Buffer to store the array in.¢ctagjparam:sizedtextx®Pops an array of cells from a stack. 
 Buffer to store the array in. If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used.¢ctageerrordtextxªPops an array of cells from a stack. 
 Buffer to store the array in. If not set, assumes the buffer size is equal to the blocksize.  Otherwise, the size passed is used. The stack is emptydkindˆjreturnTypedvoidiargumentsÇ£dtypeeany[]dnamefbufferddecllany[] buffer£dtypecintdnamedsizeddeclhint sizeˇjpropertiesÇødnameeEmptyhdocStartfdocEndMddocs¢ebriefx3Returns true if the stack is empty, false otherwisedtagsÅ¢ctag`dtextx3Returns true if the stack is empty, false otherwisedtypedboolfgetterıfsetterÙˇødnameiBlockSizehdocStartáfdocEndºddocs¢ebriefx1Retrieve the blocksize the stack was created withdtagsÅ¢ctag`dtextx1Retrieve the blocksize the stack was created withdtypecintfgetterıfsetterÙˇˇiconstantsÄeenumsÄhtypesetsÄhtypedefsÄ