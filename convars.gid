{"functions":[{"name":"CreateConVar","docStart":2638,"docEnd":3601,"docs":{"brief":"Creates a new console variable.","tags":[{"tag":"","text":"Creates a new console variable."},{"tag":"param:name","text":"Name of new convar."},{"tag":"param:defaultValue","text":"String containing the default value of new convar."},{"tag":"param:description","text":"Optional description of the convar."},{"tag":"param:flags","text":"Optional bitstring of flags determining how the convar should be handled. See FCVAR_* constants for more details."},{"tag":"param:hasMin","text":"Optional boolean that determines if the convar has a minimum value."},{"tag":"param:min","text":"Minimum floating point value that the convar can have if hasMin is true."},{"tag":"param:hasMax","text":"Optional boolean that determines if the convar has a maximum value."},{"tag":"param:max","text":"Maximum floating point value that the convar can have if hasMax is true."},{"tag":"return","text":"A handle to the newly created convar. If the convar already exists, a handle to it will still be returned."},{"tag":"error","text":"Convar name is blank or is the same as an existing console command."}]},"kind":"native","returnType":"ConVar","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"const char[]","name":"defaultValue","decl":"const char[] defaultValue"},{"type":"const char[]","name":"description","decl":"const char[] description"},{"type":"int","name":"flags","decl":"int flags"},{"type":"bool","name":"hasMin","decl":"bool hasMin"},{"type":"float","name":"min","decl":"float min"},{"type":"bool","name":"hasMax","decl":"bool hasMax"},{"type":"float","name":"max","decl":"float max"}]},{"name":"FindConVar","docStart":3794,"docEnd":3954,"docs":{"brief":"Searches for a console variable.","tags":[{"tag":"","text":"Searches for a console variable."},{"tag":"param:name","text":"Name of convar to find."},{"tag":"return","text":"A ConVar object if found; null otherwise."}]},"kind":"native","returnType":"ConVar","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"HookConVarChange","docStart":11022,"docEnd":11285,"docs":{"brief":"Creates a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Creates a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"Invalid or corrupt Handle or invalid callback function."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback"}]},{"name":"UnhookConVarChange","docStart":11356,"docEnd":11646,"docs":{"brief":"Removes a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Removes a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"Invalid or corrupt Handle, invalid callback function, or no active hook on convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback"}]},{"name":"GetConVarBool","docStart":11719,"docEnd":11935,"docs":{"brief":"Returns the boolean value of a console variable.","tags":[{"tag":"","text":"Returns the boolean value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The boolean value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"}]},{"name":"SetConVarBool","docStart":11979,"docEnd":12788,"docs":{"brief":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New boolean value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"bool","name":"value","decl":"bool value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetConVarInt","docStart":12885,"docEnd":13101,"docs":{"brief":"Returns the integer value of a console variable.","tags":[{"tag":"","text":"Returns the integer value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The integer value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"}]},{"name":"SetConVarInt","docStart":13143,"docEnd":13952,"docs":{"brief":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New integer value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"int","name":"value","decl":"int value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetConVarFloat","docStart":14047,"docEnd":14277,"docs":{"brief":"Returns the floating point value of a console variable.","tags":[{"tag":"","text":"Returns the floating point value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"The floating point value of the convar."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"float","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"}]},{"name":"SetConVarFloat","docStart":14323,"docEnd":15146,"docs":{"brief":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New floating point value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"float","name":"value","decl":"float value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetConVarString","docStart":15245,"docEnd":15532,"docs":{"brief":"Retrieves the string value of a console variable.","tags":[{"tag":"","text":"Retrieves the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SetConVarString","docStart":15607,"docEnd":16414,"docs":{"brief":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"New string value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"const char[]","name":"value","decl":"const char[] value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"ResetConVar","docStart":16521,"docEnd":17291,"docs":{"brief":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the original, Dark Messiah, and\nEpisode 1 engines. Newer engines automatically do these things when the convar value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetConVarDefault","docStart":17374,"docEnd":17748,"docs":{"brief":"Retrieves the default string value of a console variable.","tags":[{"tag":"","text":"Retrieves the default string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the default value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetConVarFlags","docStart":17823,"docEnd":18070,"docs":{"brief":"Returns the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Returns the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"return","text":"A bitstring containing the FCVAR_* flags that are enabled."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"int","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"}]},{"name":"SetConVarFlags","docStart":18114,"docEnd":18351,"docs":{"brief":"Sets the bitstring of flags on a console variable.","tags":[{"tag":"","text":"Sets the bitstring of flags on a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:flags","text":"A bitstring containing the FCVAR_* flags to enable."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"GetConVarBounds","docStart":18407,"docEnd":18843,"docs":{"brief":"Retrieves the specified bound of a console variable.","tags":[{"tag":"","text":"Retrieves the specified bound of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:type","text":"Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper."},{"tag":"param:value","text":"By-reference cell to store the specified floating point bound value."},{"tag":"return","text":"True if the convar has the specified bound set, false otherwise."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type"},{"type":"float&","name":"value","decl":"float& value"}]},{"name":"SetConVarBounds","docStart":18922,"docEnd":19347,"docs":{"brief":"Sets the specified bound of a console variable.","tags":[{"tag":"","text":"Sets the specified bound of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:type","text":"Type of bound to set, ConVarBound_Lower or ConVarBound_Upper"},{"tag":"param:set","text":"If set to true, convar will use specified bound. If false, bound will be removed."},{"tag":"param:value","text":"Floating point value to use as the specified bound."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type"},{"type":"bool","name":"set","decl":"bool set"},{"type":"float","name":"value","decl":"float value"}]},{"name":"GetConVarName","docStart":19439,"docEnd":19717,"docs":{"brief":"Retrieves the name of a console variable.","tags":[{"tag":"","text":"Retrieves the name of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:name","text":"Buffer to store the name of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"error","text":"Invalid or corrupt Handle."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SendConVarValue","docStart":19789,"docEnd":20158,"docs":{"brief":"Replicates a convar value to a specific client. This does not change the actual convar value.","tags":[{"tag":"","text":"Replicates a convar value to a specific client. This does not change the actual convar value."},{"tag":"param:client","text":"Client index"},{"tag":"param:convar","text":"ConVar handle"},{"tag":"param:value","text":"String value to send"},{"tag":"return","text":"True on success, false on failure"},{"tag":"error","text":"Invalid client index, client not in game, or client is fake"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"Handle","name":"convar","decl":"Handle convar"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"QueryClientConVar","docStart":21625,"docEnd":22120,"docs":{"brief":"Starts a query to retrieve the value of a client's console variable.","tags":[{"tag":"","text":"Starts a query to retrieve the value of a client's console variable."},{"tag":"param:client","text":"Player index."},{"tag":"param:cvarName","text":"Name of client convar to query."},{"tag":"param:callback","text":"A function to use as a callback when the query has finished."},{"tag":"param:value","text":"Optional value to pass to the callback function."},{"tag":"return","text":"A cookie that uniquely identifies the query.\nReturns QUERYCOOKIE_FAILED on failure, such as when used on a bot."}]},"kind":"native","returnType":"QueryCookie","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"cvarName","decl":"const char[] cvarName"},{"type":"ConVarQueryFinished","name":"callback","decl":"ConVarQueryFinished callback"},{"type":"any","name":"value","decl":"any value"}]},{"name":"IsValidConVarChar","docStart":22238,"docEnd":22431,"docs":{"brief":"Returns true if the supplied character is valid in a ConVar name.","tags":[{"tag":"","text":"Returns true if the supplied character is valid in a ConVar name."},{"tag":"param:c","text":"Character to validate."},{"tag":"return","text":"True is valid for ConVars, false otherwise"}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"c","decl":"int c"}]}],"methodmaps":[{"name":"ConVar","docStart":4001,"docEnd":4067,"docs":{"brief":"A ConVar is a configurable, named setting in the srcds console.","tags":[{"tag":"","text":"A ConVar is a configurable, named setting in the srcds console."}]},"methods":[{"name":"SetBool","docStart":4652,"docEnd":5346,"docs":{"brief":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the boolean value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New boolean value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"value","decl":"bool value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"SetInt","docStart":5431,"docEnd":6125,"docs":{"brief":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the integer value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New integer value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"int","name":"value","decl":"int value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"SetFloat","docStart":6208,"docEnd":6916,"docs":{"brief":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the floating point value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New floating point value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"float","name":"value","decl":"float value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetString","docStart":7003,"docEnd":7221,"docs":{"brief":"Retrieves the string value of a console variable.","tags":[{"tag":"","text":"Retrieves the string value of a console variable."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:value","text":"Buffer to store the value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SetString","docStart":7284,"docEnd":7982,"docs":{"brief":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Sets the string value of a console variable.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:value","text":"New string value."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"value","decl":"const char[] value"},{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"RestoreDefault","docStart":8077,"docEnd":8740,"docs":{"brief":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed.","tags":[{"tag":"","text":"Resets the console variable to its default value.\n\nNote: The replicate and notify params are only relevant for the\noriginal, Dark Messiah, and Episode 1 engines. Newer engines\nautomatically do these things when the convar value is changed."},{"tag":"param:replicate","text":"If set to true, the new convar value will be set on all clients.\nThis will only work if the convar has the FCVAR_REPLICATED flag\nand actually exists on clients."},{"tag":"param:notify","text":"If set to true, clients will be notified that the convar has changed.\nThis will only work if the convar has the FCVAR_NOTIFY flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"bool","name":"replicate","decl":"bool replicate"},{"type":"bool","name":"notify","decl":"bool notify"}]},{"name":"GetDefault","docStart":8820,"docEnd":9084,"docs":{"brief":"Retrieves the default string value of a console variable.","tags":[{"tag":"","text":"Retrieves the default string value of a console variable."},{"tag":"param:value","text":"Buffer to store the default value of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."},{"tag":"return","text":"Number of bytes written to the buffer (UTF-8 safe)."}]},"kind":"native","returnType":"int","arguments":[{"type":"char[]","name":"value","decl":"char[] value"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"GetBounds","docStart":9147,"docEnd":9473,"docs":{"brief":"Retrieves the specified bound of a console variable.","tags":[{"tag":"","text":"Retrieves the specified bound of a console variable."},{"tag":"param:type","text":"Type of bound to retrieve, ConVarBound_Lower or ConVarBound_Upper."},{"tag":"param:value","text":"By-reference cell to store the specified floating point bound value."},{"tag":"return","text":"True if the convar has the specified bound set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type"},{"type":"float&","name":"value","decl":"float& value"}]},{"name":"SetBounds","docStart":9540,"docEnd":9855,"docs":{"brief":"Sets the specified bound of a console variable.","tags":[{"tag":"","text":"Sets the specified bound of a console variable."},{"tag":"param:type","text":"Type of bound to set, ConVarBound_Lower or ConVarBound_Upper"},{"tag":"param:set","text":"If set to true, convar will use specified bound. If false, bound will be removed."},{"tag":"param:value","text":"Floating point value to use as the specified bound."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarBounds","name":"type","decl":"ConVarBounds type"},{"type":"bool","name":"set","decl":"bool set"},{"type":"float","name":"value","decl":"float value"}]},{"name":"GetName","docStart":9935,"docEnd":10100,"docs":{"brief":"Retrieves the name of a console variable.","tags":[{"tag":"","text":"Retrieves the name of a console variable."},{"tag":"param:name","text":"Buffer to store the name of the convar."},{"tag":"param:maxlength","text":"Maximum length of string buffer."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"ReplicateToClient","docStart":10160,"docEnd":10476,"docs":{"brief":"Replicates a convar value to a specific client. This does not change the actual convar value.","tags":[{"tag":"","text":"Replicates a convar value to a specific client. This does not change the actual convar value."},{"tag":"param:client","text":"Client index"},{"tag":"param:value","text":"String value to send"},{"tag":"return","text":"True on success, false on failure"},{"tag":"error","text":"Invalid client index, client not in game, or client is fake"}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"const char[]","name":"value","decl":"const char[] value"}]},{"name":"AddChangeHook","docStart":10550,"docEnd":10677,"docs":{"brief":"Creates a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Creates a hook for when a console variable's value is changed."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback"}]},{"name":"RemoveChangeHook","docStart":10739,"docEnd":10956,"docs":{"brief":"Removes a hook for when a console variable's value is changed.","tags":[{"tag":"","text":"Removes a hook for when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar."},{"tag":"param:callback","text":"An OnConVarChanged function pointer."},{"tag":"error","text":"No active hook on convar."}]},"kind":"native","returnType":"void","arguments":[{"type":"ConVarChanged","name":"callback","decl":"ConVarChanged callback"}]}],"properties":[{"name":"BoolValue","docStart":4097,"docEnd":4149,"docs":{"brief":"Retrieves or sets a boolean value for the convar.","tags":[{"tag":"","text":"Retrieves or sets a boolean value for the convar."}]},"type":"bool","getter":true,"setter":true},{"name":"IntValue","docStart":4234,"docEnd":4287,"docs":{"brief":"Retrieves or sets an integer value for the convar.","tags":[{"tag":"","text":"Retrieves or sets an integer value for the convar."}]},"type":"int","getter":true,"setter":true},{"name":"FloatValue","docStart":4373,"docEnd":4423,"docs":{"brief":"Retrieves or sets a float value for the convar.","tags":[{"tag":"","text":"Retrieves or sets a float value for the convar."}]},"type":"float","getter":true,"setter":true},{"name":"Flags","docStart":4515,"docEnd":4569,"docs":{"brief":"Gets or sets the flag bits (FCVAR_*) on the convar.","tags":[{"tag":"","text":"Gets or sets the flag bits (FCVAR_*) on the convar."}]},"type":"int","getter":true,"setter":true}]}],"constants":[],"enums":[{"name":"ConVarBounds","docStart":1619,"docEnd":1691,"docs":{"brief":"Console variable bound values used with Get/SetConVarBounds()","tags":[{"tag":"","text":"Console variable bound values used with Get/SetConVarBounds()"}]},"entries":[{"name":"ConVarBound_Upper","docStart":0,"docEnd":0,"docs":null},{"name":"ConVarBound_Lower","docStart":0,"docEnd":0,"docs":null}]},{"name":"ConVarQueryResult","docStart":1759,"docEnd":1807,"docs":{"brief":"Console variable query result values.","tags":[{"tag":"","text":"Console variable query result values."}]},"entries":[{"name":"ConVarQuery_Okay","docStart":1870,"docEnd":1925,"docs":{"brief":"Retrieval of client convar value was successful. */","tags":[{"tag":"","text":"Retrieval of client convar value was successful. */"}]}},{"name":"ConVarQuery_NotFound","docStart":1963,"docEnd":1998,"docs":{"brief":"Client convar was not found. */","tags":[{"tag":"","text":"Client convar was not found. */"}]}},{"name":"ConVarQuery_NotValid","docStart":2036,"docEnd":2114,"docs":{"brief":"A console command with the same name was found, but there is no convar. */","tags":[{"tag":"","text":"A console command with the same name was found, but there is no convar. */"}]}},{"name":"ConVarQuery_Protected","docStart":2152,"docEnd":2242,"docs":{"brief":"Client convar was found, but it is protected. The server cannot retrieve its value. */","tags":[{"tag":"","text":"Client convar was found, but it is protected. The server cannot retrieve its value. */"}]}}]}],"typesets":[{"name":"ConVarQueryFinished","docStart":0,"docEnd":0,"docs":null,"types":[{"type":"function void(QueryCookie cookie, int client, ConVarQueryResult result, const char[] cvarName, const char[] cvarValue, any value)","docStart":20268,"docEnd":20850,"docs":{"brief":"Called when a query to retrieve a client's console variable has finished.","tags":[{"tag":"","text":"Called when a query to retrieve a client's console variable has finished."},{"tag":"param:cookie","text":"Unique identifier of query."},{"tag":"param:client","text":"Player index."},{"tag":"param:result","text":"Result of query that tells one whether or not query was successful.\nSee ConVarQueryResult enum for more details."},{"tag":"param:convarName","text":"Name of client convar that was queried."},{"tag":"param:convarValue","text":"Value of client convar that was queried if successful. This will be \"\" if it was not."},{"tag":"param:value","text":"Value that was passed when query was started."}]}},{"type":"function void(QueryCookie cookie, int client, ConVarQueryResult result, const char[] cvarName, const char[] cvarValue)","docStart":20987,"docEnd":21498,"docs":{"brief":"Called when a query to retrieve a client's console variable has finished.","tags":[{"tag":"","text":"Called when a query to retrieve a client's console variable has finished."},{"tag":"param:cookie","text":"Unique identifier of query."},{"tag":"param:client","text":"Player index."},{"tag":"param:result","text":"Result of query that tells one whether or not query was successful.\nSee ConVarQueryResult enum for more details."},{"tag":"param:convarName","text":"Name of client convar that was queried."},{"tag":"param:convarValue","text":"Value of client convar that was queried if successful. This will be \"\" if it was not."}]}}]}],"typedefs":[{"name":"ConVarChanged","docStart":2247,"docEnd":2535,"docs":{"brief":"Called when a console variable's value is changed.","tags":[{"tag":"","text":"Called when a console variable's value is changed."},{"tag":"param:convar","text":"Handle to the convar that was changed."},{"tag":"param:oldValue","text":"String containing the value of the convar before it was changed."},{"tag":"param:newValue","text":"String containing the new value of the convar."}]},"type":"function void(ConVar convar, const char[] oldValue, const char[] newValue)"}]}