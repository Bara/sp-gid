{"functions":[{"name":"GetUserMessageType","docStart":2218,"docEnd":2358,"docs":{"brief":"Returns usermessage serialization type used for the current engine","tags":[{"tag":"","text":"Returns usermessage serialization type used for the current engine"},{"tag":"return","text":"Returns usermessage serialization type used for the current engine\nThe supported usermessage type."}]},"kind":"native","returnType":"UserMessageType","arguments":[]},{"name":"UserMessageToProtobuf","docStart":0,"docEnd":0,"docs":null,"kind":"stock","returnType":"Protobuf","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg"}]},{"name":"UserMessageToBfWrite","docStart":2568,"docEnd":2642,"docs":{"brief":"Make sure to only call this on writable buffers (eg from StartMessage)","tags":[{"tag":"","text":"Make sure to only call this on writable buffers (eg from StartMessage)"}]},"kind":"stock","returnType":"BfWrite","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg"}]},{"name":"UserMessageToBfRead","docStart":2801,"docEnd":2877,"docs":{"brief":"Make sure to only call this on readable buffers (eg from a message hook)","tags":[{"tag":"","text":"Make sure to only call this on readable buffers (eg from a message hook)"}]},"kind":"stock","returnType":"BfRead","arguments":[{"type":"Handle","name":"msg","decl":"Handle msg"}]},{"name":"GetUserMessageId","docStart":3034,"docEnd":3253,"docs":{"brief":"Returns the ID of a given message, or -1 on failure.","tags":[{"tag":"","text":"Returns the ID of a given message, or -1 on failure."},{"tag":"param:msg","text":"Returns the ID of a given message, or -1 on failure.\nString containing message name (case sensitive)."},{"tag":"return","text":"Returns the ID of a given message, or -1 on failure.\nString containing message name (case sensitive).A message index, or INVALID_MESSAGE_ID on failure."}]},"kind":"native","returnType":"UserMsg","arguments":[{"type":"const char[]","name":"msg","decl":"const char[] msg"}]},{"name":"GetUserMessageName","docStart":3309,"docEnd":3602,"docs":{"brief":"Retrieves the name of a message by ID.","tags":[{"tag":"","text":"Retrieves the name of a message by ID."},{"tag":"param:msg_id","text":"Retrieves the name of a message by ID.\nMessage index."},{"tag":"param:msg","text":"Retrieves the name of a message by ID.\nMessage index.Buffer to store the name of the message."},{"tag":"param:maxlength","text":"Retrieves the name of a message by ID.\nMessage index.Buffer to store the name of the message.Maximum length of string buffer."},{"tag":"return","text":"Retrieves the name of a message by ID.\nMessage index.Buffer to store the name of the message.Maximum length of string buffer.True if message index is valid, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id"},{"type":"char[]","name":"msg","decl":"char[] msg"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"StartMessage","docStart":3682,"docEnd":4374,"docs":{"brief":"Starts a usermessage (network message).","tags":[{"tag":"","text":"Starts a usermessage (network message)."},{"tag":"note","text":"Starts a usermessage (network message).\nOnly one message can be active at a time."},{"tag":"note","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress."},{"tag":"param:msgname","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start."},{"tag":"param:clients","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start.Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start.Array containing player indexes to broadcast to.Number of players in the array."},{"tag":"param:flags","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set."},{"tag":"return","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure."},{"tag":"error","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage name to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure.Invalid message name, unable to start a message, invalid client,or client not connected."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname"},{"type":"const int[]","name":"clients","decl":"const int[] clients"},{"type":"int","name":"numClients","decl":"int numClients"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"StartMessageEx","docStart":4479,"docEnd":5172,"docs":{"brief":"Starts a usermessage (network message).","tags":[{"tag":"","text":"Starts a usermessage (network message)."},{"tag":"note","text":"Starts a usermessage (network message).\nOnly one message can be active at a time."},{"tag":"note","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress."},{"tag":"param:msg","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start."},{"tag":"param:clients","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start.Array containing player indexes to broadcast to."},{"tag":"param:numClients","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start.Array containing player indexes to broadcast to.Number of players in the array."},{"tag":"param:flags","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set."},{"tag":"return","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure."},{"tag":"error","text":"Starts a usermessage (network message).\nOnly one message can be active at a time.It is illegal to send any message while a non-intercept hook is in progress.\nMessage index to start.Array containing player indexes to broadcast to.Number of players in the array.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure.Invalid message name, unable to start a message, invalid client,or client not connected."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"UserMsg","name":"msg","decl":"UserMsg msg"},{"type":"const int[]","name":"clients","decl":"const int[] clients"},{"type":"int","name":"numClients","decl":"int numClients"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"EndMessage","docStart":5270,"docEnd":5340,"docs":{"brief":"Ends a previously started user message (network message).","tags":[{"tag":"","text":"Ends a previously started user message (network message)."}]},"kind":"native","returnType":"void","arguments":[]},{"name":"HookUserMessage","docStart":7234,"docEnd":7693,"docs":{"brief":"Hooks a user message.","tags":[{"tag":"","text":"Hooks a user message."},{"tag":"param:msg_id","text":"Hooks a user message.\nMessage index."},{"tag":"param:hook","text":"Hooks a user message.\nMessage index.Function to use as a hook."},{"tag":"param:intercept","text":"Hooks a user message.\nMessage index.Function to use as a hook.If intercept is true, message will be fully intercepted,allowing the user to block the message.  Otherwise,the hook is normal and ignores the return value."},{"tag":"param:post","text":"Hooks a user message.\nMessage index.Function to use as a hook.If intercept is true, message will be fully intercepted,allowing the user to block the message.  Otherwise,the hook is normal and ignores the return value.Notification function."},{"tag":"error","text":"Hooks a user message.\nMessage index.Function to use as a hook.If intercept is true, message will be fully intercepted,allowing the user to block the message.  Otherwise,the hook is normal and ignores the return value.Notification function.Invalid message index."}]},"kind":"native","returnType":"void","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id"},{"type":"MsgHook","name":"hook","decl":"MsgHook hook"},{"type":"bool","name":"intercept","decl":"bool intercept"},{"type":"function void(UserMsg msg_id, bool sent)","name":"post","decl":"function void(UserMsg msg_id, bool sent) post"}]},{"name":"UnhookUserMessage","docStart":7814,"docEnd":8083,"docs":{"brief":"Removes one usermessage hook.","tags":[{"tag":"","text":"Removes one usermessage hook."},{"tag":"param:msg_id","text":"Removes one usermessage hook.\nMessage index."},{"tag":"param:hook","text":"Removes one usermessage hook.\nMessage index.Function used for the hook."},{"tag":"param:intercept","text":"Removes one usermessage hook.\nMessage index.Function used for the hook.Specifies whether the hook was an intercept hook or not."},{"tag":"error","text":"Removes one usermessage hook.\nMessage index.Function used for the hook.Specifies whether the hook was an intercept hook or not.Invalid message index."}]},"kind":"native","returnType":"void","arguments":[{"type":"UserMsg","name":"msg_id","decl":"UserMsg msg_id"},{"type":"MsgHook","name":"hook","decl":"MsgHook hook"},{"type":"bool","name":"intercept","decl":"bool intercept"}]},{"name":"StartMessageAll","docStart":8171,"docEnd":8532,"docs":{"brief":"Starts a usermessage (network message) that broadcasts to all clients.","tags":[{"tag":"","text":"Starts a usermessage (network message) that broadcasts to all clients."},{"tag":"note","text":"Starts a usermessage (network message) that broadcasts to all clients.\nSee StartMessage or StartMessageEx()."},{"tag":"param:msgname","text":"Starts a usermessage (network message) that broadcasts to all clients.\nSee StartMessage or StartMessageEx().\nMessage name to start."},{"tag":"param:flags","text":"Starts a usermessage (network message) that broadcasts to all clients.\nSee StartMessage or StartMessageEx().\nMessage name to start.Optional flags to set."},{"tag":"return","text":"Starts a usermessage (network message) that broadcasts to all clients.\nSee StartMessage or StartMessageEx().\nMessage name to start.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"StartMessageOne","docStart":8833,"docEnd":9230,"docs":{"brief":"Starts a simpler usermessage (network message) for one client.","tags":[{"tag":"","text":"Starts a simpler usermessage (network message) for one client."},{"tag":"note","text":"Starts a simpler usermessage (network message) for one client.\nSee StartMessage or StartMessageEx()."},{"tag":"param:msgname","text":"Starts a simpler usermessage (network message) for one client.\nSee StartMessage or StartMessageEx().\nMessage name to start."},{"tag":"param:client","text":"Starts a simpler usermessage (network message) for one client.\nSee StartMessage or StartMessageEx().\nMessage name to start.Client to send to."},{"tag":"param:flags","text":"Starts a simpler usermessage (network message) for one client.\nSee StartMessage or StartMessageEx().\nMessage name to start.Client to send to.Optional flags to set."},{"tag":"return","text":"Starts a simpler usermessage (network message) for one client.\nSee StartMessage or StartMessageEx().\nMessage name to start.Client to send to.Optional flags to set.A handle to a bf_write bit packing structure, orINVALID_HANDLE on failure."}]},"kind":"stock","returnType":"Handle","arguments":[{"type":"const char[]","name":"msgname","decl":"const char[] msgname"},{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"flags","decl":"int flags"}]}],"methodmaps":[],"constants":[],"enums":[{"name":"UserMsg","docStart":1645,"docEnd":1680,"docs":{"brief":"UserMsg helper values.","tags":[{"tag":"","text":"UserMsg helper values."}]},"entries":[{"name":"INVALID_MESSAGE_ID","docStart":0,"docEnd":0,"docs":null}]},{"name":"UserMessageType","docStart":1731,"docEnd":1781,"docs":{"brief":"UserMsg message serialization formats","tags":[{"tag":"","text":"UserMsg message serialization formats"}]},"entries":[{"name":"UM_BitBuf","docStart":0,"docEnd":0,"docs":null},{"name":"UM_Protobuf","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[{"name":"MsgHook","docStart":5371,"docEnd":5421,"docs":{"brief":"Hook function types for user messages.","tags":[{"tag":"","text":"Hook function types for user messages."}]},"types":[{"type":"function Action(UserMsg msg_id, BfRead msg, const int[] players, int playersNum, bool reliable, bool init)","docStart":5444,"docEnd":6105,"docs":{"brief":"Called when a bit buffer based usermessage is hooked","tags":[{"tag":"","text":"Called when a bit buffer based usermessage is hooked"},{"tag":"param:msg_id","text":"Called when a bit buffer based usermessage is hooked\nMessage index."},{"tag":"param:msg","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer."},{"tag":"param:players","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer.Array containing player indexes."},{"tag":"param:playersNum","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer.Array containing player indexes.Number of players in the array."},{"tag":"param:reliable","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise."},{"tag":"param:init","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise.True if message is an initmsg, false otherwise."},{"tag":"return","text":"Called when a bit buffer based usermessage is hooked\nMessage index.Handle to the input bit buffer.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise.True if message is an initmsg, false otherwise.Ignored for normal hooks.  For intercept hooks, Plugin_Handledblocks the message from being sent, and Plugin_Continueresumes normal functionality."}]}},{"type":"function Action(UserMsg msg_id, Protobuf msg, const int[] players, int playersNum, bool reliable, bool init)","docStart":6219,"docEnd":6876,"docs":{"brief":"Called when a protobuf based usermessage is hooked","tags":[{"tag":"","text":"Called when a protobuf based usermessage is hooked"},{"tag":"param:msg_id","text":"Called when a protobuf based usermessage is hooked\nMessage index."},{"tag":"param:msg","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf."},{"tag":"param:players","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf.Array containing player indexes."},{"tag":"param:playersNum","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf.Array containing player indexes.Number of players in the array."},{"tag":"param:reliable","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise."},{"tag":"param:init","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise.True if message is an initmsg, false otherwise."},{"tag":"return","text":"Called when a protobuf based usermessage is hooked\nMessage index.Handle to the input protobuf.Array containing player indexes.Number of players in the array.True if message is reliable, false otherwise.True if message is an initmsg, false otherwise.Ignored for normal hooks.  For intercept hooks, Plugin_Handledblocks the message from being sent, and Plugin_Continueresumes normal functionality."}]}}]}],"typedefs":[{"name":"MsgPostHook","docStart":6997,"docEnd":7164,"docs":{"brief":"Called when a message hook has completed.","tags":[{"tag":"","text":"Called when a message hook has completed."},{"tag":"param:msg_id","text":"Called when a message hook has completed.\nMessage index."},{"tag":"param:sent","text":"Called when a message hook has completed.\nMessage index.True if message was sent, false if blocked."}]},"type":"function void(UserMsg msg_id, bool sent)"}]}