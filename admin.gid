{"functions":[{"name":"OnRebuildAdminCache","docStart":13337,"docEnd":13465,"docs":{"brief":"Called when part of the cache needs to be rebuilt.","tags":[{"tag":"","text":"Called when part of the cache needs to be rebuilt."},{"tag":"param:part","text":"Part of the admin cache to rebuild."}]},"kind":"forward","returnType":"void","arguments":[{"type":"AdminCachePart","name":"part","decl":"AdminCachePart part"}]},{"name":"DumpAdminCache","docStart":13525,"docEnd":13752,"docs":{"brief":"Tells the admin system to dump a portion of the cache.","tags":[{"tag":"","text":"Tells the admin system to dump a portion of the cache."},{"tag":"param:part","text":"Part of the cache to dump.  Specifying groups also dumps admins."},{"tag":"param:rebuild","text":"If true, the rebuild forwards will fire."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminCachePart","name":"part","decl":"AdminCachePart part"},{"type":"bool","name":"rebuild","decl":"bool rebuild"}]},{"name":"AddCommandOverride","docStart":13820,"docEnd":14165,"docs":{"brief":"Adds a global command flag override.  Any command registered with this name\nwill assume the new flag.  This is applied retroactively as well.","tags":[{"tag":"","text":"Adds a global command flag override.  Any command registered with this name\nwill assume the new flag.  This is applied retroactively as well."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:flags","text":"New admin flag."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"int","name":"flags","decl":"int flags"}]},{"name":"GetCommandOverride","docStart":14250,"docEnd":14595,"docs":{"brief":"Returns a command override.","tags":[{"tag":"","text":"Returns a command override."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:flags","text":"By-reference cell to store the flag (undefined if not found)."},{"tag":"return","text":"True if there is an override, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"int&","name":"flags","decl":"int& flags"}]},{"name":"UnsetCommandOverride","docStart":14681,"docEnd":14866,"docs":{"brief":"Unsets a command override.","tags":[{"tag":"","text":"Unsets a command override."},{"tag":"param:cmd","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"cmd","decl":"const char[] cmd"},{"type":"OverrideType","name":"type","decl":"OverrideType type"}]},{"name":"CreateAdmGroup","docStart":14942,"docEnd":15137,"docs":{"brief":"Adds a new group.  Name must be unique.","tags":[{"tag":"","text":"Adds a new group.  Name must be unique."},{"tag":"param:group_name","text":"String containing the group name."},{"tag":"return","text":"A new group id, INVALID_GROUP_ID if it already exists."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"const char[]","name":"group_name","decl":"const char[] group_name"}]},{"name":"FindAdmGroup","docStart":15198,"docEnd":15367,"docs":{"brief":"Finds a group by name.","tags":[{"tag":"","text":"Finds a group by name."},{"tag":"param:group_name","text":"String containing the group name."},{"tag":"return","text":"A group id, or INVALID_GROUP_ID if not found."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"const char[]","name":"group_name","decl":"const char[] group_name"}]},{"name":"SetAdmGroupAddFlag","docStart":15426,"docEnd":15718,"docs":{"brief":"Adds or removes a flag from a group's flag set.","tags":[{"tag":"","text":"Adds or removes a flag from a group's flag set."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"Group id."},{"tag":"param:flag","text":"Admin flag to toggle."},{"tag":"param:enabled","text":"True to set the flag, false to unset/disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"bool","name":"enabled","decl":"bool enabled"}]},{"name":"GetAdmGroupAddFlag","docStart":15797,"docEnd":16088,"docs":{"brief":"Gets the set value of an add flag on a group's flag set.","tags":[{"tag":"","text":"Gets the set value of an add flag on a group's flag set."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"Group id."},{"tag":"param:flag","text":"Admin flag to retrieve."},{"tag":"return","text":"True if enabled, false otherwise,"}]},"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"}]},{"name":"GetAdmGroupAddFlags","docStart":16153,"docEnd":16419,"docs":{"brief":"Returns the flag set that is added to a user from their group.","tags":[{"tag":"","text":"Returns the flag set that is added to a user from their group."},{"tag":"note","text":"These are called \"add flags\" because they add to a user's flags."},{"tag":"param:id","text":"GroupId of the group."},{"tag":"return","text":"Bitstring containing the flags enabled."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"}]},{"name":"SetAdmGroupImmunity","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"ImmunityType","name":"type","decl":"ImmunityType type"},{"type":"bool","name":"enabled","decl":"bool enabled"}]},{"name":"GetAdmGroupImmunity","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"ImmunityType","name":"type","decl":"ImmunityType type"}]},{"name":"SetAdmGroupImmuneFrom","docStart":16852,"docEnd":16996,"docs":{"brief":"Adds immunity to a specific group.","tags":[{"tag":"","text":"Adds immunity to a specific group."},{"tag":"param:id","text":"Group id."},{"tag":"param:other_id","text":"Group id to receive immunity to."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"GroupId","name":"other_id","decl":"GroupId other_id"}]},{"name":"GetAdmGroupImmuneCount","docStart":17066,"docEnd":17219,"docs":{"brief":"Returns the number of specific group immunities.","tags":[{"tag":"","text":"Returns the number of specific group immunities."},{"tag":"param:id","text":"Group id."},{"tag":"return","text":"Number of group immunities."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"}]},{"name":"GetAdmGroupImmuneFrom","docStart":17271,"docEnd":17555,"docs":{"brief":"Returns a group that this group is immune to given an index.","tags":[{"tag":"","text":"Returns a group that this group is immune to given an index."},{"tag":"param:id","text":"Group id."},{"tag":"param:number","text":"Index from 0 to N-1, from GetAdmGroupImmuneCount()."},{"tag":"return","text":"GroupId that this group is immune to, or INVALID_GROUP_ID on failure."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"int","name":"number","decl":"int number"}]},{"name":"AddAdmGroupCmdOverride","docStart":17622,"docEnd":17906,"docs":{"brief":"Adds a group-specific override type.","tags":[{"tag":"","text":"Adds a group-specific override type."},{"tag":"param:id","text":"Group id."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Override allow/deny setting."}]},"kind":"native","returnType":"void","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"OverrideRule","name":"rule","decl":"OverrideRule rule"}]},{"name":"GetAdmGroupCmdOverride","docStart":18016,"docEnd":18395,"docs":{"brief":"Retrieves a group-specific command override.","tags":[{"tag":"","text":"Retrieves a group-specific command override."},{"tag":"param:id","text":"Group id."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Optional pointer to store allow/deny setting."},{"tag":"return","text":"True if an override exists, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"GroupId","name":"id","decl":"GroupId id"},{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"OverrideRule&","name":"rule","decl":"OverrideRule& rule"}]},{"name":"RegisterAuthIdentType","docStart":18506,"docEnd":18712,"docs":{"brief":"Registers an authentication identity type.  You normally never need to call this except for\nvery specific systems.","tags":[{"tag":"","text":"Registers an authentication identity type.  You normally never need to call this except for\nvery specific systems."},{"tag":"param:name","text":"Codename to use for your authentication type."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"CreateAdmin","docStart":18771,"docEnd":19107,"docs":{"brief":"Creates a new admin entry in the permissions cache and returns the generated AdminId index.","tags":[{"tag":"","text":"Creates a new admin entry in the permissions cache and returns the generated AdminId index."},{"tag":"param:name","text":"Name for this entry (does not have to be unique).\nSpecify an empty string for an anonymous admin."},{"tag":"return","text":"New AdminId index or INVALID_ADMIN_ID if name is empty"}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"}]},{"name":"GetAdminUsername","docStart":19162,"docEnd":19534,"docs":{"brief":"Retrieves an admin's user name as made with CreateAdmin().","tags":[{"tag":"","text":"Retrieves an admin's user name as made with CreateAdmin()."},{"tag":"note","text":"This function can return UTF-8 strings, and will safely chop UTF-8 strings."},{"tag":"param:id","text":"AdminId of the admin."},{"tag":"param:name","text":"String buffer to store name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"BindAdminIdentity","docStart":19608,"docEnd":20083,"docs":{"brief":"Binds an admin to an identity for fast lookup later on.  The bind must be unique.","tags":[{"tag":"","text":"Binds an admin to an identity for fast lookup later on.  The bind must be unique."},{"tag":"param:id","text":"AdminId of the admin."},{"tag":"param:auth","text":"Auth method to use, predefined or from RegisterAuthIdentType()."},{"tag":"param:ident","text":"String containing the arbitrary, unique identity."},{"tag":"return","text":"True on success, false if the auth method was not found,\nident was already taken, or ident invalid for auth method."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"const char[]","name":"auth","decl":"const char[] auth"},{"type":"const char[]","name":"ident","decl":"const char[] ident"}]},{"name":"SetAdminFlag","docStart":20170,"docEnd":20393,"docs":{"brief":"Sets whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Sets whether or not a flag is enabled on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:enabled","text":"True to enable, false to disable."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"bool","name":"enabled","decl":"bool enabled"}]},{"name":"GetAdminFlag","docStart":20466,"docEnd":20739,"docs":{"brief":"Returns whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Returns whether or not a flag is enabled on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:mode","text":"Access mode to check."},{"tag":"return","text":"True if enabled, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode"}]},{"name":"GetAdminFlags","docStart":20835,"docEnd":21073,"docs":{"brief":"Returns the bitstring of access flags on an admin.","tags":[{"tag":"","text":"Returns the bitstring of access flags on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:mode","text":"Access mode to use."},{"tag":"return","text":"A bitstring containing which flags are enabled."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode"}]},{"name":"AdminInheritGroup","docStart":21136,"docEnd":21472,"docs":{"brief":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags.","tags":[{"tag":"","text":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:gid","text":"GroupId index of the group."},{"tag":"return","text":"True on success, false on invalid input or duplicate membership."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"GroupId","name":"gid","decl":"GroupId gid"}]},{"name":"GetAdminGroupCount","docStart":21533,"docEnd":21727,"docs":{"brief":"Returns the number of groups this admin is a member of.","tags":[{"tag":"","text":"Returns the number of groups this admin is a member of."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"return","text":"Number of groups this admin is a member of."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"}]},{"name":"GetAdminGroup","docStart":21775,"docEnd":22353,"docs":{"brief":"Returns group information from an admin.","tags":[{"tag":"","text":"Returns group information from an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:index","text":"Group number to retrieve, from 0 to N-1, where N\nis the value of GetAdminGroupCount(id)."},{"tag":"param:name","text":"Buffer to store the group's name.\nNote: This will safely chop UTF-8 strings."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer."},{"tag":"return","text":"A GroupId index and a name pointer, or\nINVALID_GROUP_ID and NULL if an error occurred."}]},"kind":"native","returnType":"GroupId","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"int","name":"index","decl":"int index"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SetAdminPassword","docStart":22439,"docEnd":22594,"docs":{"brief":"Sets a password on an admin.","tags":[{"tag":"","text":"Sets a password on an admin."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:password","text":"String containing the password."}]},"kind":"native","returnType":"void","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"const char[]","name":"password","decl":"const char[] password"}]},{"name":"GetAdminPassword","docStart":22664,"docEnd":23040,"docs":{"brief":"Gets an admin's password.","tags":[{"tag":"","text":"Gets an admin's password."},{"tag":"param:id","text":"AdminId index of the admin."},{"tag":"param:buffer","text":"Optional buffer to store the admin's password."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer.\nNote: This will safely chop UTF-8 strings."},{"tag":"return","text":"True if there was a password set, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"FindAdminByIdentity","docStart":23122,"docEnd":23377,"docs":{"brief":"Attempts to find an admin by an auth method and an identity.","tags":[{"tag":"","text":"Attempts to find an admin by an auth method and an identity."},{"tag":"param:auth","text":"Auth method to try."},{"tag":"param:identity","text":"Identity string to look up."},{"tag":"return","text":"An AdminId index if found, INVALID_ADMIN_ID otherwise."}]},"kind":"native","returnType":"AdminId","arguments":[{"type":"const char[]","name":"auth","decl":"const char[] auth"},{"type":"const char[]","name":"identity","decl":"const char[] identity"}]},{"name":"RemoveAdmin","docStart":23460,"docEnd":23699,"docs":{"brief":"Removes an admin entry from the cache.","tags":[{"tag":"","text":"Removes an admin entry from the cache."},{"tag":"note","text":"This will remove any bindings to a specific user."},{"tag":"param:id","text":"AdminId index to remove/invalidate."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"}]},{"name":"FlagBitsToBitArray","docStart":23741,"docEnd":24063,"docs":{"brief":"Converts a flag bit string to a bit array.","tags":[{"tag":"","text":"Converts a flag bit string to a bit array."},{"tag":"param:bits","text":"Bit string containing the flags."},{"tag":"param:array","text":"Array to write the flags to.  Enabled flags will be 'true'."},{"tag":"param:maxSize","text":"Maximum number of flags the array can store."},{"tag":"return","text":"Number of flags written."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"bits","decl":"int bits"},{"type":"bool[]","name":"array","decl":"bool[] array"},{"type":"int","name":"maxSize","decl":"int maxSize"}]},{"name":"FlagBitArrayToBits","docStart":24136,"docEnd":24390,"docs":{"brief":"Converts a flag array to a bit string.","tags":[{"tag":"","text":"Converts a flag array to a bit string."},{"tag":"param:array","text":"Array containing true or false for each AdminFlag."},{"tag":"param:maxSize","text":"Maximum size of the flag array."},{"tag":"return","text":"A bit string composed of the array bits."}]},"kind":"native","returnType":"int","arguments":[{"type":"const bool[]","name":"array","decl":"const bool[] array"},{"type":"int","name":"maxSize","decl":"int maxSize"}]},{"name":"FlagArrayToBits","docStart":24459,"docEnd":24699,"docs":{"brief":"Converts an array of flags to bits.","tags":[{"tag":"","text":"Converts an array of flags to bits."},{"tag":"param:array","text":"Array containing flags that are enabled."},{"tag":"param:numFlags","text":"Number of flags in the array."},{"tag":"return","text":"A bit string composed of the array flags."}]},"kind":"native","returnType":"int","arguments":[{"type":"const AdminFlag[]","name":"array","decl":"const AdminFlag[] array"},{"type":"int","name":"numFlags","decl":"int numFlags"}]},{"name":"FlagBitsToArray","docStart":24771,"docEnd":25050,"docs":{"brief":"Converts a bit string to an array of flags.","tags":[{"tag":"","text":"Converts a bit string to an array of flags."},{"tag":"param:bits","text":"Bit string containing the flags."},{"tag":"param:array","text":"Output array to write flags."},{"tag":"param:maxSize","text":"Maximum size of the flag array."},{"tag":"return","text":"Number of flags written."}]},"kind":"native","returnType":"int","arguments":[{"type":"int","name":"bits","decl":"int bits"},{"type":"AdminFlag[]","name":"array","decl":"AdminFlag[] array"},{"type":"int","name":"maxSize","decl":"int maxSize"}]},{"name":"FindFlagByName","docStart":25125,"docEnd":25354,"docs":{"brief":"Finds a flag by its string name.","tags":[{"tag":"","text":"Finds a flag by its string name."},{"tag":"param:name","text":"Flag name (like \"kick\"), case sensitive."},{"tag":"param:flag","text":"Variable to store flag in."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag"}]},{"name":"FindFlagByChar","docStart":25423,"docEnd":25641,"docs":{"brief":"Finds a flag by a given character.","tags":[{"tag":"","text":"Finds a flag by a given character."},{"tag":"param:c","text":"Flag ASCII character/token."},{"tag":"param:flag","text":"Variable to store flag in."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"int","name":"c","decl":"int c"},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag"}]},{"name":"FindFlagChar","docStart":25698,"docEnd":25916,"docs":{"brief":"Finds the flag char for a given admin flag.","tags":[{"tag":"","text":"Finds the flag char for a given admin flag."},{"tag":"param:flag","text":"Flag to look up."},{"tag":"param:c","text":"Variable to store flag char."},{"tag":"return","text":"True on success, false if not found."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"int&","name":"c","decl":"int& c"}]},{"name":"ReadFlagString","docStart":25971,"docEnd":26218,"docs":{"brief":"Converts a string of flag characters to a bit string.","tags":[{"tag":"","text":"Converts a string of flag characters to a bit string."},{"tag":"param:flags","text":"Flag ASCII string."},{"tag":"param:numchars","text":"Optional variable to store the number of bytes read."},{"tag":"return","text":"Bit string of ADMFLAG values."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"flags","decl":"const char[] flags"},{"type":"int&","name":"numchars","decl":"int& numchars"}]},{"name":"CanAdminTarget","docStart":26287,"docEnd":27200,"docs":{"brief":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds.","tags":[{"tag":"","text":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds."},{"tag":"param:admin","text":"Admin doing the targetting (may be INVALID_ADMIN_ID)."},{"tag":"param:target","text":"Target admin (may be INVALID_ADMIN_ID)."},{"tag":"return","text":"True if targetable, false if immune."}]},"kind":"native","returnType":"bool","arguments":[{"type":"AdminId","name":"admin","decl":"AdminId admin"},{"type":"AdminId","name":"target","decl":"AdminId target"}]},{"name":"CreateAuthMethod","docStart":27264,"docEnd":27500,"docs":{"brief":"Creates an admin auth method.  This does not need to be called more than once\nper method, ever.","tags":[{"tag":"","text":"Creates an admin auth method.  This does not need to be called more than once\nper method, ever."},{"tag":"param:method","text":"Name of the authentication method."},{"tag":"return","text":"True on success, false on failure."}]},"kind":"native","returnType":"bool","arguments":[{"type":"const char[]","name":"method","decl":"const char[] method"}]},{"name":"SetAdmGroupImmunityLevel","docStart":27556,"docEnd":27736,"docs":{"brief":"Sets a group's immunity level.","tags":[{"tag":"","text":"Sets a group's immunity level."},{"tag":"param:gid","text":"Group Id."},{"tag":"param:level","text":"Immunity level value."},{"tag":"return","text":"Old immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid"},{"type":"int","name":"level","decl":"int level"}]},{"name":"GetAdmGroupImmunityLevel","docStart":27802,"docEnd":27947,"docs":{"brief":"Gets a group's immunity level (defaults to 0).","tags":[{"tag":"","text":"Gets a group's immunity level (defaults to 0)."},{"tag":"param:gid","text":"Group Id."},{"tag":"return","text":"Immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid"}]},{"name":"SetAdminImmunityLevel","docStart":28002,"docEnd":28183,"docs":{"brief":"Sets an admin's immunity level.","tags":[{"tag":"","text":"Sets an admin's immunity level."},{"tag":"param:id","text":"Admin Id."},{"tag":"param:level","text":"Immunity level value."},{"tag":"return","text":"Old immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"},{"type":"int","name":"level","decl":"int level"}]},{"name":"GetAdminImmunityLevel","docStart":28245,"docEnd":28375,"docs":{"brief":"Gets an admin's immunity level.","tags":[{"tag":"","text":"Gets an admin's immunity level."},{"tag":"param:id","text":"Admin Id."},{"tag":"return","text":"Immunity level value."}]},"kind":"native","returnType":"int","arguments":[{"type":"AdminId","name":"id","decl":"AdminId id"}]},{"name":"FlagToBit","docStart":28426,"docEnd":28576,"docs":{"brief":"Converts a flag to its single bit.","tags":[{"tag":"","text":"Converts a flag to its single bit."},{"tag":"param:flag","text":"Flag to convert."},{"tag":"return","text":"Bit representation of the flag."}]},"kind":"stock","returnType":"int","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"}]},{"name":"BitToFlag","docStart":28659,"docEnd":28872,"docs":{"brief":"Converts a bit to an AdminFlag.","tags":[{"tag":"","text":"Converts a bit to an AdminFlag."},{"tag":"param:bit","text":"Bit to convert."},{"tag":"param:flag","text":"Stores the converted flag by reference."},{"tag":"return","text":"True on success, false otherwise."}]},"kind":"stock","returnType":"bool","arguments":[{"type":"int","name":"bit","decl":"int bit"},{"type":"AdminFlag&","name":"flag","decl":"AdminFlag& flag"}]}],"methodmaps":[{"name":"AdminId","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"GetUsername","docStart":6900,"docEnd":7221,"docs":{"brief":"Retrieves an admin's user name as made with CreateAdmin().","tags":[{"tag":"","text":"Retrieves an admin's user name as made with CreateAdmin()."},{"tag":"note","text":"This function can return UTF-8 strings, and will safely chop UTF-8 strings."},{"tag":"param:name","text":"String buffer to store name."},{"tag":"param:maxlength","text":"Maximum size of string buffer."},{"tag":"return","text":"Number of bytes written."}]},"kind":null,"returnType":"void","arguments":[{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"BindIdentity","docStart":7288,"docEnd":7711,"docs":{"brief":"Binds an admin to an identity for fast lookup later on.  The bind must be unique.","tags":[{"tag":"","text":"Binds an admin to an identity for fast lookup later on.  The bind must be unique."},{"tag":"param:authMethod","text":"Auth method to use, predefined or from RegisterAuthIdentType()."},{"tag":"param:ident","text":"String containing the arbitrary, unique identity."},{"tag":"return","text":"True on success, false if the auth method was not found,\nident was already taken, or ident invalid for auth method."}]},"kind":null,"returnType":"bool","arguments":[{"type":"const char[]","name":"authMethod","decl":"const char[] authMethod"},{"type":"const char[]","name":"ident","decl":"const char[] ident"}]},{"name":"SetFlag","docStart":7796,"docEnd":7959,"docs":{"brief":"Sets whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Sets whether or not a flag is enabled on an admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:enabled","text":"True to enable, false to disable."}]},"kind":null,"returnType":"void","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"bool","name":"enabled","decl":"bool enabled"}]},{"name":"HasFlag","docStart":8024,"docEnd":8238,"docs":{"brief":"Returns whether or not a flag is enabled on an admin.","tags":[{"tag":"","text":"Returns whether or not a flag is enabled on an admin."},{"tag":"param:flag","text":"Admin flag to use."},{"tag":"param:mode","text":"Access mode to check."},{"tag":"return","text":"True if enabled, false otherwise."}]},"kind":null,"returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode"}]},{"name":"GetFlags","docStart":8326,"docEnd":8504,"docs":{"brief":"Returns the bitstring of access flags on an admin.","tags":[{"tag":"","text":"Returns the bitstring of access flags on an admin."},{"tag":"param:mode","text":"Access mode to use."},{"tag":"return","text":"A bitstring containing which flags are enabled."}]},"kind":null,"returnType":"int","arguments":[{"type":"AdmAccessMode","name":"mode","decl":"AdmAccessMode mode"}]},{"name":"InheritGroup","docStart":8559,"docEnd":8836,"docs":{"brief":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags.","tags":[{"tag":"","text":"Adds a group to an admin's inherited group list.  Any flags the group has\nwill be added to the admin's effective flags."},{"tag":"param:gid","text":"GroupId index of the group."},{"tag":"return","text":"True on success, false on invalid input or duplicate membership."}]},"kind":null,"returnType":"bool","arguments":[{"type":"GroupId","name":"gid","decl":"GroupId gid"}]},{"name":"GetGroup","docStart":8889,"docEnd":9413,"docs":{"brief":"Returns group information from an admin.","tags":[{"tag":"","text":"Returns group information from an admin."},{"tag":"param:index","text":"Group number to retrieve, from 0 to N-1, where N\nis the value of the GroupCount property."},{"tag":"param:name","text":"Buffer to store the group's name.\nNote: This will safely chop UTF-8 strings."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer."},{"tag":"return","text":"A GroupId index and a name pointer, or\nINVALID_GROUP_ID and NULL if an error occurred."}]},"kind":null,"returnType":"GroupId","arguments":[{"type":"int","name":"index","decl":"int index"},{"type":"char[]","name":"name","decl":"char[] name"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"SetPassword","docStart":9491,"docEnd":9585,"docs":{"brief":"Sets a password on an admin.","tags":[{"tag":"","text":"Sets a password on an admin."},{"tag":"param:password","text":"String containing the password."}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"password","decl":"const char[] password"}]},{"name":"GetPassword","docStart":9647,"docEnd":9965,"docs":{"brief":"Gets an admin's password.","tags":[{"tag":"","text":"Gets an admin's password."},{"tag":"param:buffer","text":"Optional buffer to store the admin's password."},{"tag":"param:maxlength","text":"Maximum size of the output name buffer.\nNote: This will safely chop UTF-8 strings."},{"tag":"return","text":"True if there was a password set, false otherwise."}]},"kind":null,"returnType":"bool","arguments":[{"type":"char[]","name":"buffer","decl":"char[] buffer"},{"type":"int","name":"maxlength","decl":"int maxlength"}]},{"name":"CanTarget","docStart":10039,"docEnd":10878,"docs":{"brief":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds.","tags":[{"tag":"","text":"Tests whether one admin can target another.\n\nThe heuristics for this check are as follows:\n0. If the targeting AdminId is INVALID_ADMIN_ID, targeting fails.\n1. If the targeted AdminId is INVALID_ADMIN_ID, targeting succeeds.\n2. If the targeted AdminId is the same as the targeting AdminId,\n(self) targeting succeeds.\n3. If the targeting admin is root, targeting succeeds.\n4. If the targeted admin has access higher (as interpreted by\n(sm_immunity_mode) than the targeting admin, then targeting fails.\n5. If the targeted admin has specific immunity from the\ntargeting admin via group immunities, targeting fails.\n6. Targeting succeeds."},{"tag":"param:target","text":"Target admin (may be INVALID_ADMIN_ID)."},{"tag":"return","text":"True if targetable, false if immune."}]},"kind":null,"returnType":"bool","arguments":[{"type":"AdminId","name":"other","decl":"AdminId other"}]}],"properties":[{"name":"GroupCount","docStart":10930,"docEnd":10986,"docs":{"brief":"The number of groups of which this admin is a member.","tags":[{"tag":"","text":"The number of groups of which this admin is a member."}]},"type":"int","getter":true,"setter":false},{"name":"ImmunityLevel","docStart":11047,"docEnd":11085,"docs":{"brief":"Immunity level used for targetting.","tags":[{"tag":"","text":"Immunity level used for targetting."}]},"type":"int","getter":true,"setter":true}]},{"name":"GroupId","docStart":0,"docEnd":0,"docs":null,"methods":[{"name":"HasFlag","docStart":11206,"docEnd":11384,"docs":{"brief":"Gets whether or not a flag is enabled on a group's flag set.","tags":[{"tag":"","text":"Gets whether or not a flag is enabled on a group's flag set."},{"tag":"param:flag","text":"Admin flag to retrieve."},{"tag":"return","text":"True if enabled, false otherwise,"}]},"kind":null,"returnType":"bool","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"}]},{"name":"SetFlag","docStart":11435,"docEnd":11610,"docs":{"brief":"Adds or removes a flag from a group's flag set.","tags":[{"tag":"","text":"Adds or removes a flag from a group's flag set."},{"tag":"param:flag","text":"Admin flag to toggle."},{"tag":"param:enabled","text":"True to set the flag, false to unset/disable."}]},"kind":null,"returnType":"void","arguments":[{"type":"AdminFlag","name":"flag","decl":"AdminFlag flag"},{"type":"bool","name":"enabled","decl":"bool enabled"}]},{"name":"GetFlags","docStart":11675,"docEnd":11809,"docs":{"brief":"Returns the flag set that is added to users from this group.","tags":[{"tag":"","text":"Returns the flag set that is added to users from this group."},{"tag":"return","text":"Bitstring containing the flags enabled."}]},"kind":null,"returnType":"int","arguments":[]},{"name":"GetGroupImmunity","docStart":11846,"docEnd":12084,"docs":{"brief":"Returns a group that this group is immune to given an index.","tags":[{"tag":"","text":"Returns a group that this group is immune to given an index."},{"tag":"param:number","text":"Index from 0 to N-1, from GroupImmunitiesCount."},{"tag":"return","text":"GroupId that this group is immune to, or INVALID_GROUP_ID on failure."}]},"kind":null,"returnType":"GroupId","arguments":[{"type":"int","name":"index","decl":"int index"}]},{"name":"AddGroupImmunity","docStart":12142,"docEnd":12243,"docs":{"brief":"Adds immunity to a specific group.","tags":[{"tag":"","text":"Adds immunity to a specific group."},{"tag":"param:other","text":"Group id to receive immunity to."}]},"kind":null,"returnType":"void","arguments":[{"type":"GroupId","name":"other","decl":"GroupId other"}]},{"name":"GetCommandOverride","docStart":12302,"docEnd":12641,"docs":{"brief":"Retrieves a group-specific command override.","tags":[{"tag":"","text":"Retrieves a group-specific command override."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Optional pointer to store allow/deny setting."},{"tag":"return","text":"True if an override exists, false otherwise."}]},"kind":null,"returnType":"bool","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"OverrideRule&","name":"rule","decl":"OverrideRule& rule"}]},{"name":"AddCommandOverride","docStart":12745,"docEnd":12988,"docs":{"brief":"Adds a group-specific override type.","tags":[{"tag":"","text":"Adds a group-specific override type."},{"tag":"param:name","text":"String containing command name (case sensitive)."},{"tag":"param:type","text":"Override type (specific command or group)."},{"tag":"param:rule","text":"Override allow/deny setting."}]},"kind":null,"returnType":"void","arguments":[{"type":"const char[]","name":"name","decl":"const char[] name"},{"type":"OverrideType","name":"type","decl":"OverrideType type"},{"type":"OverrideRule","name":"rule","decl":"OverrideRule rule"}]}],"properties":[{"name":"GroupImmunitiesCount","docStart":13091,"docEnd":13129,"docs":{"brief":"Number of specific group immunities","tags":[{"tag":"","text":"Number of specific group immunities"}]},"type":"int","getter":true,"setter":false},{"name":"ImmunityLevel","docStart":13200,"docEnd":13238,"docs":{"brief":"Immunity level used for targetting.","tags":[{"tag":"","text":"Immunity level used for targetting."}]},"type":"int","getter":true,"setter":true}]}],"constants":[],"enums":[{"name":"AdminFlag","docStart":1635,"docEnd":1681,"docs":{"brief":"Access levels (flags) for admins.","tags":[{"tag":"","text":"Access levels (flags) for admins."}]},"entries":[{"name":"Admin_Reservation","docStart":1727,"docEnd":1748,"docs":{"brief":"Reserved slot","tags":[{"tag":"","text":"Reserved slot"}]}},{"name":"Admin_Generic","docStart":1775,"docEnd":1806,"docs":{"brief":"Generic admin abilities","tags":[{"tag":"","text":"Generic admin abilities"}]}},{"name":"Admin_Kick","docStart":1833,"docEnd":1858,"docs":{"brief":"Kick another user","tags":[{"tag":"","text":"Kick another user"}]}},{"name":"Admin_Ban","docStart":1885,"docEnd":1909,"docs":{"brief":"Ban another user","tags":[{"tag":"","text":"Ban another user"}]}},{"name":"Admin_Unban","docStart":1936,"docEnd":1962,"docs":{"brief":"Unban another user","tags":[{"tag":"","text":"Unban another user"}]}},{"name":"Admin_Slay","docStart":1989,"docEnd":2026,"docs":{"brief":"Slay/kill/damage another user","tags":[{"tag":"","text":"Slay/kill/damage another user"}]}},{"name":"Admin_Changemap","docStart":2053,"docEnd":2075,"docs":{"brief":"Change the map","tags":[{"tag":"","text":"Change the map"}]}},{"name":"Admin_Convars","docStart":2102,"docEnd":2130,"docs":{"brief":"Change basic convars","tags":[{"tag":"","text":"Change basic convars"}]}},{"name":"Admin_Config","docStart":2157,"docEnd":2185,"docs":{"brief":"Change configuration","tags":[{"tag":"","text":"Change configuration"}]}},{"name":"Admin_Chat","docStart":2212,"docEnd":2243,"docs":{"brief":"Special chat privileges","tags":[{"tag":"","text":"Special chat privileges"}]}},{"name":"Admin_Vote","docStart":2270,"docEnd":2301,"docs":{"brief":"Special vote privileges","tags":[{"tag":"","text":"Special vote privileges"}]}},{"name":"Admin_Password","docStart":2328,"docEnd":2357,"docs":{"brief":"Set a server password","tags":[{"tag":"","text":"Set a server password"}]}},{"name":"Admin_RCON","docStart":2384,"docEnd":2400,"docs":{"brief":"Use RCON","tags":[{"tag":"","text":"Use RCON"}]}},{"name":"Admin_Cheats","docStart":2427,"docEnd":2472,"docs":{"brief":"Change sv_cheats and use its commands","tags":[{"tag":"","text":"Change sv_cheats and use its commands"}]}},{"name":"Admin_Root","docStart":2499,"docEnd":2528,"docs":{"brief":"All access by default","tags":[{"tag":"","text":"All access by default"}]}},{"name":"Admin_Custom1","docStart":2555,"docEnd":2585,"docs":{"brief":"First custom flag type","tags":[{"tag":"","text":"First custom flag type"}]}},{"name":"Admin_Custom2","docStart":2612,"docEnd":2643,"docs":{"brief":"Second custom flag type","tags":[{"tag":"","text":"Second custom flag type"}]}},{"name":"Admin_Custom3","docStart":2670,"docEnd":2700,"docs":{"brief":"Third custom flag type","tags":[{"tag":"","text":"Third custom flag type"}]}},{"name":"Admin_Custom4","docStart":2727,"docEnd":2758,"docs":{"brief":"Fourth custom flag type","tags":[{"tag":"","text":"Fourth custom flag type"}]}},{"name":"Admin_Custom5","docStart":2785,"docEnd":2815,"docs":{"brief":"Fifth custom flag type","tags":[{"tag":"","text":"Fifth custom flag type"}]}},{"name":"Admin_Custom6","docStart":2842,"docEnd":2872,"docs":{"brief":"Sixth custom flag type","tags":[{"tag":"","text":"Sixth custom flag type"}]}}]},{"name":"OverrideType","docStart":5595,"docEnd":5630,"docs":{"brief":"Access override types.","tags":[{"tag":"","text":"Access override types."}]},"entries":[{"name":"Override_Command","docStart":5679,"docEnd":5694,"docs":{"brief":"Command","tags":[{"tag":"","text":"Command"}]}},{"name":"Override_CommandGroup","docStart":5721,"docEnd":5742,"docs":{"brief":"Command group","tags":[{"tag":"","text":"Command group"}]}}]},{"name":"OverrideRule","docStart":5750,"docEnd":5785,"docs":{"brief":"Access override rules.","tags":[{"tag":"","text":"Access override rules."}]},"entries":[{"name":"Command_Deny","docStart":0,"docEnd":0,"docs":null},{"name":"Command_Allow","docStart":0,"docEnd":0,"docs":null}]},{"name":"ImmunityType","docStart":5855,"docEnd":5891,"docs":{"brief":"DEPRECATED, do not use.","tags":[{"tag":"","text":"DEPRECATED, do not use."}]},"entries":[{"name":"Immunity_Default","docStart":5940,"docEnd":5959,"docs":{"brief":"Deprecated.","tags":[{"tag":"","text":"Deprecated."}]}},{"name":"Immunity_Global","docStart":5986,"docEnd":6005,"docs":{"brief":"Deprecated.","tags":[{"tag":"","text":"Deprecated."}]}}]},{"name":"GroupId","docStart":6013,"docEnd":6107,"docs":{"brief":"Identifies a unique entry in the group permissions cache.  These are not Handles.","tags":[{"tag":"","text":"Identifies a unique entry in the group permissions cache.  These are not Handles."}]},"entries":[{"name":"INVALID_GROUP_ID","docStart":6151,"docEnd":6188,"docs":{"brief":"An invalid/non-existent group","tags":[{"tag":"","text":"An invalid/non-existent group"}]}}]},{"name":"AdminId","docStart":6196,"docEnd":6290,"docs":{"brief":"Identifies a unique entry in the admin permissions cache.  These are not Handles.","tags":[{"tag":"","text":"Identifies a unique entry in the admin permissions cache.  These are not Handles."}]},"entries":[{"name":"INVALID_ADMIN_ID","docStart":6334,"docEnd":6371,"docs":{"brief":"An invalid/non-existent admin","tags":[{"tag":"","text":"An invalid/non-existent admin"}]}}]},{"name":"AdmAccessMode","docStart":6379,"docEnd":6432,"docs":{"brief":"Methods of computing access permissions.","tags":[{"tag":"","text":"Methods of computing access permissions."}]},"entries":[{"name":"Access_Real","docStart":6478,"docEnd":6516,"docs":{"brief":"Access the user has inherently","tags":[{"tag":"","text":"Access the user has inherently"}]}},{"name":"Access_Effective","docStart":6539,"docEnd":6584,"docs":{"brief":"Access the user has from their groups","tags":[{"tag":"","text":"Access the user has from their groups"}]}}]},{"name":"AdminCachePart","docStart":6592,"docEnd":6642,"docs":{"brief":"Represents the various cache regions.","tags":[{"tag":"","text":"Represents the various cache regions."}]},"entries":[{"name":"AdminCache_Overrides","docStart":6701,"docEnd":6725,"docs":{"brief":"Global overrides","tags":[{"tag":"","text":"Global overrides"}]}},{"name":"AdminCache_Groups","docStart":6760,"docEnd":6817,"docs":{"brief":"All groups (automatically invalidates admins too)","tags":[{"tag":"","text":"All groups (automatically invalidates admins too)"}]}},{"name":"AdminCache_Admins","docStart":6852,"docEnd":6870,"docs":{"brief":"All admins","tags":[{"tag":"","text":"All admins"}]}}]}],"typesets":[],"typedefs":[]}