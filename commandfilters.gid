{"functions":[{"name":"ProcessTargetString","docStart":2901,"docEnd":4138,"docs":{"brief":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return.","tags":[{"tag":"","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return."},{"tag":"param:pattern","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against."},{"tag":"param:admin","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server."},{"tag":"param:targets","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets."},{"tag":"param:max_targets","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array."},{"tag":"param:filter_flags","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array. Filter flags."},{"tag":"param:target_name","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array. Filter flags. Buffer to store the target name."},{"tag":"param:tn_maxlength","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array. Filter flags. Buffer to store the target name. Maximum length of the target name buffer."},{"tag":"param:tn_is_ml","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array. Filter flags. Buffer to store the target name. Maximum length of the target name buffer. OUTPUT: Will be true if the target name buffer is an ML phrase, false if it is a normal string."},{"tag":"return","text":"Processes a generic command target string, and resolves it to a list of clients or one client, based on filtering rules and a pattern. \n Note that you should use LoadTranslations(\"common.phrases\") in OnPluginStart(), as that file is guaranteed to contain all of the translatable phrases that ProcessTargetString() will return. \n Pattern to find clients against. Admin performing the action, or 0 if the server. Array to hold targets. Maximum size of the targets array. Filter flags. Buffer to store the target name. Maximum length of the target name buffer. OUTPUT: Will be true if the target name buffer is an ML phrase, false if it is a normal string. If a multi-target pattern was used, the number of clients found is returned.  If a single-target pattern was used, 1 is returned if one valid client is found.  Otherwise, a COMMAND_TARGET reason for failure is returned."}]},"kind":"native","returnType":"int","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"int","name":"admin","decl":"int admin"},{"type":"int[]","name":"targets","decl":"int[] targets"},{"type":"int","name":"max_targets","decl":"int max_targets"},{"type":"int","name":"filter_flags","decl":"int filter_flags"},{"type":"char[]","name":"target_name","decl":"char[] target_name"},{"type":"int","name":"tn_maxlength","decl":"int tn_maxlength"},{"type":"bool&","name":"tn_is_ml","decl":"bool& tn_is_ml"}]},{"name":"ReplyToTargetError","docStart":4390,"docEnd":4667,"docs":{"brief":"Replies to a client with a given message describing a targetting failure reason. \n Note: The translation phrases are found in common.phrases.txt.","tags":[{"tag":"","text":"Replies to a client with a given message describing a targetting failure reason. \n Note: The translation phrases are found in common.phrases.txt."},{"tag":"param:client","text":"Replies to a client with a given message describing a targetting failure reason. \n Note: The translation phrases are found in common.phrases.txt. \n Client index, or 0 for server."},{"tag":"param:reason","text":"Replies to a client with a given message describing a targetting failure reason. \n Note: The translation phrases are found in common.phrases.txt. \n Client index, or 0 for server. COMMAND_TARGET reason."}]},"kind":"stock","returnType":"void","arguments":[{"type":"int","name":"client","decl":"int client"},{"type":"int","name":"reason","decl":"int reason"}]},{"name":"AddMultiTargetFilter","docStart":6001,"docEnd":6333,"docs":{"brief":"Adds a multi-target filter function for ProcessTargetString().","tags":[{"tag":"","text":"Adds a multi-target filter function for ProcessTargetString()."},{"tag":"param:pattern","text":"Adds a multi-target filter function for ProcessTargetString(). \n Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Adds a multi-target filter function for ProcessTargetString(). \n Pattern to match (case sensitive). Filter function."},{"tag":"param:phrase","text":"Adds a multi-target filter function for ProcessTargetString(). \n Pattern to match (case sensitive). Filter function. Descriptive phrase to display on successful match."},{"tag":"param:phraseIsML","text":"Adds a multi-target filter function for ProcessTargetString(). \n Pattern to match (case sensitive). Filter function. Descriptive phrase to display on successful match. True if phrase is multi-lingual, false otherwise."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter"},{"type":"const char[]","name":"phrase","decl":"const char[] phrase"},{"type":"bool","name":"phraseIsML","decl":"bool phraseIsML"}]},{"name":"RemoveMultiTargetFilter","docStart":6492,"docEnd":6677,"docs":{"brief":"Removes a multi-target filter function from ProcessTargetString().","tags":[{"tag":"","text":"Removes a multi-target filter function from ProcessTargetString()."},{"tag":"param:pattern","text":"Removes a multi-target filter function from ProcessTargetString(). \n Pattern to match (case sensitive)."},{"tag":"param:filter","text":"Removes a multi-target filter function from ProcessTargetString(). \n Pattern to match (case sensitive). Filter function."}]},"kind":"native","returnType":"void","arguments":[{"type":"const char[]","name":"pattern","decl":"const char[] pattern"},{"type":"MultiTargetFilter","name":"filter","decl":"MultiTargetFilter filter"}]}],"methodmaps":[],"constants":[],"enums":[],"typesets":[{"name":"MultiTargetFilter","docStart":5608,"docEnd":5850,"docs":{"brief":"Adds clients to a multi-target filter.","tags":[{"tag":"","text":"Adds clients to a multi-target filter."},{"tag":"param:pattern","text":"Adds clients to a multi-target filter. \n Pattern name."},{"tag":"param:clients","text":"Adds clients to a multi-target filter. \n Pattern name. Array to fill with unique, valid client indexes."},{"tag":"return","text":"Adds clients to a multi-target filter. \n Pattern name. Array to fill with unique, valid client indexes. True if pattern was recognized, false otherwise."}]},"types":[{"type":"function bool(const char[] pattern, Handle clients)","docStart":0,"docEnd":0,"docs":null},{"type":"function bool(const char[] pattern, ArrayList clients)","docStart":0,"docEnd":0,"docs":null}]}],"typedefs":[]}