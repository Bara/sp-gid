{"functions":[{"name":"CloseHandle","docStart":1770,"docEnd":2160,"docs":{"brief":"Closes a Handle.  If the handle has multiple copies open,it is not destroyed unless all copies are closed.","tags":[{"tag":"","text":"Closes a Handle.  If the handle has multiple copies open,it is not destroyed unless all copies are closed."},{"tag":"note","text":"Closes a Handle.  If the handle has multiple copies open,it is not destroyed unless all copies are closed.\nClosing a Handle has a different meaning for each Handle type.  Makesure you read the documentation on whatever provided the Handle."},{"tag":"param:hndl","text":"Closes a Handle.  If the handle has multiple copies open,it is not destroyed unless all copies are closed.\nClosing a Handle has a different meaning for each Handle type.  Makesure you read the documentation on whatever provided the Handle.\nHandle to close."},{"tag":"error","text":"Closes a Handle.  If the handle has multiple copies open,it is not destroyed unless all copies are closed.\nClosing a Handle has a different meaning for each Handle type.  Makesure you read the documentation on whatever provided the Handle.\nHandle to close.Invalid handles will cause a run time error."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl"}]},{"name":"CloneHandle","docStart":2203,"docEnd":3280,"docs":{"brief":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.","tags":[{"tag":"","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner."},{"tag":"note","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\nUsually, you will be cloning Handles for other plugins.  This means that if you clonethe Handle without specifying the new owner, it will assume the identity of your originalcalling plugin, which is not very useful.  You should either specify that the receivingplugin should clone the handle on its own, or you should explicitly clone the Handleusing the receiving plugin's identity Handle."},{"tag":"param:hndl","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\nUsually, you will be cloning Handles for other plugins.  This means that if you clonethe Handle without specifying the new owner, it will assume the identity of your originalcalling plugin, which is not very useful.  You should either specify that the receivingplugin should clone the handle on its own, or you should explicitly clone the Handleusing the receiving plugin's identity Handle.\nHandle to clone/duplicate."},{"tag":"param:plugin","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\nUsually, you will be cloning Handles for other plugins.  This means that if you clonethe Handle without specifying the new owner, it will assume the identity of your originalcalling plugin, which is not very useful.  You should either specify that the receivingplugin should clone the handle on its own, or you should explicitly clone the Handleusing the receiving plugin's identity Handle.\nHandle to clone/duplicate.Optional Handle to another plugin to mark as the new owner.If no owner is passed, the owner becomes the calling plugin."},{"tag":"return","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\nUsually, you will be cloning Handles for other plugins.  This means that if you clonethe Handle without specifying the new owner, it will assume the identity of your originalcalling plugin, which is not very useful.  You should either specify that the receivingplugin should clone the handle on its own, or you should explicitly clone the Handleusing the receiving plugin's identity Handle.\nHandle to clone/duplicate.Optional Handle to another plugin to mark as the new owner.If no owner is passed, the owner becomes the calling plugin.Handle on success, INVALID_HANDLE if not cloneable."},{"tag":"error","text":"Clones a Handle.  When passing handles in between plugins, caching handlescan result in accidental invalidation when one plugin releases the Handle, or is its owneris unloaded from memory.  To prevent this, the Handle may be \"cloned\" with a new owner.\nUsually, you will be cloning Handles for other plugins.  This means that if you clonethe Handle without specifying the new owner, it will assume the identity of your originalcalling plugin, which is not very useful.  You should either specify that the receivingplugin should clone the handle on its own, or you should explicitly clone the Handleusing the receiving plugin's identity Handle.\nHandle to clone/duplicate.Optional Handle to another plugin to mark as the new owner.If no owner is passed, the owner becomes the calling plugin.Handle on success, INVALID_HANDLE if not cloneable.Invalid handles will cause a run time error."}]},"kind":"native","returnType":"Handle","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl"},{"type":"Handle","name":"plugin","decl":"Handle plugin"}]},{"name":"IsValidHandle","docStart":0,"docEnd":0,"docs":null,"kind":"native","returnType":"bool","arguments":[{"type":"Handle","name":"hndl","decl":"Handle hndl"}]}],"methodmaps":[],"constants":[],"enums":[{"name":"Handle","docStart":1639,"docEnd":1673,"docs":{"brief":"Preset Handle values.","tags":[{"tag":"","text":"Preset Handle values."}]},"entries":[{"name":"INVALID_HANDLE","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[],"typedefs":[]}