{"functions":[{"name":"SortIntegers","docStart":1970,"docEnd":2166,"docs":{"brief":"Sorts an array of integers.","tags":[{"tag":"","text":"Sorts an array of integers."},{"tag":"param:array","text":"Sorts an array of integers.\nArray of integers to sort in-place."},{"tag":"param:array_size","text":"Sorts an array of integers.\nArray of integers to sort in-place.Size of the array."},{"tag":"param:order","text":"Sorts an array of integers.\nArray of integers to sort in-place.Size of the array.Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"int[]","name":"array","decl":"int[] array"},{"type":"int","name":"array_size","decl":"int array_size"},{"type":"SortOrder","name":"order","decl":"SortOrder order"}]},{"name":"SortFloats","docStart":2260,"docEnd":2481,"docs":{"brief":"Sorts an array of float point numbers.","tags":[{"tag":"","text":"Sorts an array of float point numbers."},{"tag":"param:array","text":"Sorts an array of float point numbers.\nArray of floating point numbers to sort in-place."},{"tag":"param:array_size","text":"Sorts an array of float point numbers.\nArray of floating point numbers to sort in-place.Size of the array."},{"tag":"param:order","text":"Sorts an array of float point numbers.\nArray of floating point numbers to sort in-place.Size of the array.Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"float[]","name":"array","decl":"float[] array"},{"type":"int","name":"array_size","decl":"int array_size"},{"type":"SortOrder","name":"order","decl":"SortOrder order"}]},{"name":"SortStrings","docStart":2575,"docEnd":2769,"docs":{"brief":"Sorts an array of strings.","tags":[{"tag":"","text":"Sorts an array of strings."},{"tag":"param:array","text":"Sorts an array of strings.\nArray of strings to sort in-place."},{"tag":"param:array_size","text":"Sorts an array of strings.\nArray of strings to sort in-place.Size of the array."},{"tag":"param:order","text":"Sorts an array of strings.\nArray of strings to sort in-place.Size of the array.Sorting order to use."}]},"kind":"native","returnType":"void","arguments":[{"type":"char[][]","name":"array","decl":"char[][] array"},{"type":"int","name":"array_size","decl":"int array_size"},{"type":"SortOrder","name":"order","decl":"SortOrder order"}]},{"name":"SortCustom1D","docStart":3519,"docEnd":3812,"docs":{"brief":"Sorts a custom 1D array.  You must pass in a comparison function.","tags":[{"tag":"","text":"Sorts a custom 1D array.  You must pass in a comparison function."},{"tag":"param:array","text":"Sorts a custom 1D array.  You must pass in a comparison function.\nArray to sort."},{"tag":"param:array_size","text":"Sorts a custom 1D array.  You must pass in a comparison function.\nArray to sort.Size of the array to sort."},{"tag":"param:sortfunc","text":"Sorts a custom 1D array.  You must pass in a comparison function.\nArray to sort.Size of the array to sort.Sort function."},{"tag":"param:hndl","text":"Sorts a custom 1D array.  You must pass in a comparison function.\nArray to sort.Size of the array to sort.Sort function.Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"int[]","name":"array","decl":"int[] array"},{"type":"int","name":"array_size","decl":"int array_size"},{"type":"SortFunc1D","name":"sortfunc","decl":"SortFunc1D sortfunc"},{"type":"Handle","name":"hndl","decl":"Handle hndl"}]},{"name":"SortCustom2D","docStart":4677,"docEnd":5019,"docs":{"brief":"Sorts a custom 2D array.  You must pass in a comparison function.","tags":[{"tag":"","text":"Sorts a custom 2D array.  You must pass in a comparison function."},{"tag":"param:array","text":"Sorts a custom 2D array.  You must pass in a comparison function.\nArray to sort."},{"tag":"param:array_size","text":"Sorts a custom 2D array.  You must pass in a comparison function.\nArray to sort.Size of the major array to sort (first index, outermost)."},{"tag":"param:sortfunc","text":"Sorts a custom 2D array.  You must pass in a comparison function.\nArray to sort.Size of the major array to sort (first index, outermost).Sort comparison function to use."},{"tag":"param:hndl","text":"Sorts a custom 2D array.  You must pass in a comparison function.\nArray to sort.Size of the major array to sort (first index, outermost).Sort comparison function to use.Optional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"any[][]","name":"array","decl":"any[][] array"},{"type":"int","name":"array_size","decl":"int array_size"},{"type":"SortFunc2D","name":"sortfunc","decl":"SortFunc2D sortfunc"},{"type":"Handle","name":"hndl","decl":"Handle hndl"}]},{"name":"SortADTArray","docStart":5130,"docEnd":5382,"docs":{"brief":"Sort an ADT Array. Specify the type as Integer, Float, or String.","tags":[{"tag":"","text":"Sort an ADT Array. Specify the type as Integer, Float, or String."},{"tag":"param:array","text":"Sort an ADT Array. Specify the type as Integer, Float, or String.\nArray Handle to sort"},{"tag":"param:order","text":"Sort an ADT Array. Specify the type as Integer, Float, or String.\nArray Handle to sortSort order to use, same as other sorts."},{"tag":"param:type","text":"Sort an ADT Array. Specify the type as Integer, Float, or String.\nArray Handle to sortSort order to use, same as other sorts.Data type stored in the ADT Array"}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array"},{"type":"SortOrder","name":"order","decl":"SortOrder order"},{"type":"SortType","name":"type","decl":"SortType type"}]},{"name":"SortADTArrayCustom","docStart":6171,"docEnd":6436,"docs":{"brief":"Custom sorts an ADT Array. You must pass in a comparison function.","tags":[{"tag":"","text":"Custom sorts an ADT Array. You must pass in a comparison function."},{"tag":"param:array","text":"Custom sorts an ADT Array. You must pass in a comparison function.\nArray Handle to sort"},{"tag":"param:sortfunc","text":"Custom sorts an ADT Array. You must pass in a comparison function.\nArray Handle to sortSort comparison function to use"},{"tag":"param:hndl","text":"Custom sorts an ADT Array. You must pass in a comparison function.\nArray Handle to sortSort comparison function to useOptional Handle to pass through the comparison calls."}]},"kind":"native","returnType":"void","arguments":[{"type":"Handle","name":"array","decl":"Handle array"},{"type":"SortFuncADTArray","name":"sortfunc","decl":"SortFuncADTArray sortfunc"},{"type":"Handle","name":"hndl","decl":"Handle hndl"}]}],"methodmaps":[],"constants":[],"enums":[{"name":"SortOrder","docStart":1641,"docEnd":1678,"docs":{"brief":"Contains sorting orders.","tags":[{"tag":"","text":"Contains sorting orders."}]},"entries":[{"name":"Sort_Ascending","docStart":1724,"docEnd":1747,"docs":null},{"name":"Sort_Descending","docStart":1774,"docEnd":1798,"docs":null},{"name":"Sort_Random","docStart":1825,"docEnd":1845,"docs":null}]},{"name":"SortType","docStart":1853,"docEnd":1896,"docs":{"brief":"Data types for ADT Array Sorts","tags":[{"tag":"","text":"Data types for ADT Array Sorts"}]},"entries":[{"name":"Sort_Integer","docStart":0,"docEnd":0,"docs":null},{"name":"Sort_Float","docStart":0,"docEnd":0,"docs":null},{"name":"Sort_String","docStart":0,"docEnd":0,"docs":null}]}],"typesets":[{"name":"SortFunc2D","docStart":3921,"docEnd":4489,"docs":{"brief":"Sort comparison function for 2D array elements (sub-arrays).","tags":[{"tag":"","text":"Sort comparison function for 2D array elements (sub-arrays)."},{"tag":"note","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly."},{"tag":"param:elem1","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly.\nFirst array to compare."},{"tag":"param:elem2","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly.\nFirst array to compare.Second array to compare."},{"tag":"param:array","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly.\nFirst array to compare.Second array to compare.Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly.\nFirst array to compare.Second array to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting."},{"tag":"return","text":"Sort comparison function for 2D array elements (sub-arrays).You may need to use explicit tags in order to use data properly.\nFirst array to compare.Second array to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting.-1 if first should go before second0 if first is equal to second1 if first should go after second"}]},"types":[{"type":"function int(int[] elem1, int[] elem2, const int[][] array, Handle hndl)","docStart":0,"docEnd":0,"docs":null},{"type":"function int(char[] elem1, char[] elem2, const char[][] array, Handle hndl)","docStart":0,"docEnd":0,"docs":null}]}],"typedefs":[{"name":"SortFunc1D","docStart":2865,"docEnd":3424,"docs":{"brief":"Sort comparison function for 1D array elements.","tags":[{"tag":"","text":"Sort comparison function for 1D array elements."},{"tag":"note","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly."},{"tag":"param:elem1","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly.\nFirst element to compare."},{"tag":"param:elem2","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly.\nFirst element to compare.Second element to compare."},{"tag":"param:array","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly.\nFirst element to compare.Second element to compare.Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly.\nFirst element to compare.Second element to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting."},{"tag":"return","text":"Sort comparison function for 1D array elements.You may need to use explicit tags in order to use data properly.\nFirst element to compare.Second element to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting.-1 if first should go before second0 if first is equal to second1 if first should go after second"}]},"type":"function int(int elem1, int elem2, const int[] array, Handle hndl)"},{"name":"SortFuncADTArray","docStart":5459,"docEnd":6073,"docs":{"brief":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.","tags":[{"tag":"","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare."},{"tag":"param:index1","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.\nFirst index to compare."},{"tag":"param:index2","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.\nFirst index to compare.Second index to compare."},{"tag":"param:array","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.\nFirst index to compare.Second index to compare.Array that is being sorted (order is undefined)."},{"tag":"param:hndl","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.\nFirst index to compare.Second index to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting."},{"tag":"return","text":"Sort comparison function for ADT Array elements. Function provides you withindexes currently being sorted, use ADT Array functions to retrieve theindex values and compare.\nFirst index to compare.Second index to compare.Array that is being sorted (order is undefined).Handle optionally passed in while sorting.-1 if first should go before second0 if first is equal to second1 if first should go after second"}]},"type":"function int(int index1, int index2, Handle array, Handle hndl)"}]}